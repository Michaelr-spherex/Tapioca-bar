{
  "address": "0x0a26728D5Ad0CCc625d1EFbf1036f75085dE8819",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_mintLimit",
          "type": "uint256"
        }
      ],
      "name": "deployToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "last",
      "outputs": [
        {
          "internalType": "contract ERC20Mock",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb0b5881d8e758d4d62f851c1a69788e284d72eb26677e991bc46de6bdf76f15f",
  "receipt": {
    "to": null,
    "from": "0x40282d3Cf4890D9806BC1853e97a59C93D813653",
    "contractAddress": "0x0a26728D5Ad0CCc625d1EFbf1036f75085dE8819",
    "transactionIndex": 8,
    "gasUsed": "1099600",
    "logsBloom": "0x
    "blockHash": "0x293181a74aae7903c6ee788b3ef665b00c95cd9c3872e34e621056cce3a25a47",
    "transactionHash": "0xb0b5881d8e758d4d62f851c1a69788e284d72eb26677e991bc46de6bdf76f15f",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 31908210,
        "transactionHash": "0xb0b5881d8e758d4d62f851c1a69788e284d72eb26677e991bc46de6bdf76f15f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000040282d3cf4890d9806bc1853e97a59c93d813653",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000005dc1edd17b000000000000000000000000000000000000000000000000000090b9609e789eb7a000000000000000000000000000000000000000000002af1b32e90c9d16825010000000000000000000000000000000000000000000000000905b9eb0a723b7a000000000000000000000000000000000000000000002af1b3346ce8ae7fd501",
        "logIndex": 16,
        "blockHash": "0x293181a74aae7903c6ee788b3ef665b00c95cd9c3872e34e621056cce3a25a47"
      }
    ],
    "blockNumber": 31908210,
    "cumulativeGasUsed": "2086540",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bb2b184e984fe428c619b3cf75e01f41",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_mintLimit\",\"type\":\"uint256\"}],\"name\":\"deployToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"last\",\"outputs\":[{\"internalType\":\"contract ERC20Mock\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/singularity/legacy/mocks/ERC20FactoryMock.sol\":\"ERC20FactoryMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/Domain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Based on code and smartness by Ross Campbell and Keno\\n// Uses immutable to store the domain separator to reduce gas usage\\n// If the chain id changes due to a fork, the forked chain will calculate on the fly.\\npragma solidity ^0.8.0;\\n\\n// solhint-disable no-inline-assembly\\n\\ncontract Domain {\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\\\"EIP712Domain(uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n\\n    // solhint-disable var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    /// @dev Calculate the DOMAIN_SEPARATOR\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, chainId, address(this)));\\n    }\\n\\n    constructor() {\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = block.chainid);\\n    }\\n\\n    /// @dev Return the DOMAIN_SEPARATOR\\n    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\\n    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function _domainSeparator() internal view returns (bytes32) {\\n        return block.chainid == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(block.chainid);\\n    }\\n\\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\\n        digest = keccak256(abi.encodePacked(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, _domainSeparator(), dataHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe7da5a6c4f843de3fba6e164cb41a75da46c87f4bf76d29ff6ffe38b3e395d9e\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./Domain.sol\\\";\\n\\n// solhint-disable no-inline-assembly\\n// solhint-disable not-rely-on-time\\n\\n// Data part taken out for building of contracts that receive delegate calls\\ncontract ERC20Data {\\n    /// @notice owner > balance mapping.\\n    mapping(address => uint256) public balanceOf;\\n    /// @notice owner > spender > allowance mapping.\\n    mapping(address => mapping(address => uint256)) public allowance;\\n    /// @notice owner > nonce mapping. Used in `permit`.\\n    mapping(address => uint256) public nonces;\\n}\\n\\nabstract contract ERC20 is IERC20, Domain {\\n    /// @notice owner > balance mapping.\\n    mapping(address => uint256) public override balanceOf;\\n    /// @notice owner > spender > allowance mapping.\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n    /// @notice owner > nonce mapping. Used in `permit`.\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice Transfers `amount` tokens from `msg.sender` to `to`.\\n    /// @param to The address to move the tokens.\\n    /// @param amount of the tokens to move.\\n    /// @return (bool) Returns True if succeeded.\\n    function transfer(address to, uint256 amount) public returns (bool) {\\n        // If `amount` is 0, or `msg.sender` is `to` nothing happens\\n        if (amount != 0 || msg.sender == to) {\\n            uint256 srcBalance = balanceOf[msg.sender];\\n            require(srcBalance >= amount, \\\"ERC20: balance too low\\\");\\n            if (msg.sender != to) {\\n                require(to != address(0), \\\"ERC20: no zero address\\\"); // Moved down so low balance calls safe some gas\\n\\n                balanceOf[msg.sender] = srcBalance - amount; // Underflow is checked\\n                balanceOf[to] += amount;\\n            }\\n        }\\n        emit Transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfers `amount` tokens from `from` to `to`. Caller needs approval for `from`.\\n    /// @param from Address to draw tokens from.\\n    /// @param to The address to move the tokens.\\n    /// @param amount The token amount to move.\\n    /// @return (bool) Returns True if succeeded.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public returns (bool) {\\n        // If `amount` is 0, or `from` is `to` nothing happens\\n        if (amount != 0) {\\n            uint256 srcBalance = balanceOf[from];\\n            require(srcBalance >= amount, \\\"ERC20: balance too low\\\");\\n\\n            if (from != to) {\\n                uint256 spenderAllowance = allowance[from][msg.sender];\\n                // If allowance is infinite, don't decrease it to save on gas (breaks with EIP-20).\\n                if (spenderAllowance != type(uint256).max) {\\n                    require(spenderAllowance >= amount, \\\"ERC20: allowance too low\\\");\\n                    allowance[from][msg.sender] = spenderAllowance - amount; // Underflow is checked\\n                }\\n                require(to != address(0), \\\"ERC20: no zero address\\\"); // Moved down so other failed calls safe some gas\\n\\n                balanceOf[from] = srcBalance - amount; // Underflow is checked\\n                balanceOf[to] += amount;\\n            }\\n        }\\n        emit Transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /// @notice Approves `amount` from sender to be spend by `spender`.\\n    /// @param spender Address of the party that can draw from msg.sender's account.\\n    /// @param amount The maximum collective amount that `spender` can draw.\\n    /// @return (bool) Returns True if approved.\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\\n        return _domainSeparator();\\n    }\\n\\n    // keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 private constant PERMIT_SIGNATURE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    /// @notice Approves `value` from `owner_` to be spend by `spender`.\\n    /// @param owner_ Address of the owner.\\n    /// @param spender The address of the spender that gets approved to draw from `owner_`.\\n    /// @param value The maximum collective amount that `spender` can draw.\\n    /// @param deadline This permit must be redeemed before this deadline (UTC timestamp in seconds).\\n    function permit(\\n        address owner_,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override {\\n        require(owner_ != address(0), \\\"ERC20: Owner cannot be 0\\\");\\n        require(block.timestamp < deadline, \\\"ERC20: Expired\\\");\\n        require(\\n            ecrecover(_getDigest(keccak256(abi.encode(PERMIT_SIGNATURE_HASH, owner_, spender, value, nonces[owner_]++, deadline))), v, r, s) ==\\n                owner_,\\n            \\\"ERC20: Invalid Signature\\\"\\n        );\\n        allowance[owner_][spender] = value;\\n        emit Approval(owner_, spender, value);\\n    }\\n}\\n\\ncontract ERC20WithSupply is IERC20, ERC20 {\\n    uint256 public override totalSupply;\\n\\n    function _mint(address user, uint256 amount) internal {\\n        uint256 newTotalSupply = totalSupply + amount;\\n        require(newTotalSupply >= totalSupply, \\\"Mint overflow\\\");\\n        totalSupply = newTotalSupply;\\n        balanceOf[user] += amount;\\n        emit Transfer(address(0), user, amount);\\n    }\\n\\n    function _burn(address user, uint256 amount) internal {\\n        require(balanceOf[user] >= amount, \\\"Burn too much\\\");\\n        totalSupply -= amount;\\n        balanceOf[user] -= amount;\\n        emit Transfer(user, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xb194f8a423a67abd8fe7a33d6011cc7539bb4e904fae4f943ca06715d1bd7fb5\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\\n    // By removing them you can't accidentally use them.\\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IStrictERC20 {\\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3ab46c194bf6ebcb4ae1b094c7e41061ef651ee1150d1a07beaf9db085dee0ee\",\"license\":\"MIT\"},\"contracts/singularity/legacy/mocks/ERC20FactoryMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport '@boringcrypto/boring-solidity/contracts/ERC20.sol';\\r\\n\\r\\nimport './ERC20Mock.sol';\\r\\n\\r\\ncontract ERC20FactoryMock {\\r\\n    ERC20Mock public last;\\r\\n\\r\\n    function deployToken(\\r\\n        uint256 _supply,\\r\\n        uint8 _decimals,\\r\\n        uint256 _mintLimit\\r\\n    ) external {\\r\\n        ERC20Mock tkn = new ERC20Mock(_supply, _decimals, _mintLimit);\\r\\n        last = tkn;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x290ead28f07902f7197adc888ddd7490e0be7c458bd7ca7b2bc60e0b95f99c89\",\"license\":\"MIT\"},\"contracts/singularity/legacy/mocks/ERC20Mock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport '@boringcrypto/boring-solidity/contracts/ERC20.sol';\\r\\n\\r\\ncontract ERC20Mock is ERC20WithSupply {\\r\\n    string public name = 'Polygon';\\r\\n    string public symbol = 'MATIC';\\r\\n    uint8 public decimals;\\r\\n\\r\\n    mapping(address => uint256) public mintedAt;\\r\\n    uint256 public constant MINT_WINDOW = 24 hours;\\r\\n    uint256 public mintLimit;\\r\\n\\r\\n    constructor(\\r\\n        uint256 _initialAmount,\\r\\n        uint8 _decimals,\\r\\n        uint256 _mintLimit\\r\\n    ) {\\r\\n        totalSupply = _initialAmount;\\r\\n        decimals = _decimals;\\r\\n        mintLimit = _mintLimit;\\r\\n    }\\r\\n\\r\\n    function freeMint(uint256 _val) public {\\r\\n        require(_val <= mintLimit, 'ERC20Mock: amount too big');\\r\\n        require(\\r\\n            mintedAt[msg.sender] + MINT_WINDOW <= block.timestamp,\\r\\n            'ERC20Mock: too early'\\r\\n        );\\r\\n\\r\\n        mintedAt[msg.sender] = block.timestamp;\\r\\n\\r\\n        _mint(msg.sender, _val);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8220ffbc9c66e1cc4fa96cc8ff4840baf55e300c19a87f315862532b438766bd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506112f5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806321b19c541461003b57806347799da814610050575b600080fd5b61004e6100493660046100f5565b61007f565b005b600054610063906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6000838383604051610090906100e8565b92835260ff90911660208301526040820152606001604051809103906000f0801580156100c1573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905550505050565b61118c8061013483390190565b60008060006060848603121561010a57600080fd5b83359250602084013560ff8116811461012257600080fd5b92959294505050604091909101359056fe610100604052600760c0908152662837b63cb3b7b760c91b60e052600490620000299082620001b4565b50604080518082019091526005808252644d4154494360d81b602083015290620000549082620001b4565b503480156200006257600080fd5b506040516200118c3803806200118c833981016040819052620000859162000280565b4660a0819052620000e990604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152908101829052306060820152600090608001604051602081830303815290604052805190602001209050919050565b6080526003929092556006805460ff191660ff92909216919091179055600855620002c1565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200013a57607f821691505b6020821081036200015b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001af57600081815260208120601f850160051c810160208610156200018a5750805b601f850160051c820191505b81811015620001ab5782815560010162000196565b5050505b505050565b81516001600160401b03811115620001d057620001d06200010f565b620001e881620001e1845462000125565b8462000161565b602080601f831160018114620002205760008415620002075750858301515b600019600386901b1c1916600185901b178555620001ab565b600085815260208120601f198616915b82811015620002515788860151825594840194600190910190840162000230565b5085821015620002705787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000806000606084860312156200029657600080fd5b83519250602084015160ff81168114620002af57600080fd5b80925050604084015190509250925092565b60805160a051610ea5620002e76000396000610a3501526000610a660152610ea56000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063996517cf11610066578063996517cf1461021e578063a9059cbb14610227578063d505accf1461023a578063dd62ed3e1461024d57600080fd5b806370a08231146101c15780637c928fe9146101e15780637ecebe00146101f657806395d89b411461021657600080fd5b806322ae81af116100d357806322ae81af1461017d57806323b872dd14610187578063313ce5671461019a5780633644e515146101b957600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806321442ec91461015d575b600080fd5b61010d610278565b60405161011a9190610c1a565b60405180910390f35b610136610131366004610c69565b610306565b604051901515815260200161011a565b61014f60035481565b60405190815260200161011a565b61014f61016b366004610c93565b60076020526000908152604090205481565b61014f6201518081565b610136610195366004610cb5565b610372565b6006546101a79060ff1681565b60405160ff909116815260200161011a565b61014f610595565b61014f6101cf366004610c93565b60006020819052908152604090205481565b6101f46101ef366004610cf1565b6105a4565b005b61014f610204366004610c93565b60026020526000908152604090205481565b61010d61067a565b61014f60085481565b610136610235366004610c69565b610687565b6101f4610248366004610d0a565b6107de565b61014f61025b366004610d7d565b600160209081526000928352604080842090915290825290205481565b6004805461028590610db0565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610db0565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b505050505081565b3360008181526001602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103619086815260200190565b60405180910390a350600192915050565b6000811561053e576001600160a01b038416600090815260208190526040902054828110156103e15760405162461bcd60e51b815260206004820152601660248201527545524332303a2062616c616e636520746f6f206c6f7760501b60448201526064015b60405180910390fd5b836001600160a01b0316856001600160a01b03161461053c576001600160a01b038516600090815260016020908152604080832033845290915290205460001981146104a657838110156104775760405162461bcd60e51b815260206004820152601860248201527f45524332303a20616c6c6f77616e636520746f6f206c6f77000000000000000060448201526064016103d8565b6104818482610e00565b6001600160a01b03871660009081526001602090815260408083203384529091529020555b6001600160a01b0385166104f55760405162461bcd60e51b815260206004820152601660248201527545524332303a206e6f207a65726f206164647265737360501b60448201526064016103d8565b6104ff8483610e00565b6001600160a01b038088166000908152602081905260408082209390935590871681529081208054869290610535908490610e17565b9091555050505b505b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161058391815260200190565b60405180910390a35060019392505050565b600061059f610a31565b905090565b6008548111156105f65760405162461bcd60e51b815260206004820152601960248201527f45524332304d6f636b3a20616d6f756e7420746f6f206269670000000000000060448201526064016103d8565b336000908152600760205260409020544290610616906201518090610e17565b111561065b5760405162461bcd60e51b815260206004820152601460248201527345524332304d6f636b3a20746f6f206561726c7960601b60448201526064016103d8565b3360008181526007602052604090204290556106779082610a88565b50565b6005805461028590610db0565b60008115158061069f5750336001600160a01b038416145b156107a15733600090815260208190526040902054828110156106fd5760405162461bcd60e51b815260206004820152601660248201527545524332303a2062616c616e636520746f6f206c6f7760501b60448201526064016103d8565b336001600160a01b0385161461079f576001600160a01b03841661075c5760405162461bcd60e51b815260206004820152601660248201527545524332303a206e6f207a65726f206164647265737360501b60448201526064016103d8565b6107668382610e00565b33600090815260208190526040808220929092556001600160a01b03861681529081208054859290610799908490610e17565b90915550505b505b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610361565b6001600160a01b0387166108345760405162461bcd60e51b815260206004820152601860248201527f45524332303a204f776e65722063616e6e6f742062652030000000000000000060448201526064016103d8565b8342106108745760405162461bcd60e51b815260206004820152600e60248201526d115490cc8c0e88115e1c1a5c995960921b60448201526064016103d8565b6001600160a01b0387166000818152600260205260408120805460019261091e927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d92916108c783610e2f565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e00160405160208183030381529060405280519060200120610b54565b6040805160008152602081018083529290925260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561096c573d6000803e3d6000fd5b505050602060405103516001600160a01b0316146109cc5760405162461bcd60e51b815260206004820152601860248201527f45524332303a20496e76616c6964205369676e6174757265000000000000000060448201526064016103d8565b6001600160a01b038781166000818152600160209081526040808320948b168084529482529182902089905590518881527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614610a635761059f46610ba9565b507f000000000000000000000000000000000000000000000000000000000000000090565b600081600354610a989190610e17565b9050600354811015610adc5760405162461bcd60e51b815260206004820152600d60248201526c4d696e74206f766572666c6f7760981b60448201526064016103d8565b60038190556001600160a01b03831660009081526020819052604081208054849290610b09908490610e17565b90915550506040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600060405180604001604052806002815260200161190160f01b815250610b79610a31565b83604051602001610b8c93929190610e48565b604051602081830303815290604052805190602001209050919050565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152908101829052306060820152600090608001610b8c565b60005b83811015610c05578181015183820152602001610bed565b83811115610c14576000848401525b50505050565b6020815260008251806020840152610c39816040850160208701610bea565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610c6457600080fd5b919050565b60008060408385031215610c7c57600080fd5b610c8583610c4d565b946020939093013593505050565b600060208284031215610ca557600080fd5b610cae82610c4d565b9392505050565b600080600060608486031215610cca57600080fd5b610cd384610c4d565b9250610ce160208501610c4d565b9150604084013590509250925092565b600060208284031215610d0357600080fd5b5035919050565b600080600080600080600060e0888a031215610d2557600080fd5b610d2e88610c4d565b9650610d3c60208901610c4d565b95506040880135945060608801359350608088013560ff81168114610d6057600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610d9057600080fd5b610d9983610c4d565b9150610da760208401610c4d565b90509250929050565b600181811c90821680610dc457607f821691505b602082108103610de457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015610e1257610e12610dea565b500390565b60008219821115610e2a57610e2a610dea565b500190565b600060018201610e4157610e41610dea565b5060010190565b60008451610e5a818460208901610bea565b9190910192835250602082015260400191905056fea2646970667358221220075c25ac3248b219bac17c7c86d4ac2b646cbbe029a7a5f75a7c6a8cbdeb84c964736f6c634300080f0033a264697066735822122076de77a99574e29c13fac953beaa57de2531f22e8ada3a2118e7e0dd2bbcb56264736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806321b19c541461003b57806347799da814610050575b600080fd5b61004e6100493660046100f5565b61007f565b005b600054610063906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6000838383604051610090906100e8565b92835260ff90911660208301526040820152606001604051809103906000f0801580156100c1573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b039290921691909117905550505050565b61118c8061013483390190565b60008060006060848603121561010a57600080fd5b83359250602084013560ff8116811461012257600080fd5b92959294505050604091909101359056fe610100604052600760c0908152662837b63cb3b7b760c91b60e052600490620000299082620001b4565b50604080518082019091526005808252644d4154494360d81b602083015290620000549082620001b4565b503480156200006257600080fd5b506040516200118c3803806200118c833981016040819052620000859162000280565b4660a0819052620000e990604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152908101829052306060820152600090608001604051602081830303815290604052805190602001209050919050565b6080526003929092556006805460ff191660ff92909216919091179055600855620002c1565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200013a57607f821691505b6020821081036200015b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001af57600081815260208120601f850160051c810160208610156200018a5750805b601f850160051c820191505b81811015620001ab5782815560010162000196565b5050505b505050565b81516001600160401b03811115620001d057620001d06200010f565b620001e881620001e1845462000125565b8462000161565b602080601f831160018114620002205760008415620002075750858301515b600019600386901b1c1916600185901b178555620001ab565b600085815260208120601f198616915b82811015620002515788860151825594840194600190910190840162000230565b5085821015620002705787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000806000606084860312156200029657600080fd5b83519250602084015160ff81168114620002af57600080fd5b80925050604084015190509250925092565b60805160a051610ea5620002e76000396000610a3501526000610a660152610ea56000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a0823111610097578063996517cf11610066578063996517cf1461021e578063a9059cbb14610227578063d505accf1461023a578063dd62ed3e1461024d57600080fd5b806370a08231146101c15780637c928fe9146101e15780637ecebe00146101f657806395d89b411461021657600080fd5b806322ae81af116100d357806322ae81af1461017d57806323b872dd14610187578063313ce5671461019a5780633644e515146101b957600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806321442ec91461015d575b600080fd5b61010d610278565b60405161011a9190610c1a565b60405180910390f35b610136610131366004610c69565b610306565b604051901515815260200161011a565b61014f60035481565b60405190815260200161011a565b61014f61016b366004610c93565b60076020526000908152604090205481565b61014f6201518081565b610136610195366004610cb5565b610372565b6006546101a79060ff1681565b60405160ff909116815260200161011a565b61014f610595565b61014f6101cf366004610c93565b60006020819052908152604090205481565b6101f46101ef366004610cf1565b6105a4565b005b61014f610204366004610c93565b60026020526000908152604090205481565b61010d61067a565b61014f60085481565b610136610235366004610c69565b610687565b6101f4610248366004610d0a565b6107de565b61014f61025b366004610d7d565b600160209081526000928352604080842090915290825290205481565b6004805461028590610db0565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610db0565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b505050505081565b3360008181526001602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103619086815260200190565b60405180910390a350600192915050565b6000811561053e576001600160a01b038416600090815260208190526040902054828110156103e15760405162461bcd60e51b815260206004820152601660248201527545524332303a2062616c616e636520746f6f206c6f7760501b60448201526064015b60405180910390fd5b836001600160a01b0316856001600160a01b03161461053c576001600160a01b038516600090815260016020908152604080832033845290915290205460001981146104a657838110156104775760405162461bcd60e51b815260206004820152601860248201527f45524332303a20616c6c6f77616e636520746f6f206c6f77000000000000000060448201526064016103d8565b6104818482610e00565b6001600160a01b03871660009081526001602090815260408083203384529091529020555b6001600160a01b0385166104f55760405162461bcd60e51b815260206004820152601660248201527545524332303a206e6f207a65726f206164647265737360501b60448201526064016103d8565b6104ff8483610e00565b6001600160a01b038088166000908152602081905260408082209390935590871681529081208054869290610535908490610e17565b9091555050505b505b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161058391815260200190565b60405180910390a35060019392505050565b600061059f610a31565b905090565b6008548111156105f65760405162461bcd60e51b815260206004820152601960248201527f45524332304d6f636b3a20616d6f756e7420746f6f206269670000000000000060448201526064016103d8565b336000908152600760205260409020544290610616906201518090610e17565b111561065b5760405162461bcd60e51b815260206004820152601460248201527345524332304d6f636b3a20746f6f206561726c7960601b60448201526064016103d8565b3360008181526007602052604090204290556106779082610a88565b50565b6005805461028590610db0565b60008115158061069f5750336001600160a01b038416145b156107a15733600090815260208190526040902054828110156106fd5760405162461bcd60e51b815260206004820152601660248201527545524332303a2062616c616e636520746f6f206c6f7760501b60448201526064016103d8565b336001600160a01b0385161461079f576001600160a01b03841661075c5760405162461bcd60e51b815260206004820152601660248201527545524332303a206e6f207a65726f206164647265737360501b60448201526064016103d8565b6107668382610e00565b33600090815260208190526040808220929092556001600160a01b03861681529081208054859290610799908490610e17565b90915550505b505b6040518281526001600160a01b0384169033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610361565b6001600160a01b0387166108345760405162461bcd60e51b815260206004820152601860248201527f45524332303a204f776e65722063616e6e6f742062652030000000000000000060448201526064016103d8565b8342106108745760405162461bcd60e51b815260206004820152600e60248201526d115490cc8c0e88115e1c1a5c995960921b60448201526064016103d8565b6001600160a01b0387166000818152600260205260408120805460019261091e927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9928d928d928d92916108c783610e2f565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810188905260e00160405160208183030381529060405280519060200120610b54565b6040805160008152602081018083529290925260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa15801561096c573d6000803e3d6000fd5b505050602060405103516001600160a01b0316146109cc5760405162461bcd60e51b815260206004820152601860248201527f45524332303a20496e76616c6964205369676e6174757265000000000000000060448201526064016103d8565b6001600160a01b038781166000818152600160209081526040808320948b168084529482529182902089905590518881527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000004614610a635761059f46610ba9565b507f000000000000000000000000000000000000000000000000000000000000000090565b600081600354610a989190610e17565b9050600354811015610adc5760405162461bcd60e51b815260206004820152600d60248201526c4d696e74206f766572666c6f7760981b60448201526064016103d8565b60038190556001600160a01b03831660009081526020819052604081208054849290610b09908490610e17565b90915550506040518281526001600160a01b038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b600060405180604001604052806002815260200161190160f01b815250610b79610a31565b83604051602001610b8c93929190610e48565b604051602081830303815290604052805190602001209050919050565b604080517f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692186020820152908101829052306060820152600090608001610b8c565b60005b83811015610c05578181015183820152602001610bed565b83811115610c14576000848401525b50505050565b6020815260008251806020840152610c39816040850160208701610bea565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610c6457600080fd5b919050565b60008060408385031215610c7c57600080fd5b610c8583610c4d565b946020939093013593505050565b600060208284031215610ca557600080fd5b610cae82610c4d565b9392505050565b600080600060608486031215610cca57600080fd5b610cd384610c4d565b9250610ce160208501610c4d565b9150604084013590509250925092565b600060208284031215610d0357600080fd5b5035919050565b600080600080600080600060e0888a031215610d2557600080fd5b610d2e88610c4d565b9650610d3c60208901610c4d565b95506040880135945060608801359350608088013560ff81168114610d6057600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610d9057600080fd5b610d9983610c4d565b9150610da760208401610c4d565b90509250929050565b600181811c90821680610dc457607f821691505b602082108103610de457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600082821015610e1257610e12610dea565b500390565b60008219821115610e2a57610e2a610dea565b500190565b600060018201610e4157610e41610dea565b5060010190565b60008451610e5a818460208901610bea565b9190910192835250602082015260400191905056fea2646970667358221220075c25ac3248b219bac17c7c86d4ac2b646cbbe029a7a5f75a7c6a8cbdeb84c964736f6c634300080f0033a264697066735822122076de77a99574e29c13fac953beaa57de2531f22e8ada3a2118e7e0dd2bbcb56264736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1226,
        "contract": "contracts/singularity/legacy/mocks/ERC20FactoryMock.sol:ERC20FactoryMock",
        "label": "last",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ERC20Mock)1337"
      }
    ],
    "types": {
      "t_contract(ERC20Mock)1337": {
        "encoding": "inplace",
        "label": "contract ERC20Mock",
        "numberOfBytes": "20"
      }
    }
  }
}