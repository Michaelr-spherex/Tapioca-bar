{
  "address": "0x707dC804728495e14F58c22a38dE17b5c7591323",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDataParameter",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "peek",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "peekSpot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate_",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "val",
          "type": "bool"
        }
      ],
      "name": "setSuccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "success",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x3c7839bee5fd644580e122a35128acf49b461c0796938efbbb46f5454042a191",
  "receipt": {
    "to": null,
    "from": "0x40282d3Cf4890D9806BC1853e97a59C93D813653",
    "contractAddress": "0x707dC804728495e14F58c22a38dE17b5c7591323",
    "transactionIndex": 1,
    "gasUsed": "259714",
    "logsBloom": "0x
    "blockHash": "0x2d4db40ca549a3557aa5e11e36f9f3533743ce4a244ef00cb8741bf6bea64693",
    "transactionHash": "0x3c7839bee5fd644580e122a35128acf49b461c0796938efbbb46f5454042a191",
    "logs": [],
    "blockNumber": 4669998,
    "cumulativeGasUsed": "259714",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f1584bf828118577c55a8972c79a09f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataParameter\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"peek\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"peekSpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate_\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setSuccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"success\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/singularity/legacy/mocks/OracleMock.sol\":\"OracleMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IOracle {\\r\\n    /// @notice Get the latest exchange rate.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return success if no valid (recent) rate is available, return false else true.\\r\\n    /// @return rate The rate of the requested asset / pair / pool.\\r\\n    function get(bytes calldata data)\\r\\n        external\\r\\n        returns (bool success, uint256 rate);\\r\\n\\r\\n    /// @notice Check the last exchange rate without any state changes.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return success if no valid (recent) rate is available, return false else true.\\r\\n    /// @return rate The rate of the requested asset / pair / pool.\\r\\n    function peek(bytes calldata data)\\r\\n        external\\r\\n        view\\r\\n        returns (bool success, uint256 rate);\\r\\n\\r\\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return rate The rate of the requested asset / pair / pool.\\r\\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\\r\\n\\r\\n    /// @notice Returns a human readable (short) name about this oracle.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return (string) A human readable symbol name about this oracle.\\r\\n    function symbol(bytes calldata data) external view returns (string memory);\\r\\n\\r\\n    /// @notice Returns a human readable name about this oracle.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return (string) A human readable name about this oracle.\\r\\n    function name(bytes calldata data) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xf2fa35d3a39c5e99a46fc5ffe6ec42922060beb4cba101aaa37f2ff7f621409d\",\"license\":\"MIT\"},\"contracts/singularity/legacy/mocks/OracleMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport '../../../interfaces/IOracle.sol';\\r\\n\\r\\ncontract OracleMockFactory {\\r\\n    address public last;\\r\\n\\r\\n    function deployOracle() external {\\r\\n        OracleMock oracle = new OracleMock();\\r\\n        last = address(oracle);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract OracleMock is IOracle {\\r\\n    uint256 public rate;\\r\\n    bool public success;\\r\\n\\r\\n    constructor() {\\r\\n        success = true;\\r\\n    }\\r\\n\\r\\n    function set(uint256 rate_) public {\\r\\n        // The rate can be updated.\\r\\n        rate = rate_;\\r\\n    }\\r\\n\\r\\n    function setSuccess(bool val) public {\\r\\n        success = val;\\r\\n    }\\r\\n\\r\\n    function getDataParameter() public pure returns (bytes memory) {\\r\\n        return abi.encode('0x0');\\r\\n    }\\r\\n\\r\\n    // Get the latest exchange rate\\r\\n    function get(bytes calldata) public view override returns (bool, uint256) {\\r\\n        return (success, rate);\\r\\n    }\\r\\n\\r\\n    // Check the last exchange rate without any state changes\\r\\n    function peek(bytes calldata) public view override returns (bool, uint256) {\\r\\n        return (success, rate);\\r\\n    }\\r\\n\\r\\n    function peekSpot(bytes calldata) public view override returns (uint256) {\\r\\n        return rate;\\r\\n    }\\r\\n\\r\\n    function name(bytes calldata) public pure override returns (string memory) {\\r\\n        return 'Test';\\r\\n    }\\r\\n\\r\\n    function symbol(bytes calldata)\\r\\n        public\\r\\n        pure\\r\\n        override\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return 'TEST';\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6adb4fa2febfd99ced7423895baf2f0c5056273ec959bad59d7e51b8ae3ae4aa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001805460ff1916811790556103558061002c6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c699c4d611610066578063c699c4d614610127578063d39bbef014610155578063d568866c1461016b578063d6d7d52514610199578063eeb8a8d31461019957600080fd5b80630b93381b146100a35780632b39febd146100c55780632c4e722e146100da57806360fe47b1146100f15780637bcc7f8114610106575b600080fd5b6001546100b09060ff1681565b60405190151581526020015b60405180910390f35b6100cd6101ce565b6040516100bc9190610258565b6100e360005481565b6040519081526020016100bc565b6101046100ff366004610272565b600055565b005b61010461011436600461028b565b6001805460ff1916911515919091179055565b6100cd6101353660046102ad565b5050604080518082019091526004815263151154d560e21b602082015290565b6100e36101633660046102ad565b505060005490565b6100cd6101793660046102ad565b505060408051808201909152600481526315195cdd60e21b602082015290565b6101b76101a73660046102ad565b505060015460005460ff90911691565b6040805192151583526020830191909152016100bc565b60606040516020016101f79060208082526003908201526203078360ec1b604082015260600190565b604051602081830303815290604052905090565b6000815180845260005b8181101561023157602081850181015186830182015201610215565b81811115610243576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061026b602083018461020b565b9392505050565b60006020828403121561028457600080fd5b5035919050565b60006020828403121561029d57600080fd5b8135801515811461026b57600080fd5b600080602083850312156102c057600080fd5b823567ffffffffffffffff808211156102d857600080fd5b818501915085601f8301126102ec57600080fd5b8135818111156102fb57600080fd5b86602082850101111561030d57600080fd5b6020929092019691955090935050505056fea2646970667358221220e64a4f29ec26bb017512df855e4b7a12fd2ac9b9173f7f863ddd7650e5e0c04c64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c699c4d611610066578063c699c4d614610127578063d39bbef014610155578063d568866c1461016b578063d6d7d52514610199578063eeb8a8d31461019957600080fd5b80630b93381b146100a35780632b39febd146100c55780632c4e722e146100da57806360fe47b1146100f15780637bcc7f8114610106575b600080fd5b6001546100b09060ff1681565b60405190151581526020015b60405180910390f35b6100cd6101ce565b6040516100bc9190610258565b6100e360005481565b6040519081526020016100bc565b6101046100ff366004610272565b600055565b005b61010461011436600461028b565b6001805460ff1916911515919091179055565b6100cd6101353660046102ad565b5050604080518082019091526004815263151154d560e21b602082015290565b6100e36101633660046102ad565b505060005490565b6100cd6101793660046102ad565b505060408051808201909152600481526315195cdd60e21b602082015290565b6101b76101a73660046102ad565b505060015460005460ff90911691565b6040805192151583526020830191909152016100bc565b60606040516020016101f79060208082526003908201526203078360ec1b604082015260600190565b604051602081830303815290604052905090565b6000815180845260005b8181101561023157602081850181015186830182015201610215565b81811115610243576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061026b602083018461020b565b9392505050565b60006020828403121561028457600080fd5b5035919050565b60006020828403121561029d57600080fd5b8135801515811461026b57600080fd5b600080602083850312156102c057600080fd5b823567ffffffffffffffff808211156102d857600080fd5b818501915085601f8301126102ec57600080fd5b8135818111156102fb57600080fd5b86602082850101111561030d57600080fd5b6020929092019691955090935050505056fea2646970667358221220e64a4f29ec26bb017512df855e4b7a12fd2ac9b9173f7f863ddd7650e5e0c04c64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8455,
        "contract": "contracts/singularity/legacy/mocks/OracleMock.sol:OracleMock",
        "label": "rate",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 8457,
        "contract": "contracts/singularity/legacy/mocks/OracleMock.sol:OracleMock",
        "label": "success",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}