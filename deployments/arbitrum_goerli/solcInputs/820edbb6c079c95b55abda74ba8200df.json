{
  "language": "Solidity",
  "sources": {
    "@boringcrypto/boring-solidity/contracts/BoringBatchable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\npragma experimental ABIEncoderV2;\r\n\r\n// solhint-disable avoid-low-level-calls\r\n// solhint-disable no-inline-assembly\r\n\r\n// WARNING!!!\r\n// Combining BoringBatchable with msg.value can cause double spending issues\r\n// https://www.paradigm.xyz/2021/08/two-rights-might-make-a-wrong/\r\n\r\nimport \"./interfaces/IERC20.sol\";\r\n\r\ncontract BaseBoringBatchable {\r\n    error BatchError(bytes innerError);\r\n\r\n    /// @dev Helper function to extract a useful revert message from a failed call.\r\n    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\r\n    function _getRevertMsg(bytes memory _returnData) internal pure{\r\n        // If the _res length is less than 68, then\r\n        // the transaction failed with custom error or silently (without a revert message)\r\n        if (_returnData.length < 68) revert BatchError(_returnData);\r\n\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        revert(abi.decode(_returnData, (string))); // All that remains is the revert string\r\n    }\r\n\r\n    /// @notice Allows batched call to self (this contract).\r\n    /// @param calls An array of inputs for each call.\r\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\r\n    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\r\n    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\r\n    // C3: The length of the loop is fully under user control, so can't be exploited\r\n    // C7: Delegatecall is only used on the same contract, so it's safe\r\n    function batch(bytes[] calldata calls, bool revertOnFail) external payable {\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\r\n            if (!success && revertOnFail) {\r\n                _getRevertMsg(result);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ncontract BoringBatchable is BaseBoringBatchable {\r\n    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\r\n    /// Lookup `IERC20.permit`.\r\n    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\r\n    //     if part of a batch this could be used to grief once as the second call would not need the permit\r\n    function permitToken(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) public {\r\n        token.permit(from, to, amount, deadline, v, r, s);\r\n    }\r\n}\r\n"
    },
    "@boringcrypto/boring-solidity/contracts/BoringFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./interfaces/IMasterContract.sol\";\n\n// solhint-disable no-inline-assembly\n\ncontract BoringFactory {\n    event LogDeploy(address indexed masterContract, bytes data, address indexed cloneAddress);\n\n    /// @notice Mapping from clone contracts to their masterContract.\n    mapping(address => address) public masterContractOf;\n\n    /// @notice Mapping from masterContract to an array of all clones\n    /// On mainnet events can be used to get this list, but events aren't always easy to retrieve and\n    /// barely work on sidechains. While this adds gas, it makes enumerating all clones much easier.\n    mapping(address => address[]) public clonesOf;\n\n    /// @notice Returns the count of clones that exists for a specific masterContract\n    /// @param masterContract The address of the master contract.\n    /// @return cloneCount total number of clones for the masterContract.\n    function clonesOfCount(address masterContract) public view returns (uint256 cloneCount) {\n        cloneCount = clonesOf[masterContract].length;\n    }\n\n    /// @notice Deploys a given master Contract as a clone.\n    /// Any ETH transferred with this call is forwarded to the new clone.\n    /// Emits `LogDeploy`.\n    /// @param masterContract The address of the contract to clone.\n    /// @param data Additional abi encoded calldata that is passed to the new clone via `IMasterContract.init`.\n    /// @param useCreate2 Creates the clone by using the CREATE2 opcode, in this case `data` will be used as salt.\n    /// @return cloneAddress Address of the created clone contract.\n    function deploy(\n        address masterContract,\n        bytes calldata data,\n        bool useCreate2\n    ) public payable returns (address cloneAddress) {\n        require(masterContract != address(0), \"BoringFactory: No masterContract\");\n        bytes20 targetBytes = bytes20(masterContract); // Takes the first 20 bytes of the masterContract's address\n\n        if (useCreate2) {\n            // each masterContract has different code already. So clones are distinguished by their data only.\n            bytes32 salt = keccak256(data);\n\n            // Creates clone, more info here: https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract/\n            assembly {\n                let clone := mload(0x40)\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n                mstore(add(clone, 0x14), targetBytes)\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n                cloneAddress := create2(0, clone, 0x37, salt)\n            }\n        } else {\n            assembly {\n                let clone := mload(0x40)\n                mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n                mstore(add(clone, 0x14), targetBytes)\n                mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n                cloneAddress := create(0, clone, 0x37)\n            }\n        }\n        masterContractOf[cloneAddress] = masterContract;\n        clonesOf[masterContract].push(cloneAddress);\n\n        IMasterContract(cloneAddress).init{value: msg.value}(data);\n\n        emit LogDeploy(masterContract, data, cloneAddress);\n    }\n}\n"
    },
    "@boringcrypto/boring-solidity/contracts/BoringOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\n// Simplified by BoringCrypto\n\ncontract BoringOwnableData {\n    address public owner;\n    address public pendingOwner;\n}\n\ncontract BoringOwnable is BoringOwnableData {\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice `owner` defaults to msg.sender on construction.\n    constructor() {\n        owner = msg.sender;\n        emit OwnershipTransferred(address(0), msg.sender);\n    }\n\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\n    /// Can only be invoked by the current `owner`.\n    /// @param newOwner Address of the new owner.\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\n    function transferOwnership(\n        address newOwner,\n        bool direct,\n        bool renounce\n    ) public onlyOwner {\n        if (direct) {\n            // Checks\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\n\n            // Effects\n            emit OwnershipTransferred(owner, newOwner);\n            owner = newOwner;\n            pendingOwner = address(0);\n        } else {\n            // Effects\n            pendingOwner = newOwner;\n        }\n    }\n\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\n    function claimOwnership() public {\n        address _pendingOwner = pendingOwner;\n\n        // Checks\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\n\n        // Effects\n        emit OwnershipTransferred(owner, _pendingOwner);\n        owner = _pendingOwner;\n        pendingOwner = address(0);\n    }\n\n    /// @notice Only allows the `owner` to execute the function.\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\n        _;\n    }\n}\n"
    },
    "@boringcrypto/boring-solidity/contracts/Domain.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Based on code and smartness by Ross Campbell and Keno\n// Uses immutable to store the domain separator to reduce gas usage\n// If the chain id changes due to a fork, the forked chain will calculate on the fly.\npragma solidity ^0.8.0;\n\n// solhint-disable no-inline-assembly\n\ncontract Domain {\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\"EIP712Domain(uint256 chainId,address verifyingContract)\");\n    // See https://eips.ethereum.org/EIPS/eip-191\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \"\\x19\\x01\";\n\n    // solhint-disable var-name-mixedcase\n    bytes32 private immutable _DOMAIN_SEPARATOR;\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\n\n    /// @dev Calculate the DOMAIN_SEPARATOR\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, chainId, address(this)));\n    }\n\n    constructor() {\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = block.chainid);\n    }\n\n    /// @dev Return the DOMAIN_SEPARATOR\n    // It's named internal to allow making it public from the contract that uses it by creating a simple view function\n    // with the desired public name, such as DOMAIN_SEPARATOR or domainSeparator.\n    // solhint-disable-next-line func-name-mixedcase\n    function _domainSeparator() internal view returns (bytes32) {\n        return block.chainid == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(block.chainid);\n    }\n\n    function _getDigest(bytes32 dataHash) internal view returns (bytes32 digest) {\n        digest = keccak256(abi.encodePacked(EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA, _domainSeparator(), dataHash));\n    }\n}\n"
    },
    "@boringcrypto/boring-solidity/contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./interfaces/IERC20.sol\";\nimport \"./Domain.sol\";\n\n// solhint-disable no-inline-assembly\n// solhint-disable not-rely-on-time\n\n// Data part taken out for building of contracts that receive delegate calls\ncontract ERC20Data {\n    /// @notice owner > balance mapping.\n    mapping(address => uint256) public balanceOf;\n    /// @notice owner > spender > allowance mapping.\n    mapping(address => mapping(address => uint256)) public allowance;\n    /// @notice owner > nonce mapping. Used in `permit`.\n    mapping(address => uint256) public nonces;\n}\n\nabstract contract ERC20 is IERC20, Domain {\n    /// @notice owner > balance mapping.\n    mapping(address => uint256) public override balanceOf;\n    /// @notice owner > spender > allowance mapping.\n    mapping(address => mapping(address => uint256)) public override allowance;\n    /// @notice owner > nonce mapping. Used in `permit`.\n    mapping(address => uint256) public nonces;\n\n    /// @notice Transfers `amount` tokens from `msg.sender` to `to`.\n    /// @param to The address to move the tokens.\n    /// @param amount of the tokens to move.\n    /// @return (bool) Returns True if succeeded.\n    function transfer(address to, uint256 amount) public returns (bool) {\n        // If `amount` is 0, or `msg.sender` is `to` nothing happens\n        if (amount != 0 || msg.sender == to) {\n            uint256 srcBalance = balanceOf[msg.sender];\n            require(srcBalance >= amount, \"ERC20: balance too low\");\n            if (msg.sender != to) {\n                require(to != address(0), \"ERC20: no zero address\"); // Moved down so low balance calls safe some gas\n\n                balanceOf[msg.sender] = srcBalance - amount; // Underflow is checked\n                balanceOf[to] += amount;\n            }\n        }\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    /// @notice Transfers `amount` tokens from `from` to `to`. Caller needs approval for `from`.\n    /// @param from Address to draw tokens from.\n    /// @param to The address to move the tokens.\n    /// @param amount The token amount to move.\n    /// @return (bool) Returns True if succeeded.\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public returns (bool) {\n        // If `amount` is 0, or `from` is `to` nothing happens\n        if (amount != 0) {\n            uint256 srcBalance = balanceOf[from];\n            require(srcBalance >= amount, \"ERC20: balance too low\");\n\n            if (from != to) {\n                uint256 spenderAllowance = allowance[from][msg.sender];\n                // If allowance is infinite, don't decrease it to save on gas (breaks with EIP-20).\n                if (spenderAllowance != type(uint256).max) {\n                    require(spenderAllowance >= amount, \"ERC20: allowance too low\");\n                    allowance[from][msg.sender] = spenderAllowance - amount; // Underflow is checked\n                }\n                require(to != address(0), \"ERC20: no zero address\"); // Moved down so other failed calls safe some gas\n\n                balanceOf[from] = srcBalance - amount; // Underflow is checked\n                balanceOf[to] += amount;\n            }\n        }\n        emit Transfer(from, to, amount);\n        return true;\n    }\n\n    /// @notice Approves `amount` from sender to be spend by `spender`.\n    /// @param spender Address of the party that can draw from msg.sender's account.\n    /// @param amount The maximum collective amount that `spender` can draw.\n    /// @return (bool) Returns True if approved.\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32) {\n        return _domainSeparator();\n    }\n\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 private constant PERMIT_SIGNATURE_HASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n\n    /// @notice Approves `value` from `owner_` to be spend by `spender`.\n    /// @param owner_ Address of the owner.\n    /// @param spender The address of the spender that gets approved to draw from `owner_`.\n    /// @param value The maximum collective amount that `spender` can draw.\n    /// @param deadline This permit must be redeemed before this deadline (UTC timestamp in seconds).\n    function permit(\n        address owner_,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override {\n        require(owner_ != address(0), \"ERC20: Owner cannot be 0\");\n        require(block.timestamp < deadline, \"ERC20: Expired\");\n        require(\n            ecrecover(_getDigest(keccak256(abi.encode(PERMIT_SIGNATURE_HASH, owner_, spender, value, nonces[owner_]++, deadline))), v, r, s) ==\n                owner_,\n            \"ERC20: Invalid Signature\"\n        );\n        allowance[owner_][spender] = value;\n        emit Approval(owner_, spender, value);\n    }\n}\n\ncontract ERC20WithSupply is IERC20, ERC20 {\n    uint256 public override totalSupply;\n\n    function _mint(address user, uint256 amount) internal {\n        uint256 newTotalSupply = totalSupply + amount;\n        require(newTotalSupply >= totalSupply, \"Mint overflow\");\n        totalSupply = newTotalSupply;\n        balanceOf[user] += amount;\n        emit Transfer(address(0), user, amount);\n    }\n\n    function _burn(address user, uint256 amount) internal {\n        require(balanceOf[user] >= amount, \"Burn too much\");\n        totalSupply -= amount;\n        balanceOf[user] -= amount;\n        emit Transfer(user, address(0), amount);\n    }\n}\n"
    },
    "@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"./IERC165.sol\";\n\ninterface IERC1155 is IERC165 {\n    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\n    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n    event URI(string _value, uint256 indexed _id);\n\n    function safeTransferFrom(\n        address _from,\n        address _to,\n        uint256 _id,\n        uint256 _value,\n        bytes calldata _data\n    ) external;\n\n    function safeBatchTransferFrom(\n        address _from,\n        address _to,\n        uint256[] calldata _ids,\n        uint256[] calldata _values,\n        bytes calldata _data\n    ) external;\n\n    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\n\n    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\n\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n"
    },
    "@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IERC1155TokenReceiver {\n    function onERC1155Received(\n        address _operator,\n        address _from,\n        uint256 _id,\n        uint256 _value,\n        bytes calldata _data\n    ) external returns (bytes4);\n\n    function onERC1155BatchReceived(\n        address _operator,\n        address _from,\n        uint256[] calldata _ids,\n        uint256[] calldata _values,\n        bytes calldata _data\n    ) external returns (bytes4);\n}\n"
    },
    "@boringcrypto/boring-solidity/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC165 {\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n"
    },
    "@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\n    // By removing them you can't accidentally use them.\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\ninterface IStrictERC20 {\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title ERC-721 Non-Fungible Token Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n///  Note: the ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 /* is ERC165 */ {\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\n    ///  may be created and assigned without emitting Transfer. At the time of\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\n\n    /// @dev This emits when the approved address for an NFT is changed or\n    ///  reaffirmed. The zero address indicates there is no approved address.\n    ///  When a Transfer event emits, this also indicates that the approved\n    ///  address for that NFT (if any) is reset to none.\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    ///  The operator can manage all NFTs of the owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @notice Count all NFTs assigned to an owner\n    /// @dev NFTs assigned to the zero address are considered invalid, and this\n    ///  function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of NFTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /// @notice Find the owner of an NFT\n    /// @dev NFTs assigned to zero address are considered invalid, and queries\n    ///  about them do throw.\n    /// @param _tokenId The identifier for an NFT\n    /// @return The address of the owner of the NFT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n    ///  `onERC721Received` on `_to` and throws if the return value is not\n    ///  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;\n\n    /// @notice Transfers the ownership of an NFT from one address to another address\n    /// @dev This works identically to the other function with an extra data parameter,\n    ///  except this function just sets data to \"\".\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n    ///  THEY MAY BE PERMANENTLY LOST\n    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n    ///  operator, or the approved address for this NFT. Throws if `_from` is\n    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n    ///  `_tokenId` is not a valid NFT.\n    /// @param _from The current owner of the NFT\n    /// @param _to The new owner\n    /// @param _tokenId The NFT to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId) external payable;\n\n    /// @notice Change or reaffirm the approved address for an NFT\n    /// @dev The zero address indicates there is no approved address.\n    ///  Throws unless `msg.sender` is the current NFT owner, or an authorized\n    ///  operator of the current owner.\n    /// @param _approved The new approved NFT controller\n    /// @param _tokenId The NFT to approve\n    function approve(address _approved, uint256 _tokenId) external payable;\n\n    /// @notice Enable or disable approval for a third party (\"operator\") to manage\n    ///  all of `msg.sender`'s assets\n    /// @dev Emits the ApprovalForAll event. The contract MUST allow\n    ///  multiple operators per owner.\n    /// @param _operator Address to add to the set of authorized operators\n    /// @param _approved True if the operator is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) external;\n\n    /// @notice Get the approved address for a single NFT\n    /// @dev Throws if `_tokenId` is not a valid NFT.\n    /// @param _tokenId The NFT to find the approved address for\n    /// @return The approved address for this NFT, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view returns (address);\n\n    /// @notice Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the NFTs\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n///  Note: the ERC-165 identifier for this interface is 0x5b5e139f.\ninterface IERC721Metadata /* is ERC721 */ {\n    /// @notice A descriptive name for a collection of NFTs in this contract\n    function name() external view returns (string memory _name);\n\n    /// @notice An abbreviated name for NFTs in this contract\n    function symbol() external view returns (string memory _symbol);\n\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\n    ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\n    ///  Metadata JSON Schema\".\n    function tokenURI(uint256 _tokenId) external view returns (string memory);\n}\n\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n///  Note: the ERC-165 identifier for this interface is 0x780e9d63.\ninterface IERC721Enumerable /* is ERC721 */ {\n    /// @notice Count NFTs tracked by this contract\n    /// @return A count of valid NFTs tracked by this contract, where each one of\n    ///  them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256);\n\n    /// @notice Enumerate valid NFTs\n    /// @dev Throws if `_index` >= `totalSupply()`.\n    /// @param _index A counter less than `totalSupply()`\n    /// @return The token identifier for the `_index`th NFT,\n    ///  (sort order not specified)\n    function tokenByIndex(uint256 _index) external view returns (uint256);\n\n    /// @notice Enumerate NFTs assigned to an owner\n    /// @dev Throws if `_index` >= `balanceOf(_owner)` or if\n    ///  `_owner` is the zero address, representing invalid NFTs.\n    /// @param _owner An address where we are interested in NFTs owned by them\n    /// @param _index A counter less than `balanceOf(_owner)`\n    /// @return The token identifier for the `_index`th NFT assigned to `_owner`,\n    ///   (sort order not specified)\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\n}\n"
    },
    "@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC721TokenReceiver {\n    function onERC721Received(\n        address _operator,\n        address _from,\n        uint256 _tokenId,\n        bytes calldata _data\n    ) external returns (bytes4);\n}\n"
    },
    "@boringcrypto/boring-solidity/contracts/interfaces/IMasterContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IMasterContract {\n    /// @notice Init function that gets called from `BoringFactory.deploy`.\n    /// Also kown as the constructor for cloned contracts.\n    /// Any ETH send to `BoringFactory.deploy` ends up here.\n    /// @param data Can be abi encoded arguments or anything else.\n    function init(bytes calldata data) external payable;\n}\n"
    },
    "@boringcrypto/boring-solidity/contracts/libraries/Base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable no-inline-assembly\n// solhint-disable no-empty-blocks\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides functions for encoding/decoding base64\nlibrary Base64 {\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return \"\";\n\n        // load the table into memory\n        string memory table = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n\n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n\n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n\n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n\n            // run over the input, 3 bytes at a time\n            for {\n\n            } lt(dataPtr, endPtr) {\n\n            } {\n                // read 3 bytes\n                dataPtr := add(dataPtr, 3)\n                let input := mload(dataPtr)\n\n                // write 4 characters\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\n                resultPtr := add(resultPtr, 1)\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\n                resultPtr := add(resultPtr, 1)\n            }\n\n            // padding with '='\n            switch mod(mload(data), 3)\n                case 1 {\n                    mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\n                }\n                case 2 {\n                    mstore(sub(resultPtr, 1), shl(248, 0x3d))\n                }\n        }\n\n        return result;\n    }\n}\n"
    },
    "@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable no-inline-assembly\n\nlibrary BoringAddress {\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    function sendNative(address to, uint256 amount) internal {\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = to.call{value: amount}(\"\");\n        require(success, \"BoringAddress: transfer failed\");\n    }\n}\n"
    },
    "@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../interfaces/IERC20.sol\";\n\n// solhint-disable avoid-low-level-calls\n\nlibrary BoringERC20 {\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\n    bytes4 private constant SIG_TOTALSUPPLY = 0x18160ddd; // balanceOf(address)\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\n\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\n        if (data.length >= 64) {\n            return abi.decode(data, (string));\n        } else if (data.length == 32) {\n            uint8 i = 0;\n            while (i < 32 && data[i] != 0) {\n                i++;\n            }\n            bytes memory bytesArray = new bytes(i);\n            for (i = 0; i < 32 && data[i] != 0; i++) {\n                bytesArray[i] = data[i];\n            }\n            return string(bytesArray);\n        } else {\n            return \"???\";\n        }\n    }\n\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token symbol.\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token name.\n    function safeName(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (uint8) Token decimals.\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\n    }\n\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\n    /// @param token The address of the ERC-20 token.\n    /// @param to The address of the user to check.\n    /// @return amount The token amount.\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\n        require(success && data.length >= 32, \"BoringERC20: BalanceOf failed\");\n        amount = abi.decode(data, (uint256));\n    }\n\n    /// @notice Provides a gas-optimized totalSupply to avoid a redundant extcodesize check in addition to the returndatasize check.\n    /// @param token The address of the ERC-20 token.\n    /// @return totalSupply The token totalSupply.\n    function safeTotalSupply(IERC20 token) internal view returns (uint256 totalSupply) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_TOTALSUPPLY));\n        require(success && data.length >= 32, \"BoringERC20: totalSupply failed\");\n        totalSupply = abi.decode(data, (uint256));\n    }\n\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\n    }\n\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param from Transfer tokens from.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\n    }\n}\n"
    },
    "@boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nstruct Rebase {\n    uint128 elastic;\n    uint128 base;\n}\n\n/// @notice A rebasing library using overflow-/underflow-safe math.\nlibrary RebaseLibrary {\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\n    function toBase(\n        Rebase memory total,\n        uint256 elastic,\n        bool roundUp\n    ) internal pure returns (uint256 base) {\n        if (total.elastic == 0) {\n            base = elastic;\n        } else {\n            base = (elastic * total.base) / total.elastic;\n            if (roundUp && (base * total.elastic) / total.base < elastic) {\n                base++;\n            }\n        }\n    }\n\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\n    function toElastic(\n        Rebase memory total,\n        uint256 base,\n        bool roundUp\n    ) internal pure returns (uint256 elastic) {\n        if (total.base == 0) {\n            elastic = base;\n        } else {\n            elastic = (base * total.elastic) / total.base;\n            if (roundUp && (elastic * total.base) / total.elastic < base) {\n                elastic++;\n            }\n        }\n    }\n\n    /// @notice Add `elastic` to `total` and doubles `total.base`.\n    /// @return (Rebase) The new total.\n    /// @return base in relationship to `elastic`.\n    function add(\n        Rebase memory total,\n        uint256 elastic,\n        bool roundUp\n    ) internal pure returns (Rebase memory, uint256 base) {\n        base = toBase(total, elastic, roundUp);\n        total.elastic += uint128(elastic);\n        total.base += uint128(base);\n        return (total, base);\n    }\n\n    /// @notice Sub `base` from `total` and update `total.elastic`.\n    /// @return (Rebase) The new total.\n    /// @return elastic in relationship to `base`.\n    function sub(\n        Rebase memory total,\n        uint256 base,\n        bool roundUp\n    ) internal pure returns (Rebase memory, uint256 elastic) {\n        elastic = toElastic(total, base, roundUp);\n        total.elastic -= uint128(elastic);\n        total.base -= uint128(base);\n        return (total, elastic);\n    }\n\n    /// @notice Add `elastic` and `base` to `total`.\n    function add(\n        Rebase memory total,\n        uint256 elastic,\n        uint256 base\n    ) internal pure returns (Rebase memory) {\n        total.elastic += uint128(elastic);\n        total.base += uint128(base);\n        return total;\n    }\n\n    /// @notice Subtract `elastic` and `base` to `total`.\n    function sub(\n        Rebase memory total,\n        uint256 elastic,\n        uint256 base\n    ) internal pure returns (Rebase memory) {\n        total.elastic -= uint128(elastic);\n        total.base -= uint128(base);\n        return total;\n    }\n\n    /// @notice Add `elastic` to `total` and update storage.\n    /// @return newElastic Returns updated `elastic`.\n    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n        newElastic = total.elastic += uint128(elastic);\n    }\n\n    /// @notice Subtract `elastic` from `total` and update storage.\n    /// @return newElastic Returns updated `elastic`.\n    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n        newElastic = total.elastic -= uint128(elastic);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title QuoterV2 Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoterV2 {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    struct QuoteExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amountIn;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountIn The desired input amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\n        external\n        returns (\n            uint256 amountOut,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        );\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (\n            uint256 amountIn,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    struct QuoteExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amount;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountOut The desired output amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\n        external\n        returns (\n            uint256 amountIn,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        );\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.6.0;\n\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\n\nlibrary TransferHelper {\n    /// @notice Transfers tokens from the targeted address to the given destination\n    /// @notice Errors with 'STF' if transfer fails\n    /// @param token The contract address of the token to be transferred\n    /// @param from The originating address from which the tokens will be transferred\n    /// @param to The destination address of the transfer\n    /// @param value The amount to be transferred\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) =\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\n    }\n\n    /// @notice Transfers tokens from msg.sender to a recipient\n    /// @dev Errors with ST if transfer fails\n    /// @param token The contract address of the token which will be transferred\n    /// @param to The recipient of the transfer\n    /// @param value The value of the transfer\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\n    }\n\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\n    /// @dev Errors with 'SA' if transfer fails\n    /// @param token The contract address of the token to be approved\n    /// @param to The target of the approval\n    /// @param value The amount of the given token the target will be allowed to spend\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\n    }\n\n    /// @notice Transfers ETH to the recipient address\n    /// @dev Fails with `STE`\n    /// @param to The destination of the transfer\n    /// @param value The value to be transferred\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'STE');\n    }\n}\n"
    },
    "contracts/interfaces/IFee.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport './IPenrose.sol';\r\nimport '../swappers/ISwapper.sol';\r\n\r\ninterface IFee {\r\n    function depositFeesToYieldBox(ISwapper, IPenrose.SwapData calldata)\r\n        external;\r\n}\r\n"
    },
    "contracts/interfaces/IMarket.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport './IOracle.sol';\r\n\r\ninterface IMarket {\r\n    function asset() external view returns (address);\r\n\r\n    function assetId() external view returns (uint256);\r\n\r\n    function collateral() external view returns (address);\r\n\r\n    function collateralId() external view returns (uint256);\r\n\r\n    function totalBorrowCap() external view returns (uint256);\r\n\r\n    function totalCollateralShare() external view returns (uint256);\r\n\r\n    function userBorrowPart(address) external view returns (uint256);\r\n\r\n    function userCollateralShare(address) external view returns (uint256);\r\n\r\n    function totalBorrow()\r\n        external\r\n        view\r\n        returns (uint128 elastic, uint128 base);\r\n\r\n    function oracle() external view returns (IOracle);\r\n\r\n    function oracleData() external view returns (bytes memory);\r\n\r\n    function exchangeRate() external view returns (uint256);\r\n\r\n    function yieldBox() external view returns (address payable);\r\n\r\n    function liquidationMultiplier() external view returns (uint256);\r\n\r\n    function addCollateral(\r\n        address from,\r\n        address to,\r\n        bool skim,\r\n        uint256 share\r\n    ) external;\r\n\r\n    function removeCollateral(\r\n        address from,\r\n        address to,\r\n        uint256 share\r\n    ) external;\r\n\r\n    function repay(\r\n        address from,\r\n        address to,\r\n        bool skim,\r\n        uint256 part\r\n    ) external returns (uint256 amount);\r\n\r\n    function withdrawTo(\r\n        address from,\r\n        uint16 dstChainId,\r\n        bytes32 receiver,\r\n        uint256 amount,\r\n        bytes calldata adapterParams,\r\n        address payable refundAddress\r\n    ) external payable;\r\n\r\n    function borrow(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (uint256 part, uint256 share);\r\n\r\n    function execute(bytes[] calldata calls, bool revertOnFail)\r\n        external\r\n        returns (bool[] memory successes, string[] memory results);\r\n}\r\n"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IOracle {\r\n    /// @notice Get the latest exchange rate.\r\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\r\n    /// For example:\r\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\r\n    /// @return success if no valid (recent) rate is available, return false else true.\r\n    /// @return rate The rate of the requested asset / pair / pool.\r\n    function get(bytes calldata data)\r\n        external\r\n        returns (bool success, uint256 rate);\r\n\r\n    /// @notice Check the last exchange rate without any state changes.\r\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\r\n    /// For example:\r\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\r\n    /// @return success if no valid (recent) rate is available, return false else true.\r\n    /// @return rate The rate of the requested asset / pair / pool.\r\n    function peek(bytes calldata data)\r\n        external\r\n        view\r\n        returns (bool success, uint256 rate);\r\n\r\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\r\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\r\n    /// For example:\r\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\r\n    /// @return rate The rate of the requested asset / pair / pool.\r\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\r\n\r\n    /// @notice Returns a human readable (short) name about this oracle.\r\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\r\n    /// For example:\r\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\r\n    /// @return (string) A human readable symbol name about this oracle.\r\n    function symbol(bytes calldata data) external view returns (string memory);\r\n\r\n    /// @notice Returns a human readable name about this oracle.\r\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\r\n    /// For example:\r\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\r\n    /// @return (string) A human readable name about this oracle.\r\n    function name(bytes calldata data) external view returns (string memory);\r\n}\r\n"
    },
    "contracts/interfaces/IPenrose.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport '../usd0/IUSD0.sol';\r\nimport '../swappers/ISwapper.sol';\r\n\r\ninterface IPenrose {\r\n    /// @notice swap extra data\r\n    struct SwapData {\r\n        uint256 minAssetAmount;\r\n    }\r\n\r\n    /// @notice Used to define the MasterContract's type\r\n    enum ContractType {\r\n        lowRisk,\r\n        mediumRisk,\r\n        highRisk\r\n    }\r\n\r\n    /// @notice MasterContract address and type\r\n    struct MasterContract {\r\n        address location;\r\n        ContractType risk;\r\n    }\r\n\r\n    function bigBangEthMarket() external view returns (address);\r\n\r\n    function bigBangEthDebtRate() external view returns (uint256);\r\n\r\n    function swappers(ISwapper swapper) external view returns (bool);\r\n\r\n    function yieldBox() external view returns (address payable);\r\n\r\n    function tapToken() external view returns (address);\r\n\r\n    function tapAssetId() external view returns (uint256);\r\n\r\n    function usdoToken() external view returns (address);\r\n\r\n    function usdoAssetId() external view returns (uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function wethToken() external view returns (address);\r\n\r\n    function wethAssetId() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/ISendFrom.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.5.0;\r\n\r\n/**\r\n * @dev Interface of the IOFT core standard\r\n */\r\ninterface ISendFrom {\r\n    struct LzCallParams {\r\n        address payable refundAddress;\r\n        address zroPaymentAddress;\r\n        bytes adapterParams;\r\n    }\r\n\r\n    /**\r\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\r\n     * `_from` the owner of token\r\n     * `_dstChainId` the destination chain identifier\r\n     * `_toAddress` can be any size depending on the `dstChainId`.\r\n     * `_amount` the quantity of tokens in wei\r\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\r\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\r\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\r\n     */\r\n    function sendFrom(\r\n        address _from,\r\n        uint16 _dstChainId,\r\n        bytes32 _toAddress,\r\n        uint256 _amount,\r\n        LzCallParams calldata _callParams\r\n    ) external payable;\r\n}\r\n"
    },
    "contracts/libraries/ICurvePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable func-name-mixedcase\n// solhint-disable var-name-mixedcase\n\ninterface ICurvePool {\n    function coins(uint256 i) external view returns (address);\n\n    function get_dy(\n        int128 i,\n        int128 j,\n        uint256 dx\n    ) external view returns (uint256);\n\n    function exchange(\n        int128 i,\n        int128 j,\n        uint256 dx,\n        uint256 min_dy\n    ) external;\n}\n"
    },
    "contracts/libraries/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/libraries/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.6.6;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, 'ds-math-add-overflow');\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n    }\n}\n"
    },
    "contracts/libraries/UniswapV2Library.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity >=0.5.0;\r\n\r\nimport './IUniswapV2Pair.sol';\r\nimport './SafeMath.sol';\r\n\r\n// solhint-disable max-line-length\r\n\r\nlibrary UniswapV2Library {\r\n    using SafeMath for uint256;\r\n\r\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\r\n    function sortTokens(address tokenA, address tokenB)\r\n        internal\r\n        pure\r\n        returns (address token0, address token1)\r\n    {\r\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\r\n        (token0, token1) = tokenA < tokenB\r\n            ? (tokenA, tokenB)\r\n            : (tokenB, tokenA);\r\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\r\n    }\r\n\r\n    // calculates the CREATE2 address for a pair without making any external calls\r\n    function pairFor(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB,\r\n        bytes32 pairCodeHash\r\n    ) internal pure returns (address pair) {\r\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\r\n        pair = address(\r\n            uint160(\r\n                uint256(\r\n                    keccak256(\r\n                        abi.encodePacked(\r\n                            hex'ff',\r\n                            factory,\r\n                            keccak256(abi.encodePacked(token0, token1)),\r\n                            pairCodeHash // init code hash\r\n                        )\r\n                    )\r\n                )\r\n            )\r\n        );\r\n    }\r\n\r\n    // fetches and sorts the reserves for a pair\r\n    function getReserves(\r\n        address factory,\r\n        address tokenA,\r\n        address tokenB,\r\n        bytes32 pairCodeHash\r\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\r\n        (address token0, ) = sortTokens(tokenA, tokenB);\r\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(\r\n            pairFor(factory, tokenA, tokenB, pairCodeHash)\r\n        ).getReserves();\r\n        (reserveA, reserveB) = tokenA == token0\r\n            ? (reserve0, reserve1)\r\n            : (reserve1, reserve0);\r\n    }\r\n\r\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) internal pure returns (uint256 amountB) {\r\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\r\n        require(\r\n            reserveA > 0 && reserveB > 0,\r\n            'UniswapV2Library: INSUFFICIENT_LIQUIDITY'\r\n        );\r\n        amountB = amountA.mul(reserveB) / reserveA;\r\n    }\r\n\r\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountOut) {\r\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            'UniswapV2Library: INSUFFICIENT_LIQUIDITY'\r\n        );\r\n        uint256 amountInWithFee = amountIn.mul(997);\r\n        uint256 numerator = amountInWithFee.mul(reserveOut);\r\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\r\n        amountOut = numerator / denominator;\r\n    }\r\n\r\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) internal pure returns (uint256 amountIn) {\r\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\r\n        require(\r\n            reserveIn > 0 && reserveOut > 0,\r\n            'UniswapV2Library: INSUFFICIENT_LIQUIDITY'\r\n        );\r\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\r\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\r\n        amountIn = (numerator / denominator).add(1);\r\n    }\r\n\r\n    // performs chained getAmountOut calculations on any number of pairs\r\n    function getAmountsOut(\r\n        address factory,\r\n        uint256 amountIn,\r\n        address[] memory path,\r\n        bytes32 pairCodeHash\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint256[](path.length);\r\n        amounts[0] = amountIn;\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\r\n                factory,\r\n                path[i],\r\n                path[i + 1],\r\n                pairCodeHash\r\n            );\r\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n\r\n    // performs chained getAmountIn calculations on any number of pairs\r\n    function getAmountsIn(\r\n        address factory,\r\n        uint256 amountOut,\r\n        address[] memory path,\r\n        bytes32 pairCodeHash\r\n    ) internal view returns (uint256[] memory amounts) {\r\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\r\n        amounts = new uint256[](path.length);\r\n        amounts[amounts.length - 1] = amountOut;\r\n        for (uint256 i = path.length - 1; i > 0; i--) {\r\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\r\n                factory,\r\n                path[i - 1],\r\n                path[i],\r\n                pairCodeHash\r\n            );\r\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/liquidationQueue/bidders/CurveStableToUsdoBidder.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport '@boringcrypto/boring-solidity/contracts/BoringOwnable.sol';\r\n\r\nimport '../../interfaces/IPenrose.sol';\r\nimport '../ILiquidationQueue.sol';\r\nimport '../../libraries/ICurvePool.sol';\r\nimport '../../swappers/CurveSwapper.sol';\r\nimport '../../singularity/interfaces/ISingularity.sol';\r\nimport '../../../yieldbox/contracts/interfaces/IYieldBox.sol';\r\n\r\n/*\r\n\r\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\____        \r\n _\\///////\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\/////////\\\\\\_\\/////\\\\\\///______/\\\\\\///\\\\\\________/\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__       \r\n  _______\\/\\\\\\________/\\\\\\/////////\\\\\\_\\/\\\\\\_______\\/\\\\\\_____\\/\\\\\\_______/\\\\\\/__\\///\\\\\\____/\\\\\\/____________/\\\\\\/////////\\\\\\_      \r\n   _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\/\\\\\\______/\\\\\\______\\//\\\\\\__/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_     \r\n    _______\\/\\\\\\_______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\/////////________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \r\n     _______\\/\\\\\\_______\\/\\\\\\/////////\\\\\\_\\/\\\\\\_________________\\/\\\\\\_____\\//\\\\\\______/\\\\\\__\\//\\\\\\____________\\/\\\\\\/////////\\\\\\_   \r\n      _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_________________\\/\\\\\\______\\///\\\\\\__/\\\\\\_____\\///\\\\\\__________\\/\\\\\\_______\\/\\\\\\_  \r\n       _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\____\\///\\\\\\\\\\/________\\////\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_ \r\n        _______\\///________\\///________\\///__\\///______________\\///////////_______\\/////_____________\\/////////__\\///________\\///__\r\n\r\n*/\r\n\r\n/// @title Swaps Stable to USD0 through Curve\r\n/// @dev Performs a swap operation between stable and USD0 through 3CRV+USD0 pool\r\ncontract CurveStableToUsdoBidder is BoringOwnable {\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n\r\n    /// @notice 3Crv+USD0 swapper\r\n    ISwapper public curveSwapper;\r\n    /// @notice Curve pool assets number\r\n    uint256 curveAssetsLength;\r\n\r\n    // ************** //\r\n    // *** EVENTS *** //\r\n    // ************** //\r\n    event CurveSwapperUpdated(address indexed _old, address indexed _new);\r\n\r\n    /// @notice creates a new CurveStableToUsdoBidder\r\n    /// @param curveSwapper_ CurveSwapper address\r\n    /// @param curvePoolAssetCount_ Curve pool assets number\r\n    constructor(ISwapper curveSwapper_, uint256 curvePoolAssetCount_) {\r\n        curveSwapper = curveSwapper_;\r\n        curveAssetsLength = curvePoolAssetCount_;\r\n    }\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n    /// @notice returns the unique name\r\n    function name() external pure returns (string memory) {\r\n        return 'stable -> USD0 (3Crv+USD0)';\r\n    }\r\n\r\n    /// @notice returns the amount of collateral\r\n    /// @param amountIn Stablecoin amount\r\n    function getOutputAmount(\r\n        ISingularity singularity,\r\n        uint256 tokenInId,\r\n        uint256 amountIn,\r\n        bytes calldata\r\n    ) external view returns (uint256) {\r\n        require(\r\n            IPenrose(singularity.penrose()).usdoToken() != address(0),\r\n            'USD0 not set'\r\n        );\r\n\r\n        uint256 usdoAssetId = IPenrose(singularity.penrose()).usdoAssetId();\r\n        if (tokenInId == usdoAssetId) {\r\n            return amountIn;\r\n        }\r\n\r\n        return\r\n            _getOutput(\r\n                IYieldBox(singularity.yieldBox()),\r\n                tokenInId,\r\n                usdoAssetId,\r\n                amountIn\r\n            );\r\n    }\r\n\r\n    /// @notice returns token tokenIn amount based on tokenOut amount\r\n    /// @param tokenInId Token in asset id\r\n    /// @param amountOut Token out amount\r\n    function getInputAmount(\r\n        ISingularity singularity,\r\n        uint256 tokenInId,\r\n        uint256 amountOut,\r\n        bytes calldata\r\n    ) external view returns (uint256) {\r\n        require(\r\n            IPenrose(singularity.penrose()).usdoToken() != address(0),\r\n            'USD0 not set'\r\n        );\r\n\r\n        uint256 usdoAssetId = IPenrose(singularity.penrose()).usdoAssetId();\r\n        if (tokenInId == usdoAssetId) {\r\n            return amountOut;\r\n        }\r\n\r\n        return\r\n            _getOutput(\r\n                IYieldBox(singularity.yieldBox()),\r\n                usdoAssetId,\r\n                tokenInId,\r\n                amountOut\r\n            );\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n\r\n    /// @notice swaps stable to collateral\r\n    /// @param tokenInId Stablecoin asset id\r\n    /// @param amountIn Stablecoin amount\r\n    /// @param data extra data used for the swap operation\r\n    function swap(\r\n        ISingularity singularity,\r\n        uint256 tokenInId,\r\n        uint256 amountIn,\r\n        bytes calldata data\r\n    ) external returns (uint256) {\r\n        require(\r\n            IPenrose(singularity.penrose()).usdoToken() != address(0),\r\n            'USD0 not set'\r\n        );\r\n        IYieldBox yieldBox = IYieldBox(singularity.yieldBox());\r\n        ILiquidationQueue liquidationQueue = ILiquidationQueue(\r\n            singularity.liquidationQueue()\r\n        );\r\n\r\n        uint256 usdoAssetId = IPenrose(singularity.penrose()).usdoAssetId();\r\n        require(msg.sender == address(liquidationQueue), 'only LQ');\r\n        if (tokenInId == usdoAssetId) {\r\n            yieldBox.transfer(\r\n                address(this),\r\n                address(liquidationQueue),\r\n                tokenInId,\r\n                yieldBox.toShare(tokenInId, amountIn, false)\r\n            );\r\n            return amountIn;\r\n        }\r\n\r\n        uint256 _usdoMin = 0;\r\n        if (data.length > 0) {\r\n            //should always be sent\r\n            _usdoMin = abi.decode(data, (uint256));\r\n        }\r\n        yieldBox.transfer(\r\n            address(this),\r\n            address(curveSwapper),\r\n            tokenInId,\r\n            yieldBox.toShare(tokenInId, amountIn, false)\r\n        );\r\n        return\r\n            _swap(\r\n                yieldBox,\r\n                tokenInId,\r\n                usdoAssetId,\r\n                amountIn,\r\n                _usdoMin,\r\n                address(liquidationQueue)\r\n            );\r\n    }\r\n\r\n    // *********************** //\r\n    // *** OWNER FUNCTIONS *** //\r\n    // *********************** //\r\n    /// @notice sets the Curve swapper\r\n    /// @dev used for USD0 to WETH swap\r\n    /// @param _swapper The curve pool swapper address\r\n    function setCurveSwapper(ISwapper _swapper) external onlyOwner {\r\n        emit CurveSwapperUpdated(address(curveSwapper), address(_swapper));\r\n        curveSwapper = _swapper;\r\n    }\r\n\r\n    // ************************* //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    function _getCurveIndex(address token) private view returns (uint256) {\r\n        ICurvePool pool = ICurvePool(\r\n            CurveSwapper(address(curveSwapper)).curvePool()\r\n        );\r\n        int256 index = -1;\r\n        for (uint256 i = 0; i < curveAssetsLength; i++) {\r\n            address tokenAtIndex = pool.coins(i);\r\n            if (tokenAtIndex == token) {\r\n                index = int256(i);\r\n            }\r\n        }\r\n        require(index > -1, 'asset not found');\r\n        return uint256(index);\r\n    }\r\n\r\n    function _getOutput(\r\n        IYieldBox yieldBox,\r\n        uint256 tokenInId,\r\n        uint256 tokenOutId,\r\n        uint256 amountIn\r\n    ) private view returns (uint256) {\r\n        (, address tokenInAddress, , ) = yieldBox.assets(tokenInId);\r\n        (, address tokenOutAddress, , ) = yieldBox.assets(tokenOutId);\r\n\r\n        uint256 tokenInCurveIndex = _getCurveIndex(tokenInAddress);\r\n        uint256 tokenOutCurveIndex = _getCurveIndex(tokenOutAddress);\r\n        uint256[] memory indexes = new uint256[](2);\r\n        indexes[0] = tokenInCurveIndex;\r\n        indexes[1] = tokenOutCurveIndex;\r\n\r\n        uint256 share = yieldBox.toShare(tokenInId, amountIn, false);\r\n        return\r\n            curveSwapper.getOutputAmount(tokenInId, share, abi.encode(indexes));\r\n    }\r\n\r\n    function _swap(\r\n        IYieldBox yieldBox,\r\n        uint256 stableAssetId,\r\n        uint256 usdoAssetId,\r\n        uint256 amountIn,\r\n        uint256 minAmount,\r\n        address to\r\n    ) private returns (uint256) {\r\n        (, address tokenInAddress, , ) = yieldBox.assets(stableAssetId);\r\n        (, address tokenOutAddress, , ) = yieldBox.assets(usdoAssetId);\r\n\r\n        uint256 tokenInCurveIndex = _getCurveIndex(tokenInAddress);\r\n        uint256 tokenOutCurveIndex = _getCurveIndex(tokenOutAddress);\r\n\r\n        uint256[] memory indexes = new uint256[](2);\r\n        indexes[0] = tokenInCurveIndex;\r\n        indexes[1] = tokenOutCurveIndex;\r\n        uint256 tokenInShare = yieldBox.toShare(stableAssetId, amountIn, false);\r\n\r\n        (uint256 amountOut, ) = curveSwapper.swap(\r\n            stableAssetId,\r\n            usdoAssetId,\r\n            tokenInShare,\r\n            to,\r\n            minAmount,\r\n            abi.encode(indexes)\r\n        );\r\n\r\n        return amountOut;\r\n    }\r\n}\r\n"
    },
    "contracts/liquidationQueue/bidders/IBidder.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\n/// @notice Used for performing swap operations when bidding on LiquidationQueue\r\ninterface IBidder {\r\n    /// @notice returns the unique name\r\n    function name() external view returns (string memory);\r\n\r\n    /// @notice returns the amount of collateral\r\n    /// @param singularity Market to query for\r\n    /// @param tokenInId Token in YieldBox asset id\r\n    /// @param amountIn Token in amount\r\n    /// @param data extra data used for retrieving the ouput\r\n    function getOutputAmount(\r\n        address singularity,\r\n        uint256 tokenInId,\r\n        uint256 amountIn,\r\n        bytes calldata data\r\n    ) external view returns (uint256);\r\n\r\n    /// @notice swap USD0 to collateral\r\n    /// @param singularity Market to swap for\r\n    /// @param tokenInId Token in asset id\r\n    /// @param amountIn Token in amount\r\n    /// @param data extra data used for the swap operation\r\n    function swap(\r\n        address singularity,\r\n        uint256 tokenInId,\r\n        uint256 amountIn,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    /// @notice returns token tokenIn amount based on tokenOut amount\r\n    /// @param singularity Market to query for\r\n    /// @param tokenInId Token in asset id\r\n    /// @param amountOut Token out amount\r\n    /// @param data extra data used for retrieving the ouput\r\n    function getInputAmount(\r\n        address singularity,\r\n        uint256 tokenInId,\r\n        uint256 amountOut,\r\n        bytes calldata data\r\n    ) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/liquidationQueue/bidders/UniUsdoToWethBidder.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport '@boringcrypto/boring-solidity/contracts/BoringOwnable.sol';\r\n\r\nimport '../../interfaces/IPenrose.sol';\r\nimport '../ILiquidationQueue.sol';\r\nimport '../../swappers/ISwapper.sol';\r\nimport '../../singularity/interfaces/ISingularity.sol';\r\nimport '../../../yieldbox/contracts/interfaces/IYieldBox.sol';\r\n\r\n/*\r\n\r\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\____        \r\n _\\///////\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\/////////\\\\\\_\\/////\\\\\\///______/\\\\\\///\\\\\\________/\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__       \r\n  _______\\/\\\\\\________/\\\\\\/////////\\\\\\_\\/\\\\\\_______\\/\\\\\\_____\\/\\\\\\_______/\\\\\\/__\\///\\\\\\____/\\\\\\/____________/\\\\\\/////////\\\\\\_      \r\n   _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\/\\\\\\______/\\\\\\______\\//\\\\\\__/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_     \r\n    _______\\/\\\\\\_______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\/////////________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \r\n     _______\\/\\\\\\_______\\/\\\\\\/////////\\\\\\_\\/\\\\\\_________________\\/\\\\\\_____\\//\\\\\\______/\\\\\\__\\//\\\\\\____________\\/\\\\\\/////////\\\\\\_   \r\n      _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_________________\\/\\\\\\______\\///\\\\\\__/\\\\\\_____\\///\\\\\\__________\\/\\\\\\_______\\/\\\\\\_  \r\n       _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\____\\///\\\\\\\\\\/________\\////\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_ \r\n        _______\\///________\\///________\\///__\\///______________\\///////////_______\\/////_____________\\/////////__\\///________\\///__\r\n\r\n*/\r\n\r\n/// @title Swaps USD0 to WETH UniswapV2\r\n/// @dev Performs 1 swap operation:\r\n///     - USD0 to Weth through UniV2\r\ncontract UniUsdoToWethBidder is BoringOwnable {\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n\r\n    /// @notice UniswapV2 swapper\r\n    ISwapper public univ2Swapper;\r\n\r\n    /// @notice YieldBox WETH asset id\r\n    uint256 wethId;\r\n\r\n    // ************** //\r\n    // *** EVENTS *** //\r\n    // ************** //\r\n    event UniV2SwapperUpdated(address indexed _old, address indexed _new);\r\n\r\n    /// @notice Creates a new UniUsdoToWethBidder contract\r\n    /// @param uniV2Swapper_ UniswapV2 swapper address\r\n    /// @param _wethAssetId YieldBox WETH asset id\r\n    constructor(ISwapper uniV2Swapper_, uint256 _wethAssetId) {\r\n        univ2Swapper = uniV2Swapper_;\r\n        wethId = _wethAssetId;\r\n    }\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n    /// @notice returns the unique name\r\n    function name() external pure returns (string memory) {\r\n        return 'USD0 -> WETH (Uniswap V2)';\r\n    }\r\n\r\n    /// @notice returns token tokenIn amount based on tokenOut amount\r\n    /// @param tokenInId Token in asset id\r\n    /// @param amountOut Token out amount\r\n    function getInputAmount(\r\n        ISingularity singularity,\r\n        uint256 tokenInId,\r\n        uint256 amountOut,\r\n        bytes calldata\r\n    ) external view returns (uint256) {\r\n        require(\r\n            tokenInId == IPenrose(singularity.penrose()).usdoAssetId(),\r\n            'token not valid'\r\n        );\r\n        IYieldBox yieldBox = IYieldBox(singularity.yieldBox());\r\n\r\n        uint256 shareOut = yieldBox.toShare(wethId, amountOut, false);\r\n\r\n        (, address tokenInAddress, , ) = yieldBox.assets(tokenInId);\r\n        (, address tokenOutAddress, , ) = yieldBox.assets(wethId);\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenInAddress;\r\n        path[1] = tokenOutAddress;\r\n\r\n        return univ2Swapper.getInputAmount(wethId, shareOut, abi.encode(path));\r\n    }\r\n\r\n    /// @notice returns the amount of collateral\r\n    /// @param amountIn Stablecoin amount\r\n    function getOutputAmount(\r\n        ISingularity singularity,\r\n        uint256 tokenInId,\r\n        uint256 amountIn,\r\n        bytes calldata\r\n    ) external view returns (uint256) {\r\n        require(\r\n            IPenrose(singularity.penrose()).usdoToken() != address(0),\r\n            'USD0 not set'\r\n        );\r\n        uint256 usdoAssetId = IPenrose(singularity.penrose()).usdoAssetId();\r\n        require(tokenInId == usdoAssetId, 'token not valid');\r\n\r\n        return\r\n            _uniswapOutputAmount(\r\n                IYieldBox(singularity.yieldBox()),\r\n                usdoAssetId,\r\n                wethId,\r\n                amountIn\r\n            );\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n\r\n    /// @notice swaps stable to collateral\r\n    /// @param tokenInId Token in asset Id\r\n    /// @param amountIn Stablecoin amount\r\n    /// @param data extra data used for the swap operation\r\n    function swap(\r\n        ISingularity singularity,\r\n        uint256 tokenInId,\r\n        uint256 amountIn,\r\n        bytes calldata data\r\n    ) external returns (uint256) {\r\n        require(\r\n            IPenrose(singularity.penrose()).usdoToken() != address(0),\r\n            'USD0 not set'\r\n        );\r\n        IYieldBox yieldBox = IYieldBox(singularity.yieldBox());\r\n        ILiquidationQueue liquidationQueue = ILiquidationQueue(\r\n            singularity.liquidationQueue()\r\n        );\r\n\r\n        uint256 usdoAssetId = IPenrose(singularity.penrose()).usdoAssetId();\r\n        require(tokenInId == usdoAssetId, 'token not valid');\r\n        require(msg.sender == address(liquidationQueue), 'only LQ');\r\n\r\n        uint256 assetMin = 0;\r\n        if (data.length > 0) {\r\n            //should always be sent\r\n            assetMin = abi.decode(data, (uint256));\r\n        }\r\n\r\n        yieldBox.transfer(\r\n            address(this),\r\n            address(univ2Swapper),\r\n            tokenInId,\r\n            yieldBox.toShare(tokenInId, amountIn, false)\r\n        );\r\n\r\n        return\r\n            _uniswapSwap(\r\n                yieldBox,\r\n                usdoAssetId,\r\n                wethId,\r\n                amountIn,\r\n                assetMin,\r\n                address(liquidationQueue)\r\n            );\r\n    }\r\n\r\n    // *********************** //\r\n    // *** OWNER FUNCTIONS *** //\r\n    // *********************** //\r\n    /// @notice sets the UniV2 swapper\r\n    /// @dev used for WETH to USDC swap\r\n    /// @param _swapper The UniV2 pool swapper address\r\n    function setUniswapSwapper(ISwapper _swapper) external onlyOwner {\r\n        emit UniV2SwapperUpdated(address(univ2Swapper), address(_swapper));\r\n        univ2Swapper = _swapper;\r\n    }\r\n\r\n    // ************************* //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    function _uniswapSwap(\r\n        IYieldBox yieldBox,\r\n        uint256 tokenInId,\r\n        uint256 tokenOutId,\r\n        uint256 tokenInAmount,\r\n        uint256 minAmount,\r\n        address to\r\n    ) private returns (uint256) {\r\n        (, address tokenInAddress, , ) = yieldBox.assets(tokenInId);\r\n        (, address tokenOutAddress, , ) = yieldBox.assets(tokenOutId);\r\n        address[] memory swapPath = new address[](2);\r\n        swapPath[0] = tokenInAddress;\r\n        swapPath[1] = tokenOutAddress;\r\n        uint256 tokenInShare = yieldBox.toShare(\r\n            tokenInId,\r\n            tokenInAmount,\r\n            false\r\n        );\r\n        (uint256 outAmount, ) = univ2Swapper.swap(\r\n            tokenInId,\r\n            tokenOutId,\r\n            tokenInShare,\r\n            to,\r\n            minAmount,\r\n            abi.encode(swapPath)\r\n        );\r\n\r\n        return outAmount;\r\n    }\r\n\r\n    function _uniswapOutputAmount(\r\n        IYieldBox yieldBox,\r\n        uint256 tokenInId,\r\n        uint256 tokenOutId,\r\n        uint256 amountIn\r\n    ) private view returns (uint256) {\r\n        (, address tokenInAddress, , ) = yieldBox.assets(tokenInId);\r\n        (, address tokenOutAddress, , ) = yieldBox.assets(tokenOutId);\r\n        address[] memory swapPath = new address[](2);\r\n        swapPath[0] = tokenInAddress;\r\n        swapPath[1] = tokenOutAddress;\r\n        uint256 tokenInShare = yieldBox.toShare(tokenInId, amountIn, false);\r\n        return univ2Swapper.getOutputAmount(tokenInId, tokenInShare, abi.encode(swapPath));\r\n    }\r\n}\r\n"
    },
    "contracts/liquidationQueue/ILiquidationQueue.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport './bidders/IBidder.sol';\r\n\r\ninterface ILiquidationQueue {\r\n    enum MODE {\r\n        ADD,\r\n        SUB\r\n    }\r\n\r\n    struct PoolInfo {\r\n        uint256 totalAmount; //liquidated asset amount\r\n        mapping(address => Bidder) users;\r\n    }\r\n    struct Bidder {\r\n        bool isUsdo;\r\n        bool swapOnExecute;\r\n        uint256 usdoAmount;\r\n        uint256 liquidatedAssetAmount;\r\n        uint256 timestamp; // Timestamp in second of the last bid.\r\n    }\r\n\r\n    struct OrderBookPoolEntry {\r\n        address bidder;\r\n        Bidder bidInfo;\r\n    }\r\n\r\n    struct OrderBookPoolInfo {\r\n        uint32 poolId;\r\n        uint32 nextBidPull; // Next position in `entries` to start pulling bids from\r\n        uint32 nextBidPush; // Next position in `entries` to start pushing bids to\r\n    }\r\n\r\n    struct LiquidationQueueMeta {\r\n        uint256 activationTime; // Time needed before a bid can be activated for execution\r\n        uint256 minBidAmount; // Minimum bid amount\r\n        address feeCollector; // Address of the fee collector\r\n        IBidder bidExecutionSwapper; //Allows swapping USD0 to collateral when a bid is executed\r\n        IBidder usdoSwapper; //Allows swapping any other stablecoin to USD0\r\n    }\r\n\r\n    struct BidExecutionData {\r\n        uint256 curPoolId;\r\n        bool isBidAvail;\r\n        OrderBookPoolInfo poolInfo;\r\n        OrderBookPoolEntry orderBookEntry;\r\n        OrderBookPoolEntry orderBookEntryCopy;\r\n        uint256 totalPoolAmountExecuted;\r\n        uint256 totalPoolCollateralLiquidated;\r\n        uint256 totalUsdoAmountUsed;\r\n        uint256 exchangeRate;\r\n        uint256 discountedBidderAmount;\r\n    }\r\n\r\n    function init(LiquidationQueueMeta calldata, address singularity) external;\r\n\r\n    function onlyOnce() external view returns (bool);\r\n\r\n    function setBidExecutionSwapper(address swapper) external;\r\n\r\n    function setUsdoSwapper(address swapper) external;\r\n\r\n    function getNextAvailBidPool()\r\n        external\r\n        view\r\n        returns (uint256 i, bool available, uint256 totalAmount);\r\n\r\n    function executeBids(\r\n        uint256 collateralAmountToLiquidate,\r\n        bytes calldata swapData\r\n    ) external returns (uint256 amountExecuted, uint256 collateralLiquidated);\r\n}\r\n"
    },
    "contracts/liquidationQueue/LiquidationQueue.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\nimport '@boringcrypto/boring-solidity/contracts/BoringOwnable.sol';\r\nimport '@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol';\r\n\r\nimport '../interfaces/IPenrose.sol';\r\nimport './ILiquidationQueue.sol';\r\nimport '../singularity/interfaces/ISingularity.sol';\r\nimport '../../yieldbox/contracts/interfaces/IStrategy.sol';\r\nimport '../../yieldbox/contracts/strategies/ERC20WithoutStrategy.sol';\r\n\r\nimport '../../yieldbox/contracts/YieldBox.sol';\r\n\r\n/// @title LiquidationQueue\r\n/// @author @0xRektora, TapiocaDAO\r\n// TODO: Capital efficiency? (register assets to strategies) (farm strat for TAP)\r\n// TODO: ERC20 impl?\r\ncontract LiquidationQueue is ILiquidationQueue {\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n\r\n    /**\r\n     * General information about the LiquidationQueue contract.\r\n     */\r\n\r\n    /// @notice returns metadata information\r\n    LiquidationQueueMeta public liquidationQueueMeta;\r\n    /// @notice targeted market\r\n    ISingularity public singularity;\r\n    /// @notice Penrose addres\r\n    IPenrose public penrose;\r\n    /// @notice YieldBox address\r\n    YieldBox public yieldBox;\r\n\r\n    /// @notice liquidation queue Penrose asset id\r\n    uint256 public lqAssetId;\r\n    /// @notice singularity asset id\r\n    uint256 public marketAssetId;\r\n    /// @notice asset that is being liquidated\r\n    uint256 public liquidatedAssetId;\r\n\r\n    /// @notice initialization status\r\n    bool public onlyOnce;\r\n\r\n    /**\r\n     * Pools & order books information.\r\n     */\r\n\r\n    /// @notice Bid pools\r\n    /// @dev x% premium => bid pool\r\n    ///      0 ... 30 range\r\n    ///      poolId => totalAmount\r\n    ///      poolId => userAddress => userBidInfo.\r\n    mapping(uint256 => PoolInfo) public bidPools;\r\n\r\n    /// @notice The actual order book. Entries are stored only once a bid has been activated\r\n    /// @dev poolId => bidIndex => bidEntry).\r\n    mapping(uint256 => mapping(uint256 => OrderBookPoolEntry))\r\n        public orderBookEntries;\r\n    /// @notice Meta-data about the order book pool\r\n    /// @dev poolId => poolInfo.\r\n    mapping(uint256 => OrderBookPoolInfo) public orderBookInfos;\r\n\r\n    /**\r\n     * Ledger.\r\n     */\r\n\r\n    /// @notice User current bids\r\n    /// @dev user => orderBookEntries[poolId][bidIndex]\r\n    mapping(address => mapping(uint256 => uint256[])) public userBidIndexes;\r\n\r\n    /// @notice Due balance of users\r\n    /// @dev user => amountDue.\r\n    mapping(address => uint256) public balancesDue;\r\n\r\n    // ***************** //\r\n    // *** CONSTANTS *** //\r\n    // ***************** //\r\n    uint256 constant MAX_BID_POOLS = 10; // Maximum amount of pools.\r\n    // `amount` * ((`bidPool` * `PREMIUM_FACTOR`) / `PREMIUM_FACTOR_PRECISION`) = premium.\r\n    uint256 constant PREMIUM_FACTOR = 100; // Premium factor.\r\n    uint256 constant PREMIUM_FACTOR_PRECISION = 10_000; // Precision of the premium factor.\r\n\r\n    uint256 private constant EXCHANGE_RATE_PRECISION = 1e18;\r\n\r\n    uint256 private constant WITHDRAWAL_FEE = 50; // 0.5%\r\n    uint256 private constant WITHDRAWAL_FEE_PRECISION = 10_000;\r\n\r\n    // ************** //\r\n    // *** EVENTS *** //\r\n    // ************** //\r\n\r\n    event Bid(\r\n        address indexed caller,\r\n        address indexed bidder,\r\n        uint256 indexed pool,\r\n        uint256 usdoAmount,\r\n        uint256 liquidatedAssetAmount,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event ActivateBid(\r\n        address indexed caller,\r\n        address indexed bidder,\r\n        uint256 indexed pool,\r\n        uint256 usdoAmount,\r\n        uint256 liquidatedAssetAmount,\r\n        uint256 collateralValue,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event RemoveBid(\r\n        address indexed caller,\r\n        address indexed bidder,\r\n        uint256 indexed pool,\r\n        uint256 usdoAmount,\r\n        uint256 liquidatedAssetAmount,\r\n        uint256 collateralValue,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event ExecuteBids(\r\n        address indexed caller,\r\n        uint256 indexed pool,\r\n        uint256 usdoAmountExecuted,\r\n        uint256 liquidatedAssetAmountExecuted,\r\n        uint256 collateralLiquidated,\r\n        uint256 timestamp\r\n    );\r\n\r\n    event Redeem(address indexed redeemer, address indexed to, uint256 amount);\r\n    event BidSwapperUpdated(IBidder indexed _old, address indexed _new);\r\n    event UsdoSwapperUpdated(IBidder indexed _old, address indexed _new);\r\n\r\n    // ***************** //\r\n    // *** MODIFIERS *** //\r\n    // ***************** //\r\n\r\n    modifier Active() {\r\n        require(onlyOnce, 'LQ: Not initialized');\r\n        _;\r\n    }\r\n\r\n    /// @notice Acts as a 'constructor', should be called by a Singularity market.\r\n    /// @param  _liquidationQueueMeta Info about the liquidations.\r\n    function init(\r\n        LiquidationQueueMeta calldata _liquidationQueueMeta,\r\n        address _mixologist\r\n    ) external override {\r\n        require(!onlyOnce, 'LQ: Initialized');\r\n\r\n        liquidationQueueMeta = _liquidationQueueMeta;\r\n\r\n        singularity = ISingularity(_mixologist);\r\n        liquidatedAssetId = singularity.collateralId();\r\n        marketAssetId = singularity.assetId();\r\n        penrose = IPenrose(singularity.penrose());\r\n        yieldBox = YieldBox(singularity.yieldBox());\r\n\r\n        lqAssetId = marketAssetId;\r\n\r\n        IERC20(singularity.asset()).approve(\r\n            address(yieldBox),\r\n            type(uint256).max\r\n        );\r\n        yieldBox.setApprovalForAll(address(singularity), true);\r\n\r\n        // We initialize the pools to save gas on conditionals later on.\r\n        for (uint256 i = 0; i <= MAX_BID_POOLS; ) {\r\n            _initOrderBookPoolInfo(i);\r\n            ++i;\r\n        }\r\n\r\n        onlyOnce = true; // We set the init flag.\r\n    }\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n\r\n    /// @notice returns targeted market\r\n    function market() public view returns (string memory) {\r\n        return singularity.name();\r\n    }\r\n\r\n    /// @notice returns order book size\r\n    function getOrderBookSize(uint256 pool) public view returns (uint256 size) {\r\n        OrderBookPoolInfo memory poolInfo = orderBookInfos[pool];\r\n        unchecked {\r\n            size = poolInfo.nextBidPush - poolInfo.nextBidPull;\r\n        }\r\n    }\r\n\r\n    /// @notice returns an array of 'OrderBookPoolEntry' for a pool\r\n    function getOrderBookPoolEntries(uint256 pool)\r\n        external\r\n        view\r\n        returns (OrderBookPoolEntry[] memory x)\r\n    {\r\n        OrderBookPoolInfo memory poolInfo = orderBookInfos[pool];\r\n        uint256 orderBookSize = poolInfo.nextBidPush - poolInfo.nextBidPull;\r\n\r\n        x = new OrderBookPoolEntry[](orderBookSize); // Initialize the return array.\r\n\r\n        mapping(uint256 => OrderBookPoolEntry)\r\n            storage entries = orderBookEntries[pool];\r\n        for (\r\n            (uint256 i, uint256 j) = (poolInfo.nextBidPull, 0);\r\n            i < poolInfo.nextBidPush;\r\n\r\n        ) {\r\n            x[j] = entries[i]; // Copy the entry to the return array.\r\n\r\n            unchecked {\r\n                ++i;\r\n                ++j;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Get the next not empty bid pool in ASC order.\r\n    /// @return i The bid pool id.\r\n    /// @return available True if there is at least 1 bid available across all the order books.\r\n    /// @return totalAmount Total available liquidated asset amount.\r\n    function getNextAvailBidPool()\r\n        public\r\n        view\r\n        override\r\n        returns (\r\n            uint256 i,\r\n            bool available,\r\n            uint256 totalAmount\r\n        )\r\n    {\r\n        for (; i <= MAX_BID_POOLS; ) {\r\n            if (getOrderBookSize(i) != 0) {\r\n                available = true;\r\n                totalAmount = bidPools[i].totalAmount;\r\n                break;\r\n            }\r\n            ++i;\r\n        }\r\n    }\r\n\r\n    /// @notice returns user data for an existing bid pool\r\n    /// @param pool the pool identifier\r\n    /// @param user the user identifier\r\n    function getBidPoolUserInfo(uint256 pool, address user)\r\n        external\r\n        view\r\n        returns (Bidder memory)\r\n    {\r\n        return bidPools[pool].users[user];\r\n    }\r\n\r\n    /// @notice returns number of pool bids for user\r\n    function userBidIndexLength(address user, uint256 pool)\r\n        external\r\n        view\r\n        returns (uint256 len)\r\n    {\r\n        uint256[] memory bidIndexes = userBidIndexes[user][pool];\r\n\r\n        uint256 bidIndexesLen = bidIndexes.length;\r\n        OrderBookPoolInfo memory poolInfo = orderBookInfos[pool];\r\n        for (uint256 i = 0; i < bidIndexesLen; ) {\r\n            if (bidIndexes[i] >= poolInfo.nextBidPull) {\r\n                bidIndexesLen--;\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        return bidIndexes.length;\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n\r\n    /// @notice Add a bid to a bid pool using stablecoins.\r\n    /// @dev Works the same way as `bid` but performs a swap from the stablecoin to USDO\r\n    ///      - if stableAssetId == usdoAssetId, no swap is performed\r\n    /// @param user The bidder\r\n    /// @param pool To which pool the bid should go\r\n    /// @param stableAssetId Stablecoin YieldBox asset id\r\n    /// @param amountIn Stablecoin amount\r\n    /// @param data Extra data for swap operations\r\n    function bidWithStable(\r\n        address user,\r\n        uint256 pool,\r\n        uint256 stableAssetId,\r\n        uint256 amountIn,\r\n        bytes calldata data\r\n    ) external Active {\r\n        require(pool <= MAX_BID_POOLS, 'LQ: premium too high');\r\n        require(\r\n            address(liquidationQueueMeta.usdoSwapper) != address(0),\r\n            'LQ: USD0 swapper not set'\r\n        );\r\n\r\n        uint256 usdoAssetId = penrose.usdoAssetId();\r\n        yieldBox.transfer(\r\n            msg.sender,\r\n            address(liquidationQueueMeta.usdoSwapper),\r\n            stableAssetId,\r\n            yieldBox.toShare(stableAssetId, amountIn, false)\r\n        );\r\n\r\n        uint256 usdoAmount = liquidationQueueMeta.usdoSwapper.swap(\r\n            address(singularity),\r\n            stableAssetId,\r\n            amountIn,\r\n            data\r\n        );\r\n\r\n        Bidder memory bidder = _bid(user, pool, usdoAmount, true);\r\n\r\n        uint256 usdoValueInLqAsset = bidder.swapOnExecute\r\n            ? liquidationQueueMeta.bidExecutionSwapper.getOutputAmount(\r\n                address(singularity),\r\n                usdoAssetId,\r\n                usdoAmount,\r\n                data\r\n            )\r\n            : bidder.usdoAmount;\r\n\r\n        require(\r\n            usdoValueInLqAsset >= liquidationQueueMeta.minBidAmount,\r\n            'LQ: bid too low'\r\n        );\r\n    }\r\n\r\n    /// @notice Add a bid to a bid pool.\r\n    /// @dev Create an entry in `bidPools`.\r\n    ///      Clean the userBidIndex here instead of the `executeBids()` function to save on gas.\r\n    /// @param user The bidder.\r\n    /// @param pool To which pool the bid should go.\r\n    /// @param amount The amount in asset to bid.\r\n    function bid(\r\n        address user,\r\n        uint256 pool,\r\n        uint256 amount\r\n    ) external Active {\r\n        require(pool <= MAX_BID_POOLS, 'LQ: premium too high');\r\n        require(amount >= liquidationQueueMeta.minBidAmount, 'LQ: bid too low');\r\n\r\n        // Transfer assets to the LQ contract.\r\n        uint256 assetId = lqAssetId;\r\n        yieldBox.transfer(\r\n            msg.sender,\r\n            address(this),\r\n            assetId,\r\n            yieldBox.toShare(assetId, amount, false)\r\n        );\r\n        _bid(user, pool, amount, false);\r\n    }\r\n\r\n    /// @notice Activate a bid by putting it in the order book.\r\n    /// @dev Create an entry in `orderBook` and remove it from `bidPools`.\r\n    /// @dev Spam vector attack is mitigated the min amount req., 10min CD + activation fees.\r\n    /// @param user The user to activate the bid for.\r\n    /// @param pool The target pool.\r\n    function activateBid(address user, uint256 pool) external {\r\n        Bidder memory bidder = bidPools[pool].users[user];\r\n\r\n        require(bidder.timestamp > 0, 'LQ: bid not available'); //fail early\r\n        require(\r\n            block.timestamp >=\r\n                bidder.timestamp + liquidationQueueMeta.activationTime,\r\n            'LQ: too soon'\r\n        );\r\n\r\n        OrderBookPoolInfo memory poolInfo = orderBookInfos[pool]; // Info about the pool array indexes.\r\n\r\n        // Create a new order book entry.\r\n        OrderBookPoolEntry memory orderBookEntry;\r\n        orderBookEntry.bidder = user;\r\n        orderBookEntry.bidInfo = bidder;\r\n\r\n        // Insert the order book entry and delete the bid entry from the given pool.\r\n        orderBookEntries[pool][poolInfo.nextBidPush] = orderBookEntry;\r\n        delete bidPools[pool].users[user];\r\n\r\n        // Add the index to the user bid index.\r\n        userBidIndexes[user][pool].push(poolInfo.nextBidPush);\r\n\r\n        // Update the `orderBookInfos`.\r\n        unchecked {\r\n            ++poolInfo.nextBidPush;\r\n        }\r\n        orderBookInfos[pool] = poolInfo;\r\n\r\n        uint256 bidAmount = orderBookEntry.bidInfo.isUsdo\r\n            ? orderBookEntry.bidInfo.usdoAmount\r\n            : orderBookEntry.bidInfo.liquidatedAssetAmount;\r\n        uint256 assetValue = orderBookEntry.bidInfo.swapOnExecute\r\n            ? liquidationQueueMeta.bidExecutionSwapper.getOutputAmount(\r\n                address(singularity),\r\n                penrose.usdoAssetId(),\r\n                orderBookEntry.bidInfo.usdoAmount,\r\n                ''\r\n            )\r\n            : bidAmount;\r\n        bidPools[pool].totalAmount += assetValue;\r\n        emit ActivateBid(\r\n            msg.sender,\r\n            user,\r\n            pool,\r\n            orderBookEntry.bidInfo.usdoAmount,\r\n            orderBookEntry.bidInfo.liquidatedAssetAmount,\r\n            assetValue,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @notice Remove a not yet activated bid from the bid pool.\r\n    /// @dev Remove `msg.sender` funds.\r\n    /// @param user The user to send the funds to.\r\n    /// @param pool The pool to remove the bid from.\r\n    /// @return amountRemoved The amount of the bid.\r\n    function removeBid(address user, uint256 pool)\r\n        external\r\n        returns (uint256 amountRemoved)\r\n    {\r\n        bool isUsdo = bidPools[pool].users[msg.sender].isUsdo;\r\n        amountRemoved = isUsdo\r\n            ? bidPools[pool].users[msg.sender].usdoAmount\r\n            : bidPools[pool].users[msg.sender].liquidatedAssetAmount;\r\n        require(amountRemoved > 0, 'LQ: bid not available');\r\n        delete bidPools[pool].users[msg.sender];\r\n\r\n        uint256 lqAssetValue = amountRemoved;\r\n        if (bidPools[pool].users[msg.sender].swapOnExecute) {\r\n            lqAssetValue = liquidationQueueMeta\r\n                .bidExecutionSwapper\r\n                .getOutputAmount(\r\n                    address(singularity),\r\n                    penrose.usdoAssetId(),\r\n                    amountRemoved,\r\n                    ''\r\n                );\r\n        }\r\n        require(\r\n            lqAssetValue >= liquidationQueueMeta.minBidAmount,\r\n            'LQ: bid does not exist'\r\n        ); //save gas\r\n\r\n        // Transfer assets\r\n        uint256 assetId = isUsdo ? penrose.usdoAssetId() : lqAssetId;\r\n        yieldBox.transfer(\r\n            address(this),\r\n            user,\r\n            assetId,\r\n            yieldBox.toShare(assetId, amountRemoved, false)\r\n        );\r\n\r\n        emit RemoveBid(\r\n            msg.sender,\r\n            user,\r\n            pool,\r\n            isUsdo ? amountRemoved : 0,\r\n            isUsdo ? 0 : amountRemoved,\r\n            lqAssetValue,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @notice Redeem a balance.\r\n    /// @dev `msg.sender` is used as the redeemer.\r\n    /// @param to The address to redeem to.\r\n    function redeem(address to) external {\r\n        require(balancesDue[msg.sender] > 0, 'LQ: No balance due');\r\n\r\n        uint256 balance = balancesDue[msg.sender];\r\n        uint256 fee = (balance * WITHDRAWAL_FEE) / WITHDRAWAL_FEE_PRECISION;\r\n        uint256 redeemable = balance - fee;\r\n\r\n        balancesDue[msg.sender] = 0;\r\n        balancesDue[liquidationQueueMeta.feeCollector] += fee;\r\n\r\n        uint256 assetId = liquidatedAssetId;\r\n        yieldBox.transfer(\r\n            address(this),\r\n            to,\r\n            assetId,\r\n            yieldBox.toShare(assetId, redeemable, false)\r\n        );\r\n\r\n        emit Redeem(msg.sender, to, redeemable);\r\n    }\r\n\r\n    /// @notice Execute the liquidation call by executing the bids placed in the pools in ASC order.\r\n    /// @dev Should only be called from Singularity.\r\n    ///      Singularity should send the `collateralAmountToLiquidate` to this contract before calling this function.\r\n    /// Tx will fail if it can't transfer allowed Penrose asset from Singularity.\r\n    /// @param collateralAmountToLiquidate The amount of collateral to liquidate.\r\n    /// @param swapData Swap data necessary for swapping USD0 to market asset; necessary only if bidder added USD0\r\n    /// @return totalAmountExecuted The amount of asset that was executed.\r\n    /// @return totalCollateralLiquidated The amount of collateral that was liquidated.\r\n    function executeBids(\r\n        uint256 collateralAmountToLiquidate,\r\n        bytes calldata swapData\r\n    )\r\n        external\r\n        override\r\n        returns (uint256 totalAmountExecuted, uint256 totalCollateralLiquidated)\r\n    {\r\n        require(msg.sender == address(singularity), 'LQ: Only Singularity');\r\n        BidExecutionData memory data;\r\n\r\n        (data.curPoolId, data.isBidAvail, ) = getNextAvailBidPool();\r\n        data.exchangeRate = singularity.exchangeRate();\r\n        // We loop through all the bids for each pools until all the collateral is liquidated\r\n        // or no more bid are available.\r\n        while (collateralAmountToLiquidate > 0 && data.isBidAvail) {\r\n            data.poolInfo = orderBookInfos[data.curPoolId];\r\n            // Reset pool vars.\r\n            data.totalPoolAmountExecuted = 0;\r\n            data.totalPoolCollateralLiquidated = 0;\r\n            // While bid pool is not empty and we haven't liquidated enough collateral.\r\n            while (\r\n                collateralAmountToLiquidate > 0 &&\r\n                data.poolInfo.nextBidPull != data.poolInfo.nextBidPush\r\n            ) {\r\n                // Get the next bid.\r\n                data.orderBookEntry = orderBookEntries[data.curPoolId][\r\n                    data.poolInfo.nextBidPull\r\n                ];\r\n                data.orderBookEntryCopy = data.orderBookEntry;\r\n\r\n                // Get the total amount of asset with the pool discount applied for the bidder.\r\n                data\r\n                    .discountedBidderAmount = _viewBidderDiscountedCollateralAmount(\r\n                    data.orderBookEntryCopy.bidInfo,\r\n                    data.exchangeRate,\r\n                    data.curPoolId\r\n                );\r\n\r\n                // Check if the bidder can pay the remaining collateral to liquidate `collateralAmountToLiquidate`.\r\n                if (data.discountedBidderAmount > collateralAmountToLiquidate) {\r\n                    (\r\n                        uint256 finalDiscountedCollateralAmount,\r\n                        uint256 finalUsdoAmount\r\n                    ) = _userPartiallyBidAmount(\r\n                            data.orderBookEntryCopy.bidInfo,\r\n                            collateralAmountToLiquidate,\r\n                            data.exchangeRate,\r\n                            data.curPoolId,\r\n                            swapData\r\n                        );\r\n\r\n                    // Execute the bid.\r\n                    balancesDue[\r\n                        data.orderBookEntryCopy.bidder\r\n                    ] += collateralAmountToLiquidate; // Write balance.\r\n\r\n                    if (!data.orderBookEntry.bidInfo.isUsdo) {\r\n                        data\r\n                            .orderBookEntry\r\n                            .bidInfo\r\n                            .liquidatedAssetAmount -= finalDiscountedCollateralAmount; // Update bid entry amount.\r\n                    } else {\r\n                        data\r\n                            .orderBookEntry\r\n                            .bidInfo\r\n                            .usdoAmount -= finalUsdoAmount;\r\n                    }\r\n\r\n                    // Update the total amount executed, the total collateral liquidated and collateral to liquidate.\r\n                    data\r\n                        .totalPoolAmountExecuted += finalDiscountedCollateralAmount;\r\n                    data\r\n                        .totalPoolCollateralLiquidated += collateralAmountToLiquidate;\r\n                    collateralAmountToLiquidate = 0; // Since we have liquidated all the collateral.\r\n                    data.totalUsdoAmountUsed += finalUsdoAmount;\r\n\r\n                    orderBookEntries[data.curPoolId][data.poolInfo.nextBidPull]\r\n                        .bidInfo = data.orderBookEntry.bidInfo;\r\n                } else {\r\n                    (\r\n                        uint256 finalCollateralAmount,\r\n                        uint256 finalDiscountedCollateralAmount,\r\n                        uint256 finalUsdoAmount\r\n                    ) = _useEntireBidAmount(\r\n                            data.orderBookEntryCopy.bidInfo,\r\n                            data.discountedBidderAmount,\r\n                            data.exchangeRate,\r\n                            data.curPoolId,\r\n                            swapData\r\n                        );\r\n                    // Execute the bid.\r\n                    balancesDue[\r\n                        data.orderBookEntryCopy.bidder\r\n                    ] += finalDiscountedCollateralAmount; // Write balance.\r\n                    data.orderBookEntry.bidInfo.usdoAmount = 0; // Update bid entry amount.\r\n                    data.orderBookEntry.bidInfo.liquidatedAssetAmount = 0; // Update bid entry amount.\r\n                    // Update the total amount executed, the total collateral liquidated and collateral to liquidate.\r\n                    data.totalUsdoAmountUsed += finalUsdoAmount;\r\n                    data.totalPoolAmountExecuted += finalCollateralAmount;\r\n                    data\r\n                        .totalPoolCollateralLiquidated += finalDiscountedCollateralAmount;\r\n\r\n                    collateralAmountToLiquidate -= finalDiscountedCollateralAmount;\r\n                    orderBookEntries[data.curPoolId][data.poolInfo.nextBidPull]\r\n                        .bidInfo = data.orderBookEntry.bidInfo;\r\n                    // Since the current bid was fulfilled, get the next one.\r\n                    unchecked {\r\n                        ++data.poolInfo.nextBidPull;\r\n                    }\r\n                }\r\n            }\r\n            // Update the totals.\r\n            totalAmountExecuted += data.totalPoolAmountExecuted;\r\n            totalCollateralLiquidated += data.totalPoolCollateralLiquidated;\r\n            orderBookInfos[data.curPoolId] = data.poolInfo; // Update the pool info for the current pool.\r\n            // Look up for the next available bid pool.\r\n            (data.curPoolId, data.isBidAvail, ) = getNextAvailBidPool();\r\n            bidPools[data.curPoolId].totalAmount -= totalAmountExecuted;\r\n\r\n            emit ExecuteBids(\r\n                msg.sender,\r\n                data.curPoolId,\r\n                data.totalUsdoAmountUsed,\r\n                data.totalPoolAmountExecuted,\r\n                data.totalPoolCollateralLiquidated,\r\n                block.timestamp\r\n            );\r\n        }\r\n        // Stack too deep\r\n        {\r\n            uint256 toSend = totalAmountExecuted;\r\n\r\n            // Transfer the assets to the Singularity.\r\n            yieldBox.withdraw(\r\n                lqAssetId,\r\n                address(this),\r\n                address(this),\r\n                toSend,\r\n                0\r\n            );\r\n            yieldBox.depositAsset(\r\n                marketAssetId,\r\n                address(this),\r\n                address(singularity),\r\n                toSend,\r\n                0\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice updates the bid swapper address\r\n    /// @param _swapper thew new ICollateralSwaper contract address\r\n    function setBidExecutionSwapper(address _swapper) external override {\r\n        require(msg.sender == address(singularity), 'unauthorized');\r\n        emit BidSwapperUpdated(\r\n            liquidationQueueMeta.bidExecutionSwapper,\r\n            _swapper\r\n        );\r\n        liquidationQueueMeta.bidExecutionSwapper = IBidder(_swapper);\r\n    }\r\n\r\n    /// @notice updates the bid swapper address\r\n    /// @param _swapper thew new ICollateralSwaper contract address\r\n    function setUsdoSwapper(address _swapper) external override {\r\n        require(msg.sender == address(singularity), 'unauthorized');\r\n        emit UsdoSwapperUpdated(liquidationQueueMeta.usdoSwapper, _swapper);\r\n        liquidationQueueMeta.usdoSwapper = IBidder(_swapper);\r\n    }\r\n\r\n    // ************************* //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    function _viewBidderDiscountedCollateralAmount(\r\n        Bidder memory entry,\r\n        uint256 exchangeRate,\r\n        uint256 poolId\r\n    ) private view returns (uint256) {\r\n        uint256 bidAmount = entry.isUsdo\r\n            ? entry.usdoAmount\r\n            : entry.liquidatedAssetAmount;\r\n        uint256 liquidatedAssetAmount = entry.swapOnExecute\r\n            ? liquidationQueueMeta.bidExecutionSwapper.getOutputAmount(\r\n                address(singularity),\r\n                penrose.usdoAssetId(),\r\n                entry.usdoAmount,\r\n                ''\r\n            )\r\n            : bidAmount;\r\n        return\r\n            _getPremiumAmount(\r\n                _bidToCollateral(liquidatedAssetAmount, exchangeRate),\r\n                poolId,\r\n                MODE.ADD\r\n            );\r\n    }\r\n\r\n    function _useEntireBidAmount(\r\n        Bidder memory entry,\r\n        uint256 discountedBidderAmount,\r\n        uint256 exchangeRate,\r\n        uint256 poolId,\r\n        bytes memory swapData\r\n    )\r\n        private\r\n        returns (\r\n            uint256 finalCollateralAmount,\r\n            uint256 finalDiscountedCollateralAmount,\r\n            uint256 finalUsdoAmount\r\n        )\r\n    {\r\n        finalCollateralAmount = entry.liquidatedAssetAmount;\r\n        finalDiscountedCollateralAmount = discountedBidderAmount;\r\n        finalUsdoAmount = entry.usdoAmount;\r\n        //Execute the swap if USD0 was provided and it's different from the liqudation asset id\r\n        if (entry.swapOnExecute) {\r\n            yieldBox.transfer(\r\n                address(this),\r\n                address(liquidationQueueMeta.bidExecutionSwapper),\r\n                penrose.usdoAssetId(),\r\n                yieldBox.toShare(penrose.usdoAssetId(), entry.usdoAmount, false)\r\n            );\r\n\r\n            finalCollateralAmount = liquidationQueueMeta\r\n                .bidExecutionSwapper\r\n                .swap(\r\n                    address(singularity),\r\n                    penrose.usdoAssetId(),\r\n                    entry.usdoAmount,\r\n                    swapData\r\n                );\r\n            finalDiscountedCollateralAmount = _getPremiumAmount(\r\n                _bidToCollateral(finalCollateralAmount, exchangeRate),\r\n                poolId,\r\n                MODE.ADD\r\n            );\r\n        }\r\n    }\r\n\r\n    function _userPartiallyBidAmount(\r\n        Bidder memory entry,\r\n        uint256 collateralAmountToLiquidate,\r\n        uint256 exchangeRate,\r\n        uint256 poolId,\r\n        bytes memory swapData\r\n    )\r\n        private\r\n        returns (\r\n            uint256 finalDiscountedCollateralAmount,\r\n            uint256 finalUsdoAmount\r\n        )\r\n    {\r\n        finalUsdoAmount = 0;\r\n        finalDiscountedCollateralAmount = _getPremiumAmount(\r\n            _collateralToBid(collateralAmountToLiquidate, exchangeRate),\r\n            poolId,\r\n            MODE.SUB\r\n        );\r\n\r\n        //Execute the swap if USD0 was provided and it's different from the liqudation asset id\r\n        uint256 usdoAssetId = penrose.usdoAssetId();\r\n        if (entry.swapOnExecute) {\r\n            finalUsdoAmount = liquidationQueueMeta\r\n                .bidExecutionSwapper\r\n                .getInputAmount(\r\n                    address(singularity),\r\n                    usdoAssetId,\r\n                    finalDiscountedCollateralAmount,\r\n                    ''\r\n                );\r\n\r\n            yieldBox.transfer(\r\n                address(this),\r\n                address(liquidationQueueMeta.bidExecutionSwapper),\r\n                usdoAssetId,\r\n                yieldBox.toShare(usdoAssetId, finalUsdoAmount, false)\r\n            );\r\n            uint256 returnedCollateral = liquidationQueueMeta\r\n                .bidExecutionSwapper\r\n                .swap(\r\n                    address(singularity),\r\n                    usdoAssetId,\r\n                    finalUsdoAmount,\r\n                    swapData\r\n                );\r\n            require(\r\n                returnedCollateral >= finalDiscountedCollateralAmount,\r\n                'need-more-collateral'\r\n            );\r\n        }\r\n    }\r\n\r\n    function _bid(\r\n        address user,\r\n        uint256 pool,\r\n        uint256 amount,\r\n        bool isUsdo\r\n    ) private returns (Bidder memory bidder) {\r\n        bidder.usdoAmount = isUsdo ? amount : 0;\r\n        bidder.liquidatedAssetAmount = isUsdo ? 0 : amount;\r\n        bidder.timestamp = block.timestamp;\r\n        bidder.isUsdo = isUsdo;\r\n        bidder.swapOnExecute = isUsdo && lqAssetId != penrose.usdoAssetId();\r\n\r\n        bidPools[pool].users[user] = bidder;\r\n\r\n        emit Bid(\r\n            msg.sender,\r\n            user,\r\n            pool,\r\n            isUsdo ? amount : 0, //USD0 amount\r\n            isUsdo ? 0 : amount, //liquidated asset amount\r\n            block.timestamp\r\n        );\r\n\r\n        // Clean the userBidIndex.\r\n        uint256[] storage bidIndexes = userBidIndexes[user][pool];\r\n        uint256 bidIndexesLen = bidIndexes.length;\r\n        OrderBookPoolInfo memory poolInfo = orderBookInfos[pool];\r\n        for (uint256 i = 0; i < bidIndexesLen; ) {\r\n            if (bidIndexes[i] >= poolInfo.nextBidPull) {\r\n                bidIndexesLen = bidIndexes.length;\r\n                bidIndexes[i] = bidIndexes[bidIndexesLen - 1];\r\n                bidIndexes.pop();\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Called with `init`, setup the initial pool info values.\r\n    /// @param pool The targeted pool.\r\n    function _initOrderBookPoolInfo(uint256 pool) internal {\r\n        OrderBookPoolInfo memory poolInfo;\r\n        poolInfo.poolId = uint32(pool);\r\n        orderBookInfos[pool] = poolInfo;\r\n    }\r\n\r\n    /// @notice Get the discount gained from a bid in a `poolId` given a `amount`.\r\n    /// @param amount The amount of collateral to get the discount from.\r\n    /// @param poolId The targeted pool.\r\n    /// @param mode 0 subtract - 1 add.\r\n    function _getPremiumAmount(\r\n        uint256 amount,\r\n        uint256 poolId,\r\n        MODE mode\r\n    ) internal pure returns (uint256) {\r\n        uint256 premium = (amount * poolId * PREMIUM_FACTOR) /\r\n            PREMIUM_FACTOR_PRECISION;\r\n        return mode == MODE.ADD ? amount + premium : amount - premium;\r\n    }\r\n\r\n    /// @notice Convert a bid amount to a collateral amount.\r\n    /// @param amount The amount of bid to convert.\r\n    /// @param exchangeRate The exchange rate to use.\r\n    function _bidToCollateral(uint256 amount, uint256 exchangeRate)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (amount * exchangeRate) / EXCHANGE_RATE_PRECISION;\r\n    }\r\n\r\n    /// @notice Convert a collateral amount to a bid amount.\r\n    /// @param collateralAmount The amount of collateral to convert.\r\n    /// @param exchangeRate The exchange rate to use.\r\n    function _collateralToBid(uint256 collateralAmount, uint256 exchangeRate)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        return (collateralAmount * EXCHANGE_RATE_PRECISION) / exchangeRate;\r\n    }\r\n}\r\n"
    },
    "contracts/MarketsHelper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport '@boringcrypto/boring-solidity/contracts/ERC20.sol';\r\nimport '@boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol';\r\n\r\nimport './interfaces/IMarket.sol';\r\nimport './interfaces/IOracle.sol';\r\nimport './usd0/interfaces/IBigBang.sol';\r\nimport './singularity/interfaces/ISingularity.sol';\r\nimport '../yieldbox/contracts/YieldBox.sol';\r\n\r\n/// @title Useful helper functions for `Singularity` and `BingBang`\r\ncontract MarketsHelper {\r\n    using RebaseLibrary for Rebase;\r\n\r\n    struct MarketInfo {\r\n        address collateral;\r\n        uint256 collateralId;\r\n        address asset;\r\n        uint256 assetId;\r\n        IOracle oracle;\r\n        bytes oracleData;\r\n        uint256 totalCollateralShare;\r\n        uint256 userCollateralShare;\r\n        Rebase totalBorrow;\r\n        uint256 userBorrowPart;\r\n        uint256 currentExchangeRate;\r\n        uint256 spotExchangeRate;\r\n        uint256 oracleExchangeRate;\r\n        uint256 totalBorrowCap;\r\n    }\r\n    struct SingularityInfo {\r\n        MarketInfo market;\r\n        Rebase totalAsset;\r\n        uint256 userAssetFraction;\r\n        ISingularity.AccrueInfo accrueInfo;\r\n    }\r\n    struct BigBangInfo {\r\n        MarketInfo market;\r\n        IBigBang.AccrueInfo accrueInfo;\r\n    }\r\n\r\n    function singularityMarketInfo(address who, ISingularity[] memory markets)\r\n        external\r\n        view\r\n        returns (SingularityInfo[] memory)\r\n    {\r\n        uint256 len = markets.length;\r\n        SingularityInfo[] memory result = new SingularityInfo[](len);\r\n\r\n        Rebase memory _totalAsset;\r\n        ISingularity.AccrueInfo memory _accrueInfo;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            ISingularity sgl = markets[i];\r\n\r\n            result[i].market = _commonInfo(who, IMarket(address(sgl)));\r\n\r\n            (uint128 totalAssetElastic, uint128 totalAssetBase) = sgl //\r\n                .totalAsset(); //\r\n            _totalAsset = Rebase(totalAssetElastic, totalAssetBase); //\r\n            result[i].totalAsset = _totalAsset; //\r\n            result[i].userAssetFraction = sgl.balanceOf(who); //\r\n\r\n            (\r\n                uint64 interestPerSecond,\r\n                uint64 lastBlockAccrued,\r\n                uint128 feesEarnedFraction\r\n            ) = sgl.accrueInfo();\r\n            _accrueInfo = ISingularity.AccrueInfo(\r\n                interestPerSecond,\r\n                lastBlockAccrued,\r\n                feesEarnedFraction\r\n            );\r\n            result[i].accrueInfo = _accrueInfo;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function bigBangMarketInfo(address who, IBigBang[] memory markets)\r\n        external\r\n        view\r\n        returns (BigBangInfo[] memory)\r\n    {\r\n        uint256 len = markets.length;\r\n        BigBangInfo[] memory result = new BigBangInfo[](len);\r\n\r\n        IBigBang.AccrueInfo memory _accrueInfo;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            IBigBang bigBang = markets[i];\r\n            result[i].market = _commonInfo(who, IMarket(address(bigBang)));\r\n\r\n            (uint64 debtRate, uint64 lastAccrued) = bigBang.accrueInfo();\r\n            _accrueInfo = IBigBang.AccrueInfo(debtRate, lastAccrued);\r\n            result[i].accrueInfo = _accrueInfo;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /// @notice Calculate the collateral amount off the shares.\r\n    /// @param market the Singularity or BigBang address\r\n    /// @param share The shares.\r\n    /// @return amount The amount.\r\n    function getCollateralAmountForShare(IMarket market, uint256 share)\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        IYieldBox yieldBox = IYieldBox(market.yieldBox());\r\n        return yieldBox.toAmount(market.collateralId(), share, false);\r\n    }\r\n\r\n    /// @notice Calculate the collateral shares that are needed for `borrowPart`,\r\n    /// taking the current exchange rate into account.\r\n    /// @param market the Singularity or BigBang address\r\n    /// @param borrowPart The borrow part.\r\n    /// @return collateralShares The collateral shares.\r\n    function getCollateralSharesForBorrowPart(\r\n        IMarket market,\r\n        uint256 borrowPart,\r\n        uint256 liquidationMultiplierPrecision,\r\n        uint256 exchangeRatePrecision\r\n    ) public view returns (uint256 collateralShares) {\r\n        Rebase memory _totalBorrowed;\r\n        (uint128 totalBorrowElastic, uint128 totalBorrowBase) = market\r\n            .totalBorrow();\r\n        _totalBorrowed = Rebase(totalBorrowElastic, totalBorrowBase);\r\n\r\n        IYieldBox yieldBox = IYieldBox(market.yieldBox());\r\n        uint256 borrowAmount = _totalBorrowed.toElastic(borrowPart, false);\r\n        return\r\n            yieldBox.toShare(\r\n                market.collateralId(),\r\n                (borrowAmount *\r\n                    market.liquidationMultiplier() *\r\n                    market.exchangeRate()) /\r\n                    (liquidationMultiplierPrecision * exchangeRatePrecision),\r\n                false\r\n            );\r\n    }\r\n\r\n    /// @notice Return the equivalent of borrow part in asset amount.\r\n    /// @param market the Singularity or BigBang address\r\n    /// @param borrowPart The amount of borrow part to convert.\r\n    /// @return amount The equivalent of borrow part in asset amount.\r\n    function getAmountForBorrowPart(IMarket market, uint256 borrowPart)\r\n        public\r\n        view\r\n        returns (uint256 amount)\r\n    {\r\n        Rebase memory _totalBorrowed;\r\n        (uint128 totalBorrowElastic, uint128 totalBorrowBase) = market\r\n            .totalBorrow();\r\n        _totalBorrowed = Rebase(totalBorrowElastic, totalBorrowBase);\r\n\r\n        return _totalBorrowed.toElastic(borrowPart, false);\r\n    }\r\n\r\n    /// @notice Compute the amount of `singularity.assetId` from `fraction`\r\n    /// `fraction` can be `singularity.accrueInfo.feeFraction` or `singularity.balanceOf`\r\n    /// @param singularity the singularity address\r\n    /// @param fraction The fraction.\r\n    /// @return amount The amount.\r\n    function getAmountForAssetFraction(\r\n        ISingularity singularity,\r\n        uint256 fraction\r\n    ) public view returns (uint256 amount) {\r\n        (uint128 totalAssetElastic, uint128 totalAssetBase) = singularity\r\n            .totalAsset();\r\n\r\n        IYieldBox yieldBox = IYieldBox(singularity.yieldBox());\r\n        return\r\n            yieldBox.toAmount(\r\n                singularity.assetId(),\r\n                (fraction * totalAssetElastic) / totalAssetBase,\r\n                false\r\n            );\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n\r\n    /// @notice deposts collateral to YieldBox, adds collateral to Singularity, borrows and can withdraw to personal address\r\n    /// @param market the Singularity or BigBang address\r\n    /// @param _collateralAmount the collateral amount to add\r\n    /// @param _borrowAmount the amount to borrow\r\n    /// @param deposit_ if true, deposits to YieldBox from `msg.sender`\r\n    /// @param withdraw_ if true, withdraws from YieldBox to `msg.sender`\r\n    /// @param _withdrawData custom withdraw data; ignore if you need to withdraw on the same chain\r\n    function depositAddCollateralAndBorrow(\r\n        IMarket market,\r\n        uint256 _collateralAmount,\r\n        uint256 _borrowAmount,\r\n        bool deposit_,\r\n        bool withdraw_,\r\n        bytes calldata _withdrawData\r\n    ) external payable {\r\n        YieldBox yieldBox = YieldBox(market.yieldBox());\r\n\r\n        uint256 collateralId = market.collateralId();\r\n\r\n        (, address collateralAddress, , ) = yieldBox.assets(collateralId);\r\n\r\n        //deposit into the yieldbox\r\n        uint256 _share = yieldBox.toShare(\r\n            collateralId,\r\n            _collateralAmount,\r\n            false\r\n        );\r\n        if (deposit_) {\r\n            _extractTokens(collateralAddress, _collateralAmount);\r\n            IERC20(collateralAddress).approve(\r\n                address(yieldBox),\r\n                _collateralAmount\r\n            );\r\n            yieldBox.depositAsset(\r\n                collateralId,\r\n                address(this),\r\n                address(this),\r\n                0,\r\n                _share\r\n            );\r\n        }\r\n\r\n        //add collateral\r\n        _setApprovalForYieldBox(market, yieldBox);\r\n        market.addCollateral(\r\n            deposit_ ? address(this) : msg.sender,\r\n            msg.sender,\r\n            false,\r\n            _share\r\n        );\r\n\r\n        //borrow\r\n        address borrowReceiver = withdraw_ ? address(this) : msg.sender;\r\n        market.borrow(msg.sender, borrowReceiver, _borrowAmount);\r\n\r\n        if (withdraw_) {\r\n            _withdraw(\r\n                borrowReceiver,\r\n                _withdrawData,\r\n                market,\r\n                yieldBox,\r\n                _borrowAmount,\r\n                0,\r\n                false\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice deposits to YieldBox and repays borrowed amount\r\n    /// @param market the Singularity or BigBang address\r\n    /// @param _depositAmount the amount to deposit\r\n    /// @param _repayAmount the amount to be repayed\r\n    function depositAndRepay(\r\n        IMarket market,\r\n        uint256 _depositAmount,\r\n        uint256 _repayAmount,\r\n        bool deposit_\r\n    ) public {\r\n        uint256 assetId = market.assetId();\r\n        YieldBox yieldBox = YieldBox(market.yieldBox());\r\n\r\n        (, address assetAddress, , ) = yieldBox.assets(assetId);\r\n\r\n        //deposit into the yieldbox\r\n        if (deposit_) {\r\n            _extractTokens(assetAddress, _depositAmount);\r\n            IERC20(assetAddress).approve(address(yieldBox), _depositAmount);\r\n            yieldBox.depositAsset(\r\n                assetId,\r\n                address(this),\r\n                address(this),\r\n                _depositAmount,\r\n                0\r\n            );\r\n        }\r\n\r\n        //repay\r\n        _setApprovalForYieldBox(market, yieldBox);\r\n        market.repay(\r\n            deposit_ ? address(this) : msg.sender,\r\n            msg.sender,\r\n            false,\r\n            _repayAmount\r\n        );\r\n    }\r\n\r\n    /// @notice deposits to YieldBox, repays borrowed amount and removes collateral\r\n    /// @param market the Singularity or BigBang address\r\n    /// @param _depositAmount the amount to deposit\r\n    /// @param _repayAmount the amount to be repayed\r\n    /// @param _collateralAmount collateral amount to be removed\r\n    /// @param deposit_ if true deposits to YieldBox\r\n    /// @param withdraw_ if true withdraws to sender address\r\n    function depositRepayAndRemoveCollateral(\r\n        IMarket market,\r\n        uint256 _depositAmount,\r\n        uint256 _repayAmount,\r\n        uint256 _collateralAmount,\r\n        bool deposit_,\r\n        bool withdraw_\r\n    ) external {\r\n        YieldBox yieldBox = YieldBox(market.yieldBox());\r\n\r\n        depositAndRepay(market, _depositAmount, _repayAmount, deposit_);\r\n\r\n        //remove collateral\r\n        address receiver = withdraw_ ? address(this) : msg.sender;\r\n        uint256 collateralShare = yieldBox.toShare(\r\n            market.collateralId(),\r\n            _collateralAmount,\r\n            false\r\n        );\r\n        market.removeCollateral(msg.sender, receiver, collateralShare);\r\n\r\n        //withdraw\r\n        if (withdraw_) {\r\n            yieldBox.withdraw(\r\n                market.collateralId(),\r\n                address(this),\r\n                msg.sender,\r\n                _collateralAmount,\r\n                0\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice deposits asset to YieldBox and lends it to Singularity\r\n    /// @param singularity the singularity address\r\n    /// @param _amount the amount to lend\r\n    function depositAndAddAsset(\r\n        ISingularity singularity,\r\n        uint256 _amount,\r\n        bool deposit_\r\n    ) external {\r\n        uint256 assetId = singularity.assetId();\r\n        YieldBox yieldBox = YieldBox(singularity.yieldBox());\r\n\r\n        (, address assetAddress, , ) = yieldBox.assets(assetId);\r\n\r\n        uint256 _share = yieldBox.toShare(assetId, _amount, false);\r\n        if (deposit_) {\r\n            //deposit into the yieldbox\r\n            _extractTokens(assetAddress, _amount);\r\n            IERC20(assetAddress).approve(address(yieldBox), _amount);\r\n            yieldBox.depositAsset(\r\n                assetId,\r\n                address(this),\r\n                address(this),\r\n                0,\r\n                _share\r\n            );\r\n        }\r\n\r\n        //add asset\r\n        _setApprovalForYieldBox(singularity, yieldBox);\r\n        singularity.addAsset(address(this), msg.sender, false, _share);\r\n    }\r\n\r\n    /// @notice deposits asset to YieldBox, mints USD0 and lends it to Singularity\r\n    /// @param singularity the Singularity address\r\n    /// @param bingBang the BingBang address\r\n    /// @param _collateralAmount the amount added to BingBang as collateral\r\n    /// @param _borrowAmount the borrowed amount from BingBang\r\n    /// @param deposit_ if true deposits to YieldBox\r\n    function mintAndLend(\r\n        ISingularity singularity,\r\n        IMarket bingBang,\r\n        uint256 _collateralAmount,\r\n        uint256 _borrowAmount,\r\n        bool deposit_\r\n    ) external {\r\n        uint256 collateralId = bingBang.collateralId();\r\n        YieldBox yieldBox = YieldBox(singularity.yieldBox());\r\n\r\n        (, address collateralAddress, , ) = yieldBox.assets(collateralId);\r\n        uint256 _share = yieldBox.toShare(\r\n            collateralId,\r\n            _collateralAmount,\r\n            false\r\n        );\r\n\r\n        if (deposit_) {\r\n            //deposit to YieldBox\r\n            _extractTokens(collateralAddress, _collateralAmount);\r\n            IERC20(collateralAddress).approve(\r\n                address(yieldBox),\r\n                _collateralAmount\r\n            );\r\n            yieldBox.depositAsset(\r\n                collateralId,\r\n                address(this),\r\n                address(this),\r\n                0,\r\n                _share\r\n            );\r\n        }\r\n\r\n        if (_collateralAmount > 0) {\r\n            //add collateral to BingBang\r\n            _setApprovalForYieldBox(bingBang, yieldBox);\r\n            bingBang.addCollateral(address(this), msg.sender, false, _share);\r\n        }\r\n\r\n        //borrow from BingBang\r\n        bingBang.borrow(msg.sender, msg.sender, _borrowAmount);\r\n\r\n        //lend to Singularity\r\n        uint256 assetId = singularity.assetId();\r\n        uint256 borrowShare = yieldBox.toShare(assetId, _borrowAmount, false);\r\n        _setApprovalForYieldBox(singularity, yieldBox);\r\n        singularity.addAsset(msg.sender, msg.sender, false, borrowShare);\r\n    }\r\n\r\n    function removeAssetAndRepay(\r\n        ISingularity singularity,\r\n        IMarket bingBang,\r\n        uint256 _removeShare, //slightly greater than _repayAmount to cover the interest\r\n        uint256 _repayAmount,\r\n        uint256 _collateralShare,\r\n        bool withdraw_,\r\n        bytes calldata withdrawData_\r\n    ) external {\r\n        YieldBox yieldBox = YieldBox(singularity.yieldBox());\r\n\r\n        //remove asset\r\n        uint256 bbAssetId = bingBang.assetId();\r\n        uint256 _removeAmount = yieldBox.toAmount(\r\n            bbAssetId,\r\n            _removeShare,\r\n            false\r\n        );\r\n        singularity.removeAsset(msg.sender, address(this), _removeShare);\r\n\r\n        //repay\r\n        uint256 repayed = bingBang.repay(\r\n            address(this),\r\n            msg.sender,\r\n            false,\r\n            _repayAmount\r\n        );\r\n        if (repayed < _removeAmount) {\r\n            yieldBox.transfer(\r\n                address(this),\r\n                msg.sender,\r\n                bbAssetId,\r\n                yieldBox.toShare(bbAssetId, _removeAmount - repayed, false)\r\n            );\r\n        }\r\n\r\n        //remove collateral\r\n        bingBang.removeCollateral(\r\n            msg.sender,\r\n            withdraw_ ? address(this) : msg.sender,\r\n            _collateralShare\r\n        );\r\n\r\n        //withdraw\r\n        if (withdraw_) {\r\n            _withdraw(\r\n                address(this),\r\n                withdrawData_,\r\n                singularity,\r\n                yieldBox,\r\n                0,\r\n                _collateralShare,\r\n                true\r\n            );\r\n        }\r\n    }\r\n\r\n    // ************************** //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    function _commonInfo(address who, IMarket market)\r\n        private\r\n        view\r\n        returns (MarketInfo memory)\r\n    {\r\n        Rebase memory _totalBorrowed;\r\n        MarketInfo memory info;\r\n\r\n        info.collateral = market.collateral();\r\n        info.asset = market.asset();\r\n        info.oracle = market.oracle();\r\n        info.oracleData = market.oracleData();\r\n        info.totalCollateralShare = market.totalCollateralShare();\r\n        info.userCollateralShare = market.userCollateralShare(who);\r\n\r\n        (uint128 totalBorrowElastic, uint128 totalBorrowBase) = market\r\n            .totalBorrow();\r\n        _totalBorrowed = Rebase(totalBorrowElastic, totalBorrowBase);\r\n        info.totalBorrow = _totalBorrowed;\r\n        info.userBorrowPart = market.userBorrowPart(who);\r\n\r\n        info.currentExchangeRate = market.exchangeRate();\r\n        (, info.oracleExchangeRate) = market.oracle().peek(market.oracleData());\r\n        info.spotExchangeRate = market.oracle().peekSpot(market.oracleData());\r\n        info.totalBorrowCap = market.totalBorrowCap();\r\n        info.assetId = market.assetId();\r\n        info.collateralId = market.collateralId();\r\n        return info;\r\n    }\r\n\r\n    function _withdraw(\r\n        address _from,\r\n        bytes calldata _withdrawData,\r\n        IMarket market,\r\n        YieldBox yieldBox,\r\n        uint256 _amount,\r\n        uint256 _share,\r\n        bool _withdrawCollateral\r\n    ) private {\r\n        bool _otherChain;\r\n        uint16 _destChain;\r\n        bytes32 _receiver;\r\n        bytes memory _adapterParams;\r\n        if (_withdrawData.length > 0) {\r\n            (_otherChain, _destChain, _receiver, _adapterParams) = abi.decode(\r\n                _withdrawData,\r\n                (bool, uint16, bytes32, bytes)\r\n            );\r\n        }\r\n        if (!_otherChain) {\r\n            yieldBox.withdraw(\r\n                _withdrawCollateral ? market.collateralId() : market.assetId(),\r\n                address(this),\r\n                msg.sender,\r\n                _amount,\r\n                _share\r\n            );\r\n            return;\r\n        }\r\n\r\n        market.withdrawTo{value: msg.value}(\r\n            _from,\r\n            _destChain,\r\n            _receiver,\r\n            _amount,\r\n            _adapterParams,\r\n            payable(msg.sender)\r\n        );\r\n    }\r\n\r\n    function _setApprovalForYieldBox(IMarket market, YieldBox yieldBox)\r\n        private\r\n    {\r\n        bool isApproved = yieldBox.isApprovedForAll(\r\n            address(this),\r\n            address(market)\r\n        );\r\n        if (!isApproved) {\r\n            yieldBox.setApprovalForAll(address(market), true);\r\n        }\r\n        isApproved = yieldBox.isApprovedForAll(address(this), address(market));\r\n    }\r\n\r\n    function _extractTokens(address _token, uint256 _amount) private {\r\n        require(\r\n            ERC20(_token).transferFrom(msg.sender, address(this), _amount),\r\n            'transfer failed'\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/mocks/tests/VulnMultiSwapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport '../../Penrose.sol';\r\n\r\ncontract VulnMultiSwapper {\r\n    function counterfeitSwap(\r\n        Penrose penrose,\r\n        uint256 assetId,\r\n        address target\r\n    ) public {\r\n        penrose.yieldBox().withdraw(\r\n            assetId,\r\n            target,\r\n            msg.sender,\r\n            penrose.yieldBox().amountOf(target, assetId),\r\n            0\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/Penrose.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport '@boringcrypto/boring-solidity/contracts/BoringOwnable.sol';\r\nimport '@boringcrypto/boring-solidity/contracts/BoringFactory.sol';\r\n\r\nimport '../yieldbox/contracts/YieldBox.sol';\r\nimport '../yieldbox/contracts/interfaces/IYieldBox.sol';\r\nimport '../yieldbox/contracts/strategies/ERC20WithoutStrategy.sol';\r\nimport './singularity/interfaces/ISingularity.sol';\r\nimport './interfaces/IPenrose.sol';\r\n\r\n\r\n// TODO: Permissionless market deployment\r\n///     + asset registration? (toggle to renounce ownership so users can call)\r\n/// @title Global market registry\r\n/// @notice Singularity management\r\ncontract Penrose is BoringOwnable, BoringFactory {\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n    /// @notice returns the Conservator address\r\n    address public conservator;\r\n    /// @notice returns the pause state of the contract\r\n    bool public paused;\r\n\r\n    /// @notice returns the YieldBox contract\r\n    YieldBox public immutable yieldBox;\r\n\r\n    /// @notice returns the TAP contract\r\n    IERC20 public immutable tapToken;\r\n    /// @notice returns TAP asset id registered in the YieldBox contract\r\n    uint256 public immutable tapAssetId;\r\n\r\n    /// @notice returns USD0 contract\r\n    IUSD0 public usdoToken;\r\n\r\n    /// @notice returns USD0 asset id registered in the YieldBox contract\r\n    uint256 public usdoAssetId;\r\n\r\n    /// @notice returns the WETH contract\r\n    IERC20 public immutable wethToken;\r\n\r\n    /// @notice returns WETH asset id registered in the YieldBox contract\r\n    uint256 public immutable wethAssetId;\r\n\r\n    /// @notice master contracts registered\r\n    IPenrose.MasterContract[] public singularityMasterContracts;\r\n    IPenrose.MasterContract[] public bigbangMasterContracts;\r\n\r\n    // Used to check if a master contract is registered\r\n    mapping(address => bool) isSingularityMasterContractRegistered;\r\n    mapping(address => bool) isBigBangMasterContractRegistered;\r\n\r\n    /// @notice protocol fees\r\n    address public feeTo;\r\n\r\n    /// @notice whitelisted swappers\r\n    mapping(ISwapper => bool) public swappers;\r\n\r\n    address public bigBangEthMarket;\r\n    uint256 public bigBangEthDebtRate;\r\n\r\n    mapping(address => IStrategy) public emptyStrategies;\r\n\r\n    /// @notice creates a Penrose contract\r\n    /// @param _yieldBox YieldBox contract address\r\n    /// @param tapToken_ TapOFT contract address\r\n    constructor(\r\n        YieldBox _yieldBox,\r\n        IERC20 tapToken_,\r\n        IERC20 wethToken_\r\n    ) {\r\n        yieldBox = _yieldBox;\r\n        tapToken = tapToken_;\r\n        emptyStrategies[address(tapToken_)] = IStrategy(\r\n            address(\r\n                new ERC20WithoutStrategy(\r\n                    IYieldBox(address(_yieldBox)),\r\n                    tapToken_\r\n                )\r\n            )\r\n        );\r\n        tapAssetId = uint96(\r\n            _yieldBox.registerAsset(\r\n                TokenType.ERC20,\r\n                address(tapToken_),\r\n                emptyStrategies[address(tapToken_)],\r\n                0\r\n            )\r\n        );\r\n\r\n        wethToken = wethToken_;\r\n        emptyStrategies[address(wethToken_)] = IStrategy(\r\n            address(\r\n                new ERC20WithoutStrategy(\r\n                    IYieldBox(address(_yieldBox)),\r\n                    wethToken_\r\n                )\r\n            )\r\n        );\r\n        wethAssetId = uint96(\r\n            _yieldBox.registerAsset(\r\n                TokenType.ERC20,\r\n                address(wethToken_),\r\n                emptyStrategies[address(wethToken_)],\r\n                0\r\n            )\r\n        );\r\n\r\n        bigBangEthDebtRate = 5e15;\r\n    }\r\n\r\n    // **************//\r\n    // *** EVENTS *** //\r\n    // ************** //\r\n    event ProtocolWithdrawal(IFee[] markets, uint256 timestamp);\r\n    event RegisterSingularityMasterContract(\r\n        address location,\r\n        IPenrose.ContractType risk\r\n    );\r\n    event RegisterBigBangMasterContract(\r\n        address location,\r\n        IPenrose.ContractType risk\r\n    );\r\n    event RegisterSingularity(address location, address masterContract);\r\n    event RegisterBigBang(address location, address masterContract);\r\n    event FeeToUpdate(address newFeeTo);\r\n    event FeeVeTapUpdate(address newFeeVeTap);\r\n    event SwapperUpdate(address swapper, bool isRegistered);\r\n    event UsdoTokenUpdated(address indexed usdoToken, uint256 assetId);\r\n    event ConservatorUpdated(address indexed old, address indexed _new);\r\n    event PausedUpdated(bool oldState, bool newState);\r\n    event BigBangEthMarketSet(address indexed _newAddress);\r\n    event BigBangEthMarketDebtRate(uint256 _rate);\r\n\r\n    // ******************//\r\n    // *** MODIFIERS *** //\r\n    // ***************** //\r\n    modifier registeredSingularityMasterContract(address mc) {\r\n        require(\r\n            isSingularityMasterContractRegistered[mc] == true,\r\n            'Penrose: MC not registered'\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier registeredBigBangMasterContract(address mc) {\r\n        require(\r\n            isBigBangMasterContractRegistered[mc] == true,\r\n            'Penrose: MC not registered'\r\n        );\r\n        _;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(!paused, 'Penrose: paused');\r\n        _;\r\n    }\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n\r\n    /// @notice Get all the Singularity contract addresses\r\n    /// @return markets list of available markets\r\n    function singularityMarkets()\r\n        public\r\n        view\r\n        returns (address[] memory markets)\r\n    {\r\n        markets = _getMasterContractLength(singularityMasterContracts);\r\n    }\r\n\r\n    /// @notice Get all the BigBang contract addresses\r\n    /// @return markets list of available markets\r\n    function bigBangMarkets() public view returns (address[] memory markets) {\r\n        markets = _getMasterContractLength(bigbangMasterContracts);\r\n    }\r\n\r\n    /// @notice Get the length of `singularityMasterContracts`\r\n    function singularityMasterContractLength() public view returns (uint256) {\r\n        return singularityMasterContracts.length;\r\n    }\r\n\r\n    /// @notice Get the length of `bigbangMasterContracts`\r\n    function bigBangMasterContractLength() public view returns (uint256) {\r\n        return bigbangMasterContracts.length;\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n\r\n    /// @notice Loop through the master contracts and call `depositFeesToYieldBox()` to each one of their clones.\r\n    /// @dev `swappers_` can have one element that'll be used for all clones. Or one swapper per MasterContract.\r\n    /// @dev Fees are withdrawn in TAP and sent to the FeeDistributor contract\r\n    /// @param swappers_ One or more swappers to convert the asset to TAP.\r\n    function withdrawAllSingularityFees(\r\n        IFee[] calldata markets_,\r\n        ISwapper[] calldata swappers_,\r\n        IPenrose.SwapData[] calldata swapData_\r\n    ) public notPaused {\r\n        require(\r\n            markets_.length == swappers_.length &&\r\n                swappers_.length == swapData_.length,\r\n            'Penrose: length mismatch'\r\n        );\r\n        require(address(swappers_[0]) != address(0), 'Penrose: zero address');\r\n        require(address(markets_[0]) != address(0), 'Penrose: zero address');\r\n\r\n        _withdrawAllProtocolFees(swappers_, swapData_, markets_);\r\n        emit ProtocolWithdrawal(markets_, block.timestamp);\r\n    }\r\n\r\n    /// @notice Loop through the master contracts and call `depositFeesToYieldBox()` to each one of their clones.\r\n    /// @dev `swappers_` can have one element that'll be used for all clones. Or one swapper per MasterContract.\r\n    /// @dev Fees are withdrawn in TAP and sent to the FeeDistributor contract\r\n    /// @param swappers_ One or more swappers to convert the asset to TAP.\r\n    function withdrawAllBigBangFees(\r\n        IFee[] calldata markets_,\r\n        ISwapper[] calldata swappers_,\r\n        IPenrose.SwapData[] calldata swapData_\r\n    ) public notPaused {\r\n        require(\r\n            markets_.length == swappers_.length &&\r\n                swappers_.length == swapData_.length,\r\n            'Penrose: length mismatch'\r\n        );\r\n        require(address(swappers_[0]) != address(0), 'Penrose: zero address');\r\n\r\n        _withdrawAllProtocolFees(swappers_, swapData_, markets_);\r\n        emit ProtocolWithdrawal(markets_, block.timestamp);\r\n    }\r\n\r\n    // *********************** //\r\n    // *** OWNER FUNCTIONS *** //\r\n    // *********************** //\r\n    /// @notice sets the main BigBang market debt rate\r\n    /// @param _rate the new rate\r\n    function setBigBangEthMarketDebtRate(uint256 _rate) external onlyOwner {\r\n        bigBangEthDebtRate = _rate;\r\n        emit BigBangEthMarketDebtRate(_rate);\r\n    }\r\n\r\n    /// @notice sets the main BigBang market\r\n    /// @dev needed for the variable debt computation\r\n    function setBigBangEthMarket(address _market) external onlyOwner {\r\n        bigBangEthMarket = _market;\r\n        emit BigBangEthMarketSet(_market);\r\n    }\r\n\r\n    /// @notice updates the pause state of the contract\r\n    /// @param val the new value\r\n    function updatePause(bool val) external {\r\n        require(msg.sender == conservator, 'Penrose: unauthorized');\r\n        require(val != paused, 'Penrose: same state');\r\n        emit PausedUpdated(paused, val);\r\n        paused = val;\r\n    }\r\n\r\n    /// @notice Set the Conservator address\r\n    /// @dev Conservator can pause the contract\r\n    /// @param _conservator The new address\r\n    function setConservator(address _conservator) external onlyOwner {\r\n        require(_conservator != address(0), 'Penrose: address not valid');\r\n        emit ConservatorUpdated(conservator, _conservator);\r\n        conservator = _conservator;\r\n    }\r\n\r\n    /// @notice Set the USD0 token\r\n    /// @dev sets usdoToken and usdoAssetId\r\n    /// @param _usdoToken the USD0 token address\r\n    function setUsdoToken(address _usdoToken) external onlyOwner {\r\n        usdoToken = IUSD0(_usdoToken);\r\n\r\n        emptyStrategies[_usdoToken] = IStrategy(\r\n            address(\r\n                new ERC20WithoutStrategy(\r\n                    IYieldBox(address(yieldBox)),\r\n                    IERC20(_usdoToken)\r\n                )\r\n            )\r\n        );\r\n        usdoAssetId = uint96(\r\n            yieldBox.registerAsset(\r\n                TokenType.ERC20,\r\n                _usdoToken,\r\n                emptyStrategies[_usdoToken],\r\n                0\r\n            )\r\n        );\r\n        emit UsdoTokenUpdated(_usdoToken, usdoAssetId);\r\n    }\r\n\r\n    /// @notice Register a Singularity master contract\r\n    /// @param mcAddress The address of the contract\r\n    /// @param contractType_ The risk type of the contract\r\n    function registerSingularityMasterContract(\r\n        address mcAddress,\r\n        IPenrose.ContractType contractType_\r\n    ) external onlyOwner {\r\n        require(\r\n            isSingularityMasterContractRegistered[mcAddress] == false,\r\n            'Penrose: MC registered'\r\n        );\r\n\r\n        IPenrose.MasterContract memory mc;\r\n        mc.location = mcAddress;\r\n        mc.risk = contractType_;\r\n        singularityMasterContracts.push(mc);\r\n        isSingularityMasterContractRegistered[mcAddress] = true;\r\n\r\n        emit RegisterSingularityMasterContract(mcAddress, contractType_);\r\n    }\r\n\r\n    /// @notice Register a BigBang master contract\r\n    /// @param mcAddress The address of the contract\r\n    /// @param contractType_ The risk type of the contract\r\n    function registerBigBangMasterContract(\r\n        address mcAddress,\r\n        IPenrose.ContractType contractType_\r\n    ) external onlyOwner {\r\n        require(\r\n            isBigBangMasterContractRegistered[mcAddress] == false,\r\n            'Penrose: MC registered'\r\n        );\r\n\r\n        IPenrose.MasterContract memory mc;\r\n        mc.location = mcAddress;\r\n        mc.risk = contractType_;\r\n        bigbangMasterContracts.push(mc);\r\n        isBigBangMasterContractRegistered[mcAddress] = true;\r\n\r\n        emit RegisterBigBangMasterContract(mcAddress, contractType_);\r\n    }\r\n\r\n    /// @notice Registers a Singularity market\r\n    /// @param mc The address of the master contract which must be already registered\r\n    /// @param data The init data of the Singularity\r\n    /// @param useCreate2 Whether to use create2 or not\r\n    function registerSingularity(\r\n        address mc,\r\n        bytes calldata data,\r\n        bool useCreate2\r\n    )\r\n        external\r\n        payable\r\n        onlyOwner\r\n        registeredSingularityMasterContract(mc)\r\n        returns (address _contract)\r\n    {\r\n        _contract = deploy(mc, data, useCreate2);\r\n        emit RegisterSingularity(_contract, mc);\r\n    }\r\n\r\n    /// @notice Registers a BigBang market\r\n    /// @param mc The address of the master contract which must be already registered\r\n    /// @param data The init data of the BigBang contract\r\n    /// @param useCreate2 Whether to use create2 or not\r\n    function registerBigBang(\r\n        address mc,\r\n        bytes calldata data,\r\n        bool useCreate2\r\n    )\r\n        external\r\n        payable\r\n        onlyOwner\r\n        registeredBigBangMasterContract(mc)\r\n        returns (address _contract)\r\n    {\r\n        _contract = deploy(mc, data, useCreate2);\r\n        emit RegisterBigBang(_contract, mc);\r\n    }\r\n\r\n    /// @notice Execute an only owner function inside of a Singularity or a BigBang market\r\n    function executeMarketFn(\r\n        address[] calldata mc,\r\n        bytes[] memory data,\r\n        bool forceSuccess\r\n    )\r\n        external\r\n        onlyOwner\r\n        notPaused\r\n        returns (bool[] memory success, bytes[] memory result)\r\n    {\r\n        uint256 len = mc.length;\r\n        success = new bool[](len);\r\n        result = new bytes[](len);\r\n        for (uint256 i = 0; i < len; ) {\r\n            require(\r\n                isSingularityMasterContractRegistered[\r\n                    masterContractOf[mc[i]]\r\n                ] || isBigBangMasterContractRegistered[masterContractOf[mc[i]]],\r\n                'Penrose: MC not registered'\r\n            );\r\n            (success[i], result[i]) = mc[i].call(data[i]);\r\n            if (forceSuccess) {\r\n                require(success[i], _getRevertMsg(result[i]));\r\n            }\r\n            ++i;\r\n        }\r\n    }\r\n\r\n    /// @notice Set protocol fees address\r\n    function setFeeTo(address feeTo_) external onlyOwner {\r\n        feeTo = feeTo_;\r\n        emit FeeToUpdate(feeTo_);\r\n    }\r\n\r\n    /// @notice Used to register and enable or disable swapper contracts used in closed liquidations.\r\n    /// MasterContract Only Admin function.\r\n    /// @param swapper The address of the swapper contract that conforms to `ISwapper`.\r\n    /// @param enable True to enable the swapper. To disable use False.\r\n    function setSwapper(ISwapper swapper, bool enable) external onlyOwner {\r\n        swappers[swapper] = enable;\r\n        emit SwapperUpdate(address(swapper), enable);\r\n    }\r\n\r\n    // ************************* //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    function _getRevertMsg(bytes memory _returnData)\r\n        private\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return 'SGL: no return data';\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }\r\n\r\n    function _withdrawAllProtocolFees(\r\n        ISwapper[] calldata swappers_,\r\n        IPenrose.SwapData[] calldata swapData_,\r\n        IFee[] memory markets_\r\n    ) private {\r\n        uint256 length = markets_.length;\r\n        unchecked {\r\n            for (uint256 i = 0; i < length; ) {\r\n                markets_[i].depositFeesToYieldBox(swappers_[i], swapData_[i]);\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _getMasterContractLength(IPenrose.MasterContract[] memory array)\r\n        public\r\n        view\r\n        returns (address[] memory markets)\r\n    {\r\n        uint256 _masterContractLength = array.length;\r\n        uint256 marketsLength = 0;\r\n\r\n        unchecked {\r\n            // We first compute the length of the markets array\r\n            for (uint256 i = 0; i < _masterContractLength; ) {\r\n                marketsLength += clonesOfCount(array[i].location);\r\n\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        markets = new address[](marketsLength);\r\n\r\n        uint256 marketIndex;\r\n        uint256 clonesOfLength;\r\n\r\n        unchecked {\r\n            // We populate the array\r\n            for (uint256 i = 0; i < _masterContractLength; ) {\r\n                address mcLocation = array[i].location;\r\n                clonesOfLength = clonesOfCount(mcLocation);\r\n\r\n                // Loop through clones of the current MC.\r\n                for (uint256 j = 0; j < clonesOfLength; ) {\r\n                    markets[marketIndex] = clonesOf[mcLocation][j];\r\n                    ++marketIndex;\r\n                    ++j;\r\n                }\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/singularity/interfaces/ISingularity.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport '../../interfaces/IOracle.sol';\r\nimport '../../interfaces/IFee.sol';\r\nimport '../../interfaces/IMarket.sol';\r\n\r\ninterface ISingularity is IMarket, IFee {\r\n    struct AccrueInfo {\r\n        uint64 interestPerSecond;\r\n        uint64 lastAccrued;\r\n        uint128 feesEarnedFraction;\r\n    }\r\n\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n    event LogAccrue(\r\n        uint256 accruedAmount,\r\n        uint256 feeFraction,\r\n        uint64 rate,\r\n        uint256 utilization\r\n    );\r\n    event LogAddAsset(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share,\r\n        uint256 fraction\r\n    );\r\n    event LogAddCollateral(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share\r\n    );\r\n    event LogBorrow(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 feeAmount,\r\n        uint256 part\r\n    );\r\n    event LogExchangeRate(uint256 rate);\r\n    event LogFeeTo(address indexed newFeeTo);\r\n    event LogRemoveAsset(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share,\r\n        uint256 fraction\r\n    );\r\n    event LogRemoveCollateral(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share\r\n    );\r\n    event LogRepay(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 part\r\n    );\r\n    event LogWithdrawFees(address indexed feeTo, uint256 feesEarnedFraction);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event LogFlashLoan(\r\n        address indexed borrower,\r\n        uint256 amount,\r\n        uint256 feeAmount,\r\n        address indexed receiver\r\n    );\r\n    event LogYieldBoxFeesDeposit(uint256 feeShares, uint256 tapAmount);\r\n    event LogApprovalForAll(\r\n        address indexed _from,\r\n        address indexed _operator,\r\n        bool _approved\r\n    );\r\n    error NotApproved(address _from, address _operator);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function accrue() external;\r\n\r\n    function accrueInfo()\r\n        external\r\n        view\r\n        returns (\r\n            uint64 interestPerSecond,\r\n            uint64 lastBlockAccrued,\r\n            uint128 feesEarnedFraction\r\n        );\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function addAsset(\r\n        address from,\r\n        address to,\r\n        bool skim,\r\n        uint256 share\r\n    ) external returns (uint256 fraction);\r\n\r\n    function allowance(address, address) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function penrose() external view returns (address);\r\n\r\n    function claimOwnership() external;\r\n\r\n    /// @notice Allows batched call to Singularity.\r\n    /// @param calls An array encoded call data.\r\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\r\n    function execute(bytes[] calldata calls, bool revertOnFail)\r\n        external\r\n        returns (bool[] memory successes, string[] memory results);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function exchangeRate() external view returns (uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function getInitData(\r\n        address collateral_,\r\n        address asset_,\r\n        IOracle oracle_,\r\n        bytes calldata oracleData_\r\n    ) external pure returns (bytes memory data);\r\n\r\n    function init(bytes calldata data) external payable;\r\n\r\n    function isSolvent(address user, bool open) external view returns (bool);\r\n\r\n    function liquidate(\r\n        address[] calldata users,\r\n        uint256[] calldata borrowParts,\r\n        address to,\r\n        ISwapper swapper,\r\n        bool open\r\n    ) external;\r\n\r\n    function masterContract() external view returns (address);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function nonces(address) external view returns (uint256);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function pendingOwner() external view returns (address);\r\n\r\n    function permit(\r\n        address owner_,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function removeAsset(\r\n        address from,\r\n        address to,\r\n        uint256 fraction\r\n    ) external returns (uint256 share);\r\n\r\n    function setFeeTo(address newFeeTo) external;\r\n\r\n    function setSwapper(ISwapper swapper, bool enable) external;\r\n\r\n    function swappers(ISwapper) external view returns (bool);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function totalAsset() external view returns (uint128 elastic, uint128 base);\r\n\r\n    function callerFee() external view returns (uint256);\r\n\r\n    function protocolFee() external view returns (uint256);\r\n\r\n    function borrowOpeningFee() external view returns (uint256);\r\n\r\n    function orderBookLiquidationMultiplier() external view returns (uint256);\r\n\r\n    function closedCollateralizationRate() external view returns (uint256);\r\n\r\n    function lqCollateralizationRate() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transferOwnership(\r\n        address newOwner,\r\n        bool direct,\r\n        bool renounce\r\n    ) external;\r\n\r\n    function updateExchangeRate() external returns (bool updated, uint256 rate);\r\n\r\n    function withdrawFees() external;\r\n\r\n    function liquidationQueue() external view returns (address payable);\r\n\r\n    function totalBorrowCap() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/singularity/SGLCommon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport './SGLStorage.sol';\r\nimport 'hardhat/console.sol';\r\n\r\ncontract SGLCommon is SGLStorage {\r\n    using RebaseLibrary for Rebase;\r\n\r\n    // ***************** //\r\n    // *** MODIFIERS *** //\r\n    // ***************** //\r\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\r\n    /// If 'from' is msg.sender, it's allowed.\r\n    /// msg.sender can be an allowed operator if his allowance equal or exceed the balance of the user 'from'.\r\n    modifier allowed(address from) virtual {\r\n        if (\r\n            from != msg.sender && allowance[from][msg.sender] <= balanceOf[from]\r\n        ) {\r\n            revert NotApproved(from, msg.sender);\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(!paused, 'SGL: paused');\r\n        _;\r\n    }\r\n\r\n    /// @dev Checks if the user is solvent in the closed liquidation case at the end of the function body.\r\n    modifier solvent(address from) {\r\n        _;\r\n        require(_isSolvent(from, exchangeRate), 'SGL: insolvent');\r\n    }\r\n\r\n    bool private initialized;\r\n    modifier onlyOnce() {\r\n        require(!initialized, 'SGL: initialized');\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n    /// @notice Return the amount of collateral for a `user` to be solvent, min TVL and max TVL. Returns 0 if user already solvent.\r\n    /// @dev We use a `CLOSED_COLLATERIZATION_RATE` that is a safety buffer when making the user solvent again,\r\n    ///      To prevent from being liquidated. This function is valid only if user is not solvent by `_isSolvent()`.\r\n    /// @param user The user to check solvency.\r\n    /// @param _exchangeRate The exchange rate asset/collateral.\r\n    /// @return amountToSolvency The amount of collateral to be solvent.\r\n    function computeTVLInfo(address user, uint256 _exchangeRate)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 amountToSolvency,\r\n            uint256 minTVL,\r\n            uint256 maxTVL\r\n        )\r\n    {\r\n        uint256 borrowPart = userBorrowPart[user];\r\n        if (borrowPart == 0) return (0, 0, 0);\r\n        uint256 collateralShare = userCollateralShare[user];\r\n\r\n        Rebase memory _totalBorrow = totalBorrow;\r\n\r\n        uint256 collateralAmountInAsset = yieldBox.toAmount(\r\n            collateralId,\r\n            (collateralShare *\r\n                (EXCHANGE_RATE_PRECISION / COLLATERALIZATION_RATE_PRECISION) *\r\n                lqCollateralizationRate),\r\n            false\r\n        ) / _exchangeRate;\r\n        borrowPart = (borrowPart * _totalBorrow.elastic) / _totalBorrow.base;\r\n\r\n        amountToSolvency = borrowPart >= collateralAmountInAsset\r\n            ? borrowPart - collateralAmountInAsset\r\n            : 0;\r\n\r\n        (minTVL, maxTVL) = _computeMaxAndMinLTVInAsset(\r\n            collateralShare,\r\n            _exchangeRate\r\n        );\r\n    }\r\n\r\n    /// @notice Return the maximum liquidatable amount for user\r\n    function computeClosingFactor(address user, uint256 _exchangeRate)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_isSolvent(user, _exchangeRate)) return 0;\r\n\r\n        (uint256 amountToSolvency, , uint256 maxTVL) = computeTVLInfo(\r\n            user,\r\n            _exchangeRate\r\n        );\r\n        uint256 borrowed = userBorrowPart[user];\r\n        if (borrowed >= maxTVL) return borrowed;\r\n\r\n        return\r\n            amountToSolvency +\r\n            ((liquidationBonusAmount * borrowed) / FEE_PRECISION);\r\n    }\r\n\r\n    function computeLiquidatorReward(address user, uint256 _exchangeRate)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (uint256 minTVL, uint256 maxTVL) = _computeMaxAndMinLTVInAsset(\r\n            userCollateralShare[user],\r\n            _exchangeRate\r\n        );\r\n        return _getCallerReward(userBorrowPart[user], minTVL, maxTVL);\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n\r\n    /// @notice Gets the exchange rate. I.e how much collateral to buy 1e18 asset.\r\n    /// This function is supposed to be invoked if needed because Oracle queries can be expensive.\r\n    /// @return updated True if `exchangeRate` was updated.\r\n    /// @return rate The new exchange rate.\r\n    function updateExchangeRate() public returns (bool updated, uint256 rate) {\r\n        (updated, rate) = oracle.get(oracleData);\r\n\r\n        if (updated) {\r\n            exchangeRate = rate;\r\n            emit LogExchangeRate(rate);\r\n        } else {\r\n            // Return the old rate if fetching wasn't successful\r\n            rate = exchangeRate;\r\n        }\r\n    }\r\n\r\n    /// @notice Accrues the interest on the borrowed tokens and handles the accumulation of fees.\r\n    function accrue() public {\r\n        ISingularity.AccrueInfo memory _accrueInfo = accrueInfo;\r\n        // Number of seconds since accrue was called\r\n        uint256 elapsedTime = block.timestamp - _accrueInfo.lastAccrued;\r\n        if (elapsedTime == 0) {\r\n            return;\r\n        }\r\n        _accrueInfo.lastAccrued = uint64(block.timestamp);\r\n\r\n        Rebase memory _totalBorrow = totalBorrow;\r\n        if (_totalBorrow.base == 0) {\r\n            // If there are no borrows, reset the interest rate\r\n            if (_accrueInfo.interestPerSecond != STARTING_INTEREST_PER_SECOND) {\r\n                _accrueInfo.interestPerSecond = STARTING_INTEREST_PER_SECOND;\r\n                emit LogAccrue(0, 0, STARTING_INTEREST_PER_SECOND, 0);\r\n            }\r\n            accrueInfo = _accrueInfo;\r\n            return;\r\n        }\r\n\r\n        uint256 extraAmount = 0;\r\n        uint256 feeFraction = 0;\r\n        Rebase memory _totalAsset = totalAsset;\r\n\r\n        // Accrue interest\r\n        extraAmount =\r\n            (uint256(_totalBorrow.elastic) *\r\n                _accrueInfo.interestPerSecond *\r\n                elapsedTime) /\r\n            1e18;\r\n        _totalBorrow.elastic += uint128(extraAmount);\r\n        uint256 fullAssetAmount = yieldBox.toAmount(\r\n            assetId,\r\n            _totalAsset.elastic,\r\n            false\r\n        ) + _totalBorrow.elastic;\r\n\r\n        uint256 feeAmount = (extraAmount * protocolFee) / FEE_PRECISION; // % of interest paid goes to fee\r\n        feeFraction = (feeAmount * _totalAsset.base) / fullAssetAmount;\r\n        _accrueInfo.feesEarnedFraction += uint128(feeFraction);\r\n        totalAsset.base = _totalAsset.base + uint128(feeFraction);\r\n        totalBorrow = _totalBorrow;\r\n\r\n        // Update interest rate\r\n        uint256 utilization = (uint256(_totalBorrow.elastic) *\r\n            UTILIZATION_PRECISION) / fullAssetAmount;\r\n        if (utilization < MINIMUM_TARGET_UTILIZATION) {\r\n            uint256 underFactor = ((MINIMUM_TARGET_UTILIZATION - utilization) *\r\n                FACTOR_PRECISION) / MINIMUM_TARGET_UTILIZATION;\r\n            uint256 scale = INTEREST_ELASTICITY +\r\n                (underFactor * underFactor * elapsedTime);\r\n            _accrueInfo.interestPerSecond = uint64(\r\n                (uint256(_accrueInfo.interestPerSecond) * INTEREST_ELASTICITY) /\r\n                    scale\r\n            );\r\n\r\n            if (_accrueInfo.interestPerSecond < MINIMUM_INTEREST_PER_SECOND) {\r\n                _accrueInfo.interestPerSecond = MINIMUM_INTEREST_PER_SECOND; // 0.25% APR minimum\r\n            }\r\n        } else if (utilization > MAXIMUM_TARGET_UTILIZATION) {\r\n            uint256 overFactor = ((utilization - MAXIMUM_TARGET_UTILIZATION) *\r\n                FACTOR_PRECISION) / FULL_UTILIZATION_MINUS_MAX;\r\n            uint256 scale = INTEREST_ELASTICITY +\r\n                (overFactor * overFactor * elapsedTime);\r\n            uint256 newInterestPerSecond = (uint256(\r\n                _accrueInfo.interestPerSecond\r\n            ) * scale) / INTEREST_ELASTICITY;\r\n            if (newInterestPerSecond > MAXIMUM_INTEREST_PER_SECOND) {\r\n                newInterestPerSecond = MAXIMUM_INTEREST_PER_SECOND; // 1000% APR maximum\r\n            }\r\n            _accrueInfo.interestPerSecond = uint64(newInterestPerSecond);\r\n        }\r\n\r\n        emit LogAccrue(\r\n            extraAmount,\r\n            feeFraction,\r\n            _accrueInfo.interestPerSecond,\r\n            utilization\r\n        );\r\n        accrueInfo = _accrueInfo;\r\n    }\r\n\r\n    /// @notice Removes an asset from msg.sender and transfers it to `to`.\r\n    /// @param from Account to debit Assets from.\r\n    /// @param to The user that receives the removed assets.\r\n    /// @param fraction The amount/fraction of assets held to remove.\r\n    /// @return share The amount of shares transferred to `to`.\r\n    function removeAsset(\r\n        address from,\r\n        address to,\r\n        uint256 fraction\r\n    ) public notPaused allowed(from) returns (uint256 share) {\r\n        accrue();\r\n\r\n        share = _removeAsset(from, to, fraction, true);\r\n    }\r\n\r\n    /// @notice Adds assets to the lending pair.\r\n    /// @param from Address to add asset from.\r\n    /// @param to The address of the user to receive the assets.\r\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\r\n    /// False if tokens from msg.sender in `yieldBox` should be transferred.\r\n    /// @param share The amount of shares to add.\r\n    /// @return fraction Total fractions added.\r\n    function addAsset(\r\n        address from,\r\n        address to,\r\n        bool skim,\r\n        uint256 share\r\n    ) public notPaused allowed(from) returns (uint256 fraction) {\r\n        accrue();\r\n        fraction = _addAsset(from, to, skim, share);\r\n    }\r\n\r\n    // ************************** //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    /// @notice construct Uniswap path\r\n    function _collateralToAssetSwapPath()\r\n        internal\r\n        view\r\n        returns (address[] memory path)\r\n    {\r\n        path = new address[](2);\r\n        path[0] = address(collateral);\r\n        path[1] = address(asset);\r\n    }\r\n\r\n    function _assetToWethSwapPath()\r\n        internal\r\n        view\r\n        returns (address[] memory path)\r\n    {\r\n        path = new address[](2);\r\n        path[0] = address(asset);\r\n        path[1] = address(penrose.wethToken());\r\n    }\r\n\r\n    /// @notice Concrete implementation of `isSolvent`. Includes a parameter to allow caching `exchangeRate`.\r\n    /// @param _exchangeRate The exchange rate. Used to cache the `exchangeRate` between calls.\r\n    function _isSolvent(address user, uint256 _exchangeRate)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        // accrue must have already been called!\r\n        uint256 borrowPart = userBorrowPart[user];\r\n        if (borrowPart == 0) return true;\r\n        uint256 collateralShare = userCollateralShare[user];\r\n        if (collateralShare == 0) return false;\r\n\r\n        Rebase memory _totalBorrow = totalBorrow;\r\n\r\n        return\r\n            yieldBox.toAmount(\r\n                collateralId,\r\n                collateralShare *\r\n                    (EXCHANGE_RATE_PRECISION /\r\n                        COLLATERALIZATION_RATE_PRECISION) *\r\n                    closedCollateralizationRate,\r\n                false\r\n            ) >=\r\n            // Moved exchangeRate here instead of dividing the other side to preserve more precision\r\n            (borrowPart * _totalBorrow.elastic * _exchangeRate) /\r\n                _totalBorrow.base;\r\n    }\r\n\r\n    /// @dev Helper function to move tokens.\r\n    /// @param from Account to debit tokens from, in `yieldBox`.\r\n    /// @param _assetId The ERC-20 token asset ID in yieldBox.\r\n    /// @param share The amount in shares to add.\r\n    /// @param total Grand total amount to deduct from this contract's balance. Only applicable if `skim` is True.\r\n    /// Only used for accounting checks.\r\n    /// @param skim If True, only does a balance check on this contract.\r\n    /// False if tokens from msg.sender in `yieldBox` should be transferred.\r\n    function _addTokens(\r\n        address from,\r\n        uint256 _assetId,\r\n        uint256 share,\r\n        uint256 total,\r\n        bool skim\r\n    ) internal {\r\n        _yieldBoxShares[from][_assetId] += share;\r\n\r\n        if (skim) {\r\n            require(\r\n                share <= yieldBox.balanceOf(address(this), _assetId) - total,\r\n                'SGL: too much'\r\n            );\r\n        } else {\r\n            yieldBox.transfer(from, address(this), _assetId, share); // added a 'from' instead of 'msg.sender' -0xGAB\r\n        }\r\n    }\r\n\r\n    /// @dev Concrete implementation of `addAsset`.\r\n    function _addAsset(\r\n        address from,\r\n        address to,\r\n        bool skim,\r\n        uint256 share\r\n    ) internal returns (uint256 fraction) {\r\n        Rebase memory _totalAsset = totalAsset;\r\n        uint256 totalAssetShare = _totalAsset.elastic;\r\n        uint256 allShare = _totalAsset.elastic +\r\n            yieldBox.toShare(assetId, totalBorrow.elastic, true);\r\n        fraction = allShare == 0\r\n            ? share\r\n            : (share * _totalAsset.base) / allShare;\r\n        if (_totalAsset.base + uint128(fraction) < 1000) {\r\n            return 0;\r\n        }\r\n        totalAsset = _totalAsset.add(share, fraction);\r\n        balanceOf[to] += fraction;\r\n        emit Transfer(address(0), to, fraction);\r\n\r\n        _addTokens(from, assetId, share, totalAssetShare, skim);\r\n        emit LogAddAsset(skim ? address(yieldBox) : from, to, share, fraction);\r\n    }\r\n\r\n    /// @dev Concrete implementation of `removeAsset`.\r\n    /// @param from The account to remove from. Should always be msg.sender except for `depositFeesToyieldBox()`.\r\n    function _removeAsset(\r\n        address from,\r\n        address to,\r\n        uint256 fraction,\r\n        bool updateYieldBoxShares\r\n    ) internal returns (uint256 share) {\r\n        if (totalAsset.base == 0) {\r\n            return 0;\r\n        }\r\n        Rebase memory _totalAsset = totalAsset;\r\n        uint256 allShare = _totalAsset.elastic +\r\n            yieldBox.toShare(assetId, totalBorrow.elastic, true);\r\n        share = (fraction * allShare) / _totalAsset.base;\r\n        balanceOf[from] -= fraction;\r\n        emit Transfer(from, address(0), fraction);\r\n        _totalAsset.elastic -= uint128(share);\r\n        _totalAsset.base -= uint128(fraction);\r\n        require(_totalAsset.base >= 1000, 'SGL: min limit');\r\n        totalAsset = _totalAsset;\r\n        emit LogRemoveAsset(from, to, share, fraction);\r\n        yieldBox.transfer(address(this), to, assetId, share);\r\n        if (updateYieldBoxShares) {\r\n            if (share > _yieldBoxShares[from][assetId]) {\r\n                _yieldBoxShares[from][assetId] = 0; //some assets accrue in time\r\n            } else {\r\n                _yieldBoxShares[from][assetId] -= share;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev Return the equivalent of collateral borrow part in asset amount.\r\n    function _getAmountForBorrowPart(uint256 borrowPart)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return totalBorrow.toElastic(borrowPart, false);\r\n    }\r\n\r\n    /// @notice Returns the min and max LTV for user in asset price\r\n    function _computeMaxAndMinLTVInAsset(\r\n        uint256 collateralShare,\r\n        uint256 _exchangeRate\r\n    ) internal view returns (uint256 min, uint256 max) {\r\n        uint256 collateralAmount = yieldBox.toAmount(\r\n            collateralId,\r\n            collateralShare,\r\n            false\r\n        );\r\n\r\n        max = (collateralAmount * EXCHANGE_RATE_PRECISION) / _exchangeRate;\r\n        min =\r\n            (max * closedCollateralizationRate) /\r\n            COLLATERALIZATION_RATE_PRECISION;\r\n    }\r\n\r\n    function _getCallerReward(\r\n        uint256 borrowed,\r\n        uint256 startTVLInAsset,\r\n        uint256 maxTVLInAsset\r\n    ) internal view returns (uint256) {\r\n        if (borrowed == 0) return 0;\r\n        if (startTVLInAsset == 0) return 0;\r\n\r\n        if (borrowed < startTVLInAsset) return 0;\r\n        if (borrowed >= maxTVLInAsset) return minLiquidatorReward;\r\n\r\n        uint256 rewardPercentage = ((borrowed - startTVLInAsset) *\r\n            FEE_PRECISION) / (maxTVLInAsset - startTVLInAsset);\r\n\r\n        int256 diff = int256(minLiquidatorReward) - int256(maxLiquidatorReward);\r\n        int256 reward = (diff * int256(rewardPercentage)) /\r\n            int256(FEE_PRECISION) +\r\n            int256(maxLiquidatorReward);\r\n\r\n        return uint256(reward);\r\n    }\r\n}\r\n"
    },
    "contracts/singularity/SGLLendingBorrowing.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport './SGLCommon.sol';\r\n\r\ncontract SGLLendingBorrowing is SGLCommon {\r\n    using RebaseLibrary for Rebase;\r\n    using BoringERC20 for IERC20;\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n    /// @notice Sender borrows `amount` and transfers it to `to`.\r\n    /// @param from Account to borrow for.\r\n    /// @param to The receiver of borrowed tokens.\r\n    /// @param amount Amount to borrow.\r\n    /// @return part Total part of the debt held by borrowers.\r\n    /// @return share Total amount in shares borrowed.\r\n    function borrow(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        public\r\n        notPaused\r\n        solvent(from)\r\n        allowed(from)\r\n        returns (uint256 part, uint256 share)\r\n    {\r\n        updateExchangeRate();\r\n\r\n        accrue();\r\n\r\n        (part, share) = _borrow(from, to, amount);\r\n    }\r\n\r\n    /// @notice Repays a loan.\r\n    /// @param from Address to repay from.\r\n    /// @param to Address of the user this payment should go.\r\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\r\n    /// False if tokens from msg.sender in `yieldBox` should be transferred.\r\n    /// @param part The amount to repay. See `userBorrowPart`.\r\n    /// @return amount The total amount repayed.\r\n    function repay(\r\n        address from,\r\n        address to,\r\n        bool skim,\r\n        uint256 part\r\n    ) public notPaused allowed(from) returns (uint256 amount) {\r\n        updateExchangeRate();\r\n\r\n        accrue();\r\n\r\n        amount = _repay(from, to, skim, part);\r\n    }\r\n\r\n    /// @notice Adds `collateral` from msg.sender to the account `to`.\r\n    /// @param from Account to transfer shares from.\r\n    /// @param to The receiver of the tokens.\r\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\r\n    /// False if tokens from msg.sender in `yieldBox` should be transferred.\r\n    /// @param share The amount of shares to add for `to`.\r\n    function addCollateral(\r\n        address from,\r\n        address to,\r\n        bool skim,\r\n        uint256 share\r\n    ) public notPaused allowed(from) {\r\n        userCollateralShare[to] += share;\r\n        uint256 oldTotalCollateralShare = totalCollateralShare;\r\n        totalCollateralShare = oldTotalCollateralShare + share;\r\n        _addTokens(from, collateralId, share, oldTotalCollateralShare, skim);\r\n        emit LogAddCollateral(skim ? address(yieldBox) : from, to, share);\r\n    }\r\n\r\n    /// @notice Removes `share` amount of collateral and transfers it to `to`.\r\n    /// @param from Account to debit collateral from.\r\n    /// @param to The receiver of the shares.\r\n    /// @param share Amount of shares to remove.\r\n    function removeCollateral(\r\n        address from,\r\n        address to,\r\n        uint256 share\r\n    ) public notPaused solvent(from) allowed(from) {\r\n        // accrue must be called because we check solvency\r\n        accrue();\r\n\r\n        _removeCollateral(from, to, share);\r\n    }\r\n\r\n    // ************************** //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    /// @dev Concrete implementation of `removeCollateral`.\r\n    function _removeCollateral(\r\n        address from,\r\n        address to,\r\n        uint256 share\r\n    ) internal {\r\n        userCollateralShare[from] -= share;\r\n        totalCollateralShare -= share;\r\n        emit LogRemoveCollateral(from, to, share);\r\n        yieldBox.transfer(address(this), to, collateralId, share);\r\n        if (share > _yieldBoxShares[from][collateralId]) {\r\n            _yieldBoxShares[from][collateralId] = 0; //accrues in time\r\n        } else {\r\n            _yieldBoxShares[from][collateralId] -= share;\r\n        }\r\n    }\r\n\r\n    /// @dev Concrete implementation of `borrow`.\r\n    function _borrow(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (uint256 part, uint256 share) {\r\n        uint256 feeAmount = (amount * borrowOpeningFee) / FEE_PRECISION; // A flat % fee is charged for any borrow\r\n\r\n        (totalBorrow, part) = totalBorrow.add(amount + feeAmount, true);\r\n        require(\r\n            totalBorrowCap == 0 || totalBorrow.base <= totalBorrowCap,\r\n            'SGL: borrow cap reached'\r\n        );\r\n        userBorrowPart[from] += part;\r\n        emit LogBorrow(from, to, amount, feeAmount, part);\r\n\r\n        share = yieldBox.toShare(assetId, amount, false);\r\n        Rebase memory _totalAsset = totalAsset;\r\n        require(_totalAsset.base >= 1000, 'SGL: min limit');\r\n        _totalAsset.elastic -= uint128(share);\r\n        totalAsset = _totalAsset;\r\n\r\n        yieldBox.transfer(address(this), to, assetId, share);\r\n    }\r\n\r\n    /// @dev Concrete implementation of `repay`.\r\n    function _repay(\r\n        address from,\r\n        address to,\r\n        bool skim,\r\n        uint256 part\r\n    ) internal returns (uint256 amount) {\r\n        (totalBorrow, amount) = totalBorrow.sub(part, true);\r\n\r\n        userBorrowPart[to] -= part;\r\n\r\n        uint256 share = yieldBox.toShare(assetId, amount, true);\r\n        uint128 totalShare = totalAsset.elastic;\r\n        _addTokens(from, assetId, share, uint256(totalShare), skim);\r\n        totalAsset.elastic = totalShare + uint128(share);\r\n        emit LogRepay(skim ? address(yieldBox) : from, to, amount, part);\r\n    }\r\n}\r\n"
    },
    "contracts/singularity/SGLLiquidation.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport './SGLCommon.sol';\r\n\r\n\r\n// solhint-disable max-line-length\r\n\r\ncontract SGLLiquidation is SGLCommon {\r\n    using RebaseLibrary for Rebase;\r\n    using BoringERC20 for IERC20;\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n\r\n    /// @notice Entry point for liquidations.\r\n    /// @dev Will call `closedLiquidation()` if not LQ exists or no LQ bid avail exists. Otherwise use LQ.\r\n    /// @param users An array of user addresses.\r\n    /// @param maxBorrowParts A one-to-one mapping to `users`, contains maximum (partial) borrow amounts (to liquidate) of the respective user.\r\n    ///        Ignore for `orderBookLiquidation()`\r\n    /// @param swapper Contract address of the `MultiSwapper` implementation. See `setSwapper`.\r\n    ///        Ignore for `orderBookLiquidation()`\r\n    /// @param collateralToAssetSwapData Extra swap data\r\n    ///        Ignore for `orderBookLiquidation()`\r\n    /// @param usdoToBorrowedSwapData Extra swap data\r\n    ///        Ignore for `closedLiquidation()`\r\n    function liquidate(\r\n        address[] calldata users,\r\n        uint256[] calldata maxBorrowParts,\r\n        ISwapper swapper,\r\n        bytes calldata collateralToAssetSwapData,\r\n        bytes calldata usdoToBorrowedSwapData\r\n    ) external notPaused {\r\n        // Oracle can fail but we still need to allow liquidations\r\n        (, uint256 _exchangeRate) = updateExchangeRate();\r\n        accrue();\r\n\r\n        if (address(liquidationQueue) != address(0)) {\r\n            (, bool bidAvail, uint256 bidAmount) = liquidationQueue\r\n                .getNextAvailBidPool();\r\n            if (bidAvail) {\r\n                uint256 needed = 0;\r\n                for (uint256 i = 0; i < maxBorrowParts.length; i++) {\r\n                    needed += maxBorrowParts[i];\r\n                }\r\n                if (bidAmount >= needed) {\r\n                    _orderBookLiquidation(\r\n                        users,\r\n                        _exchangeRate,\r\n                        usdoToBorrowedSwapData\r\n                    );\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        _closedLiquidation(\r\n            users,\r\n            maxBorrowParts,\r\n            swapper,\r\n            _exchangeRate,\r\n            collateralToAssetSwapData\r\n        );\r\n    }\r\n\r\n    // ************************* //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    function _computeAssetAmountToSolvency(address user, uint256 _exchangeRate)\r\n        private\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // accrue must have already been called!\r\n        uint256 borrowPart = userBorrowPart[user];\r\n        if (borrowPart == 0) return 0;\r\n        uint256 collateralShare = userCollateralShare[user];\r\n\r\n        Rebase memory _totalBorrow = totalBorrow;\r\n\r\n        uint256 collateralAmountInAsset = yieldBox.toAmount(\r\n            collateralId,\r\n            (collateralShare *\r\n                (EXCHANGE_RATE_PRECISION / COLLATERALIZATION_RATE_PRECISION) *\r\n                lqCollateralizationRate),\r\n            false\r\n        ) / _exchangeRate;\r\n        // Obviously it's not `borrowPart` anymore but `borrowAmount`\r\n        borrowPart = (borrowPart * _totalBorrow.elastic) / _totalBorrow.base;\r\n\r\n        return\r\n            borrowPart >= collateralAmountInAsset\r\n                ? borrowPart - collateralAmountInAsset\r\n                : 0;\r\n    }\r\n\r\n    function _orderBookLiquidation(\r\n        address[] calldata users,\r\n        uint256 _exchangeRate,\r\n        bytes memory swapData\r\n    ) private {\r\n        uint256 allCollateralShare;\r\n        uint256 allBorrowAmount;\r\n        uint256 allBorrowPart;\r\n        Rebase memory _totalBorrow = totalBorrow;\r\n\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            address user = users[i];\r\n            if (!_isSolvent(user, _exchangeRate)) {\r\n                uint256 borrowAmount = _computeAssetAmountToSolvency(\r\n                    user,\r\n                    _exchangeRate\r\n                );\r\n\r\n                if (borrowAmount == 0) {\r\n                    continue;\r\n                }\r\n\r\n                uint256 borrowPart;\r\n                {\r\n                    uint256 availableBorrowPart = userBorrowPart[user];\r\n                    borrowPart = _totalBorrow.toBase(borrowAmount, false);\r\n                    userBorrowPart[user] = availableBorrowPart - borrowPart;\r\n                }\r\n                uint256 collateralShare = yieldBox.toShare(\r\n                    collateralId,\r\n                    (borrowAmount * _exchangeRate * liquidationMultiplier) /\r\n                        (EXCHANGE_RATE_PRECISION *\r\n                            LIQUIDATION_MULTIPLIER_PRECISION),\r\n                    false\r\n                );\r\n                userCollateralShare[user] -= collateralShare;\r\n                emit LogRemoveCollateral(\r\n                    user,\r\n                    address(liquidationQueue),\r\n                    collateralShare\r\n                );\r\n                emit LogRepay(\r\n                    address(liquidationQueue),\r\n                    user,\r\n                    borrowAmount,\r\n                    borrowPart\r\n                );\r\n\r\n                // Keep totals\r\n                allCollateralShare += collateralShare;\r\n                allBorrowAmount += borrowAmount;\r\n                allBorrowPart += borrowPart;\r\n            }\r\n        }\r\n        require(allBorrowAmount != 0, 'SGL: solvent');\r\n\r\n        _totalBorrow.elastic -= uint128(allBorrowAmount);\r\n        _totalBorrow.base -= uint128(allBorrowPart);\r\n        totalBorrow = _totalBorrow;\r\n        totalCollateralShare -= allCollateralShare;\r\n\r\n        uint256 allBorrowShare = yieldBox.toShare(\r\n            assetId,\r\n            allBorrowAmount,\r\n            true\r\n        );\r\n\r\n        // Transfer collateral to be liquidated\r\n        yieldBox.transfer(\r\n            address(this),\r\n            address(liquidationQueue),\r\n            collateralId,\r\n            allCollateralShare\r\n        );\r\n\r\n        // LiquidationQueue pay debt\r\n        liquidationQueue.executeBids(\r\n            yieldBox.toAmount(collateralId, allCollateralShare, true),\r\n            swapData\r\n        );\r\n\r\n        uint256 returnedShare = yieldBox.balanceOf(address(this), assetId) -\r\n            uint256(totalAsset.elastic);\r\n        uint256 extraShare = returnedShare - allBorrowShare;\r\n        uint256 callerShare = (extraShare * callerFee) / FEE_PRECISION; // 1% goes to caller\r\n\r\n        yieldBox.transfer(address(this), msg.sender, assetId, callerShare);\r\n\r\n        totalAsset.elastic += uint128(returnedShare - callerShare);\r\n        emit LogAddAsset(\r\n            address(liquidationQueue),\r\n            address(this),\r\n            returnedShare - callerShare,\r\n            0\r\n        );\r\n    }\r\n\r\n    function _updateBorrowAndCollateralShare(\r\n        address user,\r\n        uint256 maxBorrowPart,\r\n        uint256 _exchangeRate\r\n    )\r\n        private\r\n        returns (\r\n            uint256 borrowAmount,\r\n            uint256 borrowPart,\r\n            uint256 collateralShare\r\n        )\r\n    {\r\n        uint256 availableBorrowPart = computeClosingFactor(user, _exchangeRate);\r\n        borrowPart = maxBorrowPart > availableBorrowPart\r\n            ? availableBorrowPart\r\n            : maxBorrowPart;\r\n\r\n        userBorrowPart[user] = userBorrowPart[user] - borrowPart;\r\n\r\n        borrowAmount = totalBorrow.toElastic(borrowPart, false);\r\n        collateralShare = yieldBox.toShare(\r\n            collateralId,\r\n            (borrowAmount * liquidationMultiplier * _exchangeRate) /\r\n                (LIQUIDATION_MULTIPLIER_PRECISION * EXCHANGE_RATE_PRECISION),\r\n            false\r\n        );\r\n        userCollateralShare[user] -= collateralShare;\r\n        require(borrowAmount != 0, 'SGL: solvent');\r\n\r\n        totalBorrow.elastic -= uint128(borrowAmount);\r\n        totalBorrow.base -= uint128(borrowPart);\r\n    }\r\n\r\n    function _extractLiquidationFees(\r\n        uint256 borrowShare,\r\n        uint256 callerReward,\r\n        address swapper\r\n    ) private {\r\n        uint256 returnedShare = yieldBox.balanceOf(address(this), assetId) -\r\n            uint256(totalAsset.elastic);\r\n        uint256 extraShare = returnedShare - borrowShare;\r\n        uint256 feeShare = (extraShare * protocolFee) / FEE_PRECISION; // x% of profit goes to fee.\r\n        uint256 callerShare = (extraShare * callerReward) / FEE_PRECISION; //  y%  of profit goes to caller.\r\n\r\n        yieldBox.transfer(address(this), penrose.feeTo(), assetId, feeShare);\r\n        yieldBox.transfer(address(this), msg.sender, assetId, callerShare);\r\n\r\n        totalAsset.elastic += uint128(returnedShare - feeShare - callerShare);\r\n\r\n        emit LogAddAsset(\r\n            swapper,\r\n            address(this),\r\n            extraShare - feeShare - callerShare,\r\n            0\r\n        );\r\n    }\r\n\r\n    function _liquidateUser(\r\n        address user,\r\n        uint256 maxBorrowPart,\r\n        ISwapper swapper,\r\n        uint256 _exchangeRate,\r\n        bytes calldata swapData\r\n    ) private {\r\n        if (_isSolvent(user, _exchangeRate)) return;\r\n\r\n        (\r\n            uint256 startTVLInAsset,\r\n            uint256 maxTVLInAsset\r\n        ) = _computeMaxAndMinLTVInAsset(\r\n                userCollateralShare[user],\r\n                _exchangeRate\r\n            );\r\n        uint256 callerReward = _getCallerReward(\r\n            userBorrowPart[user],\r\n            startTVLInAsset,\r\n            maxTVLInAsset\r\n        );\r\n\r\n        (\r\n            uint256 borrowAmount,\r\n            uint256 borrowPart,\r\n            uint256 collateralShare\r\n        ) = _updateBorrowAndCollateralShare(user, maxBorrowPart, _exchangeRate);\r\n        emit LogRemoveCollateral(user, address(swapper), collateralShare);\r\n        emit LogRepay(address(swapper), user, borrowAmount, borrowPart);\r\n\r\n        uint256 borrowShare = yieldBox.toShare(assetId, borrowAmount, true);\r\n\r\n        // Closed liquidation using a pre-approved swapper\r\n        require(penrose.swappers(swapper), 'SGL: Invalid swapper');\r\n\r\n        // Swaps the users collateral for the borrowed asset\r\n        yieldBox.transfer(\r\n            address(this),\r\n            address(swapper),\r\n            collateralId,\r\n            collateralShare\r\n        );\r\n\r\n        uint256 minAssetMount = 0;\r\n        if (swapData.length > 0) {\r\n            minAssetMount = abi.decode(swapData, (uint256));\r\n        }\r\n        swapper.swap(\r\n            collateralId,\r\n            assetId,\r\n            collateralShare,\r\n            address(this),\r\n            minAssetMount,\r\n            abi.encode(_collateralToAssetSwapPath())\r\n        );\r\n\r\n        _extractLiquidationFees(borrowShare, callerReward, address(swapper));\r\n    }\r\n\r\n    /// @notice Handles the liquidation of users' balances, once the users' amount of collateral is too low.\r\n    /// @dev Closed liquidations Only, 90% of extra shares goes to caller and 10% to protocol\r\n    /// @param users An array of user addresses.\r\n    /// @param maxBorrowParts A one-to-one mapping to `users`, contains maximum (partial) borrow amounts (to liquidate) of the respective user.\r\n    /// @param swapper Contract address of the `MultiSwapper` implementation. See `setSwapper`.\r\n    /// @param swapData Swap necessar data\r\n    function _closedLiquidation(\r\n        address[] calldata users,\r\n        uint256[] calldata maxBorrowParts,\r\n        ISwapper swapper,\r\n        uint256 _exchangeRate,\r\n        bytes calldata swapData\r\n    ) private {\r\n        uint256 liquidatedCount = 0;\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            address user = users[i];\r\n            if (!_isSolvent(user, _exchangeRate)) {\r\n                liquidatedCount++;\r\n                _liquidateUser(\r\n                    user,\r\n                    maxBorrowParts[i],\r\n                    swapper,\r\n                    _exchangeRate,\r\n                    swapData\r\n                );\r\n            }\r\n        }\r\n\r\n        require(liquidatedCount > 0, 'SGL: no users found');\r\n    }\r\n\r\n    \r\n}\r\n"
    },
    "contracts/singularity/SGLStorage.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport '@boringcrypto/boring-solidity/contracts/ERC20.sol';\r\nimport '@boringcrypto/boring-solidity/contracts/BoringOwnable.sol';\r\nimport '@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol';\r\nimport '@boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol';\r\n\r\nimport './interfaces/ISingularity.sol';\r\nimport '../swappers/ISwapper.sol';\r\nimport '../liquidationQueue/ILiquidationQueue.sol';\r\nimport '../interfaces/IPenrose.sol';\r\nimport '../interfaces/IOracle.sol';\r\nimport '../../yieldbox/contracts/YieldBox.sol';\r\n\r\n// solhint-disable max-line-length\r\n\r\n/*\r\n\r\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\____        \r\n _\\///////\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\/////////\\\\\\_\\/////\\\\\\///______/\\\\\\///\\\\\\________/\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__       \r\n  _______\\/\\\\\\________/\\\\\\/////////\\\\\\_\\/\\\\\\_______\\/\\\\\\_____\\/\\\\\\_______/\\\\\\/__\\///\\\\\\____/\\\\\\/____________/\\\\\\/////////\\\\\\_      \r\n   _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\/\\\\\\______/\\\\\\______\\//\\\\\\__/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_     \r\n    _______\\/\\\\\\_______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\/////////________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \r\n     _______\\/\\\\\\_______\\/\\\\\\/////////\\\\\\_\\/\\\\\\_________________\\/\\\\\\_____\\//\\\\\\______/\\\\\\__\\//\\\\\\____________\\/\\\\\\/////////\\\\\\_   \r\n      _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_________________\\/\\\\\\______\\///\\\\\\__/\\\\\\_____\\///\\\\\\__________\\/\\\\\\_______\\/\\\\\\_  \r\n       _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\____\\///\\\\\\\\\\/________\\////\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_ \r\n        _______\\///________\\///________\\///__\\///______________\\///////////_______\\/////_____________\\/////////__\\///________\\///__\r\n\r\n*/\r\n\r\ncontract SGLStorage is BoringOwnable, ERC20 {\r\n    using RebaseLibrary for Rebase;\r\n    using BoringERC20 for IERC20;\r\n\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n\r\n    ISingularity.AccrueInfo public accrueInfo;\r\n\r\n    IPenrose public penrose;\r\n    YieldBox public yieldBox;\r\n    ILiquidationQueue public liquidationQueue;\r\n    IERC20 public collateral;\r\n    IERC20 public asset;\r\n    uint256 public collateralId;\r\n    uint256 public assetId;\r\n    bool public paused;\r\n    address public conservator;\r\n\r\n    // Total amounts\r\n    uint256 public totalCollateralShare; // Total collateral supplied\r\n    Rebase public totalAsset; // elastic = yieldBox shares held by the Singularity, base = Total fractions held by asset suppliers\r\n    Rebase public totalBorrow; // elastic = Total token amount to be repayed by borrowers, base = Total parts of the debt held by borrowers\r\n    uint256 public totalBorrowCap;\r\n    mapping(address => mapping(uint256 => uint256)) internal _yieldBoxShares;\r\n\r\n    // User balances\r\n    mapping(address => uint256) public userCollateralShare;\r\n    // userAssetFraction is called balanceOf for ERC20 compatibility (it's in ERC20.sol)\r\n    mapping(address => uint256) public userBorrowPart;\r\n    // map of operator approval\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    /// @notice Exchange and interest rate tracking.\r\n    /// This is 'cached' here because calls to Oracles can be very expensive.\r\n    /// Asset -> collateral = assetAmount * exchangeRate.\r\n    uint256 public exchangeRate;\r\n\r\n    IOracle public oracle;\r\n    bytes public oracleData;\r\n\r\n    // Fees\r\n    uint256 public callerFee = 1000; //1%\r\n    uint256 public protocolFee = 10000; //10%\r\n    uint256 public borrowOpeningFee = 50; //0.05%\r\n\r\n    //Liquidation\r\n    uint256 public liquidationMultiplier = 112000; //12%\r\n    uint256 public orderBookLiquidationMultiplier = 127000; //27%\r\n\r\n    uint256 public closedCollateralizationRate = 75000; // 75%\r\n    uint256 public lqCollateralizationRate = 25000; // 25%\r\n\r\n    uint256 public minLiquidatorReward = 1e3; //1%\r\n    uint256 public maxLiquidatorReward = 1e4; //10%\r\n    uint256 public liquidationBonusAmount = 1e4; //10%\r\n\r\n    //errors\r\n    error NotApproved(address _from, address _operator);\r\n\r\n    // ************** //\r\n    // *** EVENTS *** //\r\n    // ************** //\r\n    event LogExchangeRate(uint256 rate);\r\n    event LogAccrue(\r\n        uint256 accruedAmount,\r\n        uint256 feeFraction,\r\n        uint64 rate,\r\n        uint256 utilization\r\n    );\r\n    event LogAddCollateral(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share\r\n    );\r\n    event LogAddAsset(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share,\r\n        uint256 fraction\r\n    );\r\n    event LogRemoveCollateral(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share\r\n    );\r\n    event LogRemoveAsset(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share,\r\n        uint256 fraction\r\n    );\r\n    event LogBorrow(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 feeAmount,\r\n        uint256 part\r\n    );\r\n    event LogRepay(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 part\r\n    );\r\n    event LogWithdrawFees(address indexed feeTo, uint256 feesEarnedFraction);\r\n    event LogYieldBoxFeesDeposit(uint256 feeShares, uint256 ethAmount);\r\n    event LogApprovalForAll(\r\n        address indexed _from,\r\n        address indexed _operator,\r\n        bool _approved\r\n    );\r\n    event LogBorrowCapUpdated(uint256 _oldVal, uint256 _newVal);\r\n    event PausedUpdated(bool oldState, bool newState);\r\n    event ConservatorUpdated(address indexed old, address indexed _new);\r\n\r\n    // ***************** //\r\n    // *** CONSTANTS *** //\r\n    // ***************** //\r\n    uint256 internal constant COLLATERALIZATION_RATE_PRECISION = 1e5; // Must be less than EXCHANGE_RATE_PRECISION (due to optimization in math)\r\n\r\n    uint256 internal constant MINIMUM_TARGET_UTILIZATION = 7e17; // 70%\r\n    uint256 internal constant MAXIMUM_TARGET_UTILIZATION = 8e17; // 80%\r\n    uint256 internal constant UTILIZATION_PRECISION = 1e18;\r\n    uint256 internal constant FULL_UTILIZATION = 1e18;\r\n    uint256 internal constant FULL_UTILIZATION_MINUS_MAX =\r\n        FULL_UTILIZATION - MAXIMUM_TARGET_UTILIZATION;\r\n    uint256 internal constant FACTOR_PRECISION = 1e18;\r\n\r\n    uint64 internal constant STARTING_INTEREST_PER_SECOND = 317097920; // approx 1% APR\r\n    uint64 internal constant MINIMUM_INTEREST_PER_SECOND = 79274480; // approx 0.25% APR\r\n    uint64 internal constant MAXIMUM_INTEREST_PER_SECOND = 317097920000; // approx 1000% APR\r\n    uint256 internal constant INTEREST_ELASTICITY = 28800e36; // Half or double in 28800 seconds (8 hours) if linear\r\n\r\n    uint256 internal EXCHANGE_RATE_PRECISION = 1e18; //mutable but can only be set in the init method\r\n    uint256 internal constant LIQUIDATION_MULTIPLIER_PRECISION = 1e5;\r\n\r\n    // Fees\r\n    uint256 internal constant FEE_PRECISION = 1e5;\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n    function symbol() public view returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    'tm',\r\n                    collateral.safeSymbol(),\r\n                    '/',\r\n                    asset.safeSymbol(),\r\n                    '-',\r\n                    oracle.symbol(oracleData)\r\n                )\r\n            );\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return\r\n            string(\r\n                abi.encodePacked(\r\n                    'Tapioca Singularity ',\r\n                    collateral.safeName(),\r\n                    '/',\r\n                    asset.safeName(),\r\n                    '-',\r\n                    oracle.name(oracleData)\r\n                )\r\n            );\r\n    }\r\n\r\n    function decimals() external view returns (uint8) {\r\n        return asset.safeDecimals();\r\n    }\r\n\r\n    // totalSupply for ERC20 compatibility\r\n    // BalanceOf[user] represent a fraction\r\n    function totalSupply() public view override returns (uint256) {\r\n        return totalAsset.base;\r\n    }\r\n}\r\n"
    },
    "contracts/singularity/Singularity.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport './SGLCommon.sol';\r\nimport './SGLLiquidation.sol';\r\nimport './SGLLendingBorrowing.sol';\r\n\r\nimport '../interfaces/ISendFrom.sol';\r\nimport 'tapioca-sdk/dist/contracts/libraries/LzLib.sol';\r\n\r\n// solhint-disable max-line-length\r\n\r\n/*\r\n\r\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\____        \r\n _\\///////\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\/////////\\\\\\_\\/////\\\\\\///______/\\\\\\///\\\\\\________/\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__       \r\n  _______\\/\\\\\\________/\\\\\\/////////\\\\\\_\\/\\\\\\_______\\/\\\\\\_____\\/\\\\\\_______/\\\\\\/__\\///\\\\\\____/\\\\\\/____________/\\\\\\/////////\\\\\\_      \r\n   _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\/\\\\\\______/\\\\\\______\\//\\\\\\__/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_     \r\n    _______\\/\\\\\\_______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\/////////________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \r\n     _______\\/\\\\\\_______\\/\\\\\\/////////\\\\\\_\\/\\\\\\_________________\\/\\\\\\_____\\//\\\\\\______/\\\\\\__\\//\\\\\\____________\\/\\\\\\/////////\\\\\\_   \r\n      _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_________________\\/\\\\\\______\\///\\\\\\__/\\\\\\_____\\///\\\\\\__________\\/\\\\\\_______\\/\\\\\\_  \r\n       _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\____\\///\\\\\\\\\\/________\\////\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_ \r\n        _______\\///________\\///________\\///__\\///______________\\///////////_______\\/////_____________\\/////////__\\///________\\///__\r\n\r\n*/\r\n\r\n/// @title Tapioca market\r\ncontract Singularity is SGLCommon {\r\n    using RebaseLibrary for Rebase;\r\n\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n    enum Module {\r\n        Base,\r\n        LendingBorrowing,\r\n        Liquidation\r\n    }\r\n    /// @notice returns the liquidation module\r\n    SGLLiquidation public liquidationModule;\r\n    /// @notice returns the lending module\r\n    SGLLendingBorrowing public lendingBorrowingModule;\r\n\r\n    /// @notice The init function that acts as a constructor\r\n    function init(bytes calldata data) external onlyOnce {\r\n        (\r\n            address _liquidationModule,\r\n            address _lendingBorrowingModule,\r\n            IPenrose tapiocaBar_,\r\n            IERC20 _asset,\r\n            uint256 _assetId,\r\n            IERC20 _collateral,\r\n            uint256 _collateralId,\r\n            IOracle _oracle,\r\n            uint256 _exchangeRatePrecision\r\n        ) = abi.decode(\r\n                data,\r\n                (\r\n                    address,\r\n                    address,\r\n                    IPenrose,\r\n                    IERC20,\r\n                    uint256,\r\n                    IERC20,\r\n                    uint256,\r\n                    IOracle,\r\n                    uint256\r\n                )\r\n            );\r\n\r\n        liquidationModule = SGLLiquidation(_liquidationModule);\r\n        lendingBorrowingModule = SGLLendingBorrowing(_lendingBorrowingModule);\r\n        penrose = tapiocaBar_;\r\n        yieldBox = YieldBox(tapiocaBar_.yieldBox());\r\n        owner = address(penrose);\r\n\r\n        require(\r\n            address(_collateral) != address(0) &&\r\n                address(_asset) != address(0) &&\r\n                address(_oracle) != address(0),\r\n            'SGL: bad pair'\r\n        );\r\n        asset = _asset;\r\n        collateral = _collateral;\r\n        assetId = _assetId;\r\n        collateralId = _collateralId;\r\n        oracle = _oracle;\r\n\r\n        accrueInfo.interestPerSecond = uint64(STARTING_INTEREST_PER_SECOND); // 1% APR, with 1e18 being 100%\r\n\r\n        updateExchangeRate();\r\n\r\n        //default fees\r\n        callerFee = 1000; // 1%\r\n        protocolFee = 10000; // 10%\r\n        borrowOpeningFee = 50; // 0.05%\r\n\r\n        //liquidation\r\n        liquidationMultiplier = 112000; //12%\r\n        orderBookLiquidationMultiplier = 127000; //27%\r\n\r\n        closedCollateralizationRate = 75000;\r\n        lqCollateralizationRate = 25000;\r\n        EXCHANGE_RATE_PRECISION = _exchangeRatePrecision > 0\r\n            ? _exchangeRatePrecision\r\n            : 1e18;\r\n\r\n        minLiquidatorReward = 1e3;\r\n        maxLiquidatorReward = 1e4;\r\n        liquidationBonusAmount = 1e4;\r\n    }\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n    /// @notice returns Total yieldBox shares for user\r\n    /// @param _user The user to check shares for\r\n    /// @param _assetId The asset id to check shares for\r\n    function yieldBoxShares(address _user, uint256 _assetId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return\r\n            yieldBox.balanceOf(_user, _assetId) +\r\n            _yieldBoxShares[_user][_assetId];\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n    /// @notice Allows batched call to Singularity.\r\n    /// @param calls An array encoded call data.\r\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\r\n    function execute(bytes[] calldata calls, bool revertOnFail)\r\n        external\r\n        returns (bool[] memory successes, string[] memory results)\r\n    {\r\n        successes = new bool[](calls.length);\r\n        results = new string[](calls.length);\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(\r\n                calls[i]\r\n            );\r\n            require(success || !revertOnFail, _getRevertMsg(result));\r\n            successes[i] = success;\r\n            results[i] = _getRevertMsg(result);\r\n        }\r\n    }\r\n\r\n    /// @notice Adds `collateral` from msg.sender to the account `to`.\r\n    /// @param from Account to transfer shares from.\r\n    /// @param to The receiver of the tokens.\r\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\r\n    /// False if tokens from msg.sender in `yieldBox` should be transferred.\r\n    /// @param share The amount of shares to add for `to`.\r\n    function addCollateral(\r\n        address from,\r\n        address to,\r\n        bool skim,\r\n        uint256 share\r\n    ) public {\r\n        _executeModule(\r\n            Module.LendingBorrowing,\r\n            abi.encodeWithSelector(\r\n                SGLLendingBorrowing.addCollateral.selector,\r\n                from,\r\n                to,\r\n                skim,\r\n                share\r\n            )\r\n        );\r\n    }\r\n\r\n    /// @notice Removes `share` amount of collateral and transfers it to `to`.\r\n    /// @param from Account to debit collateral from.\r\n    /// @param to The receiver of the shares.\r\n    /// @param share Amount of shares to remove.\r\n    function removeCollateral(\r\n        address from,\r\n        address to,\r\n        uint256 share\r\n    ) public {\r\n        _executeModule(\r\n            Module.LendingBorrowing,\r\n            abi.encodeWithSelector(\r\n                SGLLendingBorrowing.removeCollateral.selector,\r\n                from,\r\n                to,\r\n                share\r\n            )\r\n        );\r\n    }\r\n\r\n    /// @notice Sender borrows `amount` and transfers it to `to`.\r\n    /// @param from Account to borrow for.\r\n    /// @param to The receiver of borrowed tokens.\r\n    /// @param amount Amount to borrow.\r\n    /// @return part Total part of the debt held by borrowers.\r\n    /// @return share Total amount in shares borrowed.\r\n    function borrow(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public returns (uint256 part, uint256 share) {\r\n        bytes memory result = _executeModule(\r\n            Module.LendingBorrowing,\r\n            abi.encodeWithSelector(\r\n                SGLLendingBorrowing.borrow.selector,\r\n                from,\r\n                to,\r\n                amount\r\n            )\r\n        );\r\n        (part, share) = abi.decode(result, (uint256, uint256));\r\n    }\r\n\r\n    /// @notice Repays a loan.\r\n    /// @param from Address to repay from.\r\n    /// @param to Address of the user this payment should go.\r\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\r\n    /// False if tokens from msg.sender in `yieldBox` should be transferred.\r\n    /// @param part The amount to repay. See `userBorrowPart`.\r\n    /// @return amount The total amount repayed.\r\n    function repay(\r\n        address from,\r\n        address to,\r\n        bool skim,\r\n        uint256 part\r\n    ) public returns (uint256 amount) {\r\n        bytes memory result = _executeModule(\r\n            Module.LendingBorrowing,\r\n            abi.encodeWithSelector(\r\n                SGLLendingBorrowing.repay.selector,\r\n                from,\r\n                to,\r\n                skim,\r\n                part\r\n            )\r\n        );\r\n        amount = abi.decode(result, (uint256));\r\n    }\r\n\r\n    /// @notice Entry point for liquidations.\r\n    /// @dev Will call `closedLiquidation()` if not LQ exists or no LQ bid avail exists. Otherwise use LQ.\r\n    /// @param users An array of user addresses.\r\n    /// @param maxBorrowParts A one-to-one mapping to `users`, contains maximum (partial) borrow amounts (to liquidate) of the respective user.\r\n    ///        Ignore for `orderBookLiquidation()`\r\n    /// @param swapper Contract address of the `MultiSwapper` implementation. See `setSwapper`.\r\n    ///        Ignore for `orderBookLiquidation()`\r\n    /// @param collateralToAssetSwapData Extra swap data\r\n    ///        Ignore for `orderBookLiquidation()`\r\n    /// @param usdoToBorrowedSwapData Extra swap data\r\n    ///        Ignore for `closedLiquidation()`\r\n    function liquidate(\r\n        address[] calldata users,\r\n        uint256[] calldata maxBorrowParts,\r\n        ISwapper swapper,\r\n        bytes calldata collateralToAssetSwapData,\r\n        bytes calldata usdoToBorrowedSwapData\r\n    ) external {\r\n        _executeModule(\r\n            Module.Liquidation,\r\n            abi.encodeWithSelector(\r\n                SGLLiquidation.liquidate.selector,\r\n                users,\r\n                maxBorrowParts,\r\n                swapper,\r\n                collateralToAssetSwapData,\r\n                usdoToBorrowedSwapData\r\n            )\r\n        );\r\n    }\r\n\r\n    /// @notice Withdraw the fees accumulated in `accrueInfo.feesEarnedFraction` to the balance of `feeTo`.\r\n    function withdrawFeesEarned() public {\r\n        accrue();\r\n        address _feeTo = penrose.feeTo();\r\n        uint256 _feesEarnedFraction = accrueInfo.feesEarnedFraction;\r\n        balanceOf[_feeTo] += _feesEarnedFraction;\r\n        emit Transfer(address(0), _feeTo, _feesEarnedFraction);\r\n        accrueInfo.feesEarnedFraction = 0;\r\n        emit LogWithdrawFees(_feeTo, _feesEarnedFraction);\r\n    }\r\n\r\n    /// @notice Withdraw the balance of `feeTo`, swap asset into TAP and deposit it to yieldBox of `feeTo`\r\n    function depositFeesToYieldBox(\r\n        ISwapper swapper,\r\n        IPenrose.SwapData calldata swapData\r\n    ) public {\r\n        if (accrueInfo.feesEarnedFraction > 0) {\r\n            withdrawFeesEarned();\r\n        }\r\n        require(penrose.swappers(swapper), 'SGL: Invalid swapper');\r\n        address _feeTo = penrose.feeTo();\r\n\r\n        uint256 feeShares = _removeAsset(\r\n            _feeTo,\r\n            address(this),\r\n            balanceOf[_feeTo],\r\n            false\r\n        );\r\n        if (feeShares == 0) return;\r\n\r\n        uint256 wethAssetId = penrose.wethAssetId();\r\n        uint256 amount = 0;\r\n        if (assetId != wethAssetId) {\r\n            yieldBox.transfer(\r\n                address(this),\r\n                address(swapper),\r\n                assetId,\r\n                feeShares\r\n            );\r\n\r\n            (amount, ) = swapper.swap(\r\n                assetId,\r\n                penrose.wethAssetId(),\r\n                feeShares,\r\n                _feeTo,\r\n                swapData.minAssetAmount,\r\n                abi.encode(_assetToWethSwapPath())\r\n            );\r\n        } else {\r\n            yieldBox.transfer(address(this), _feeTo, assetId, feeShares);\r\n        }\r\n\r\n        emit LogYieldBoxFeesDeposit(feeShares, amount);\r\n    }\r\n\r\n    /// @notice Withdraw to another layer\r\n    /// @dev if `dstChainId` is 0, withdraw happens on the same chain\r\n    function withdrawTo(\r\n        address from,\r\n        uint16 dstChainId,\r\n        bytes32 receiver,\r\n        uint256 amount,\r\n        bytes calldata adapterParams,\r\n        address payable refundAddress\r\n    ) public payable allowed(from) {\r\n        if (dstChainId == 0) {\r\n            yieldBox.withdraw(\r\n                assetId,\r\n                from,\r\n                LzLib.bytes32ToAddress(receiver),\r\n                amount,\r\n                0\r\n            );\r\n            return;\r\n        }\r\n        try\r\n            IERC165(address(asset)).supportsInterface(\r\n                type(ISendFrom).interfaceId\r\n            )\r\n        {} catch {\r\n            return;\r\n        }\r\n\r\n        require(\r\n            yieldBox.toAmount(\r\n                assetId,\r\n                yieldBox.balanceOf(from, assetId),\r\n                false\r\n            ) >= amount,\r\n            'SGL: not available'\r\n        );\r\n\r\n        yieldBox.withdraw(assetId, from, address(this), amount, 0);\r\n        ISendFrom.LzCallParams memory callParams = ISendFrom.LzCallParams({\r\n            refundAddress: msg.value > 0 ? refundAddress : payable(this),\r\n            zroPaymentAddress: address(0),\r\n            adapterParams: adapterParams\r\n        });\r\n        ISendFrom(address(asset)).sendFrom{\r\n            value: msg.value > 0 ? msg.value : address(this).balance\r\n        }(address(this), dstChainId, receiver, amount, callParams);\r\n    }\r\n\r\n    // *********************** //\r\n    // *** OWNER FUNCTIONS *** //\r\n    // *********************** //\r\n    /// @notice Set the bonus amount a liquidator can make use of, on top of the amount needed to make the user solvent\r\n    /// @param _val the new value\r\n    function setLiquidationBonusAmount(uint256 _val) external onlyOwner {\r\n        require(_val < FEE_PRECISION, 'SGL: not valid');\r\n        liquidationBonusAmount = _val;\r\n    }\r\n\r\n    /// @notice Set the liquidator min reward\r\n    /// @param _val the new value\r\n    function setMinLiquidatorReward(uint256 _val) external onlyOwner {\r\n        require(_val < FEE_PRECISION, 'SGL: not valid');\r\n        require(_val < maxLiquidatorReward, 'SGL: not valid');\r\n        minLiquidatorReward = _val;\r\n    }\r\n\r\n    /// @notice Set the liquidator max reward\r\n    /// @param _val the new value\r\n    function setMaxLiquidatorReward(uint256 _val) external onlyOwner {\r\n        require(_val < FEE_PRECISION, 'SGL: not valid');\r\n        require(_val > minLiquidatorReward, 'SGL: not valid');\r\n        maxLiquidatorReward = _val;\r\n    }\r\n\r\n    /// @notice Set the Conservator address\r\n    /// @dev Conservator can pause the contract\r\n    /// @param _conservator The new address\r\n    function setConservator(address _conservator) external onlyOwner {\r\n        require(_conservator != address(0), 'SGL: address not valid');\r\n        emit ConservatorUpdated(conservator, _conservator);\r\n        conservator = _conservator;\r\n    }\r\n\r\n    /// @notice updates the pause state of the contract\r\n    /// @param val the new value\r\n    function updatePause(bool val) external {\r\n        require(msg.sender == conservator, 'SGL: unauthorized');\r\n        require(val != paused, 'SGL: same state');\r\n        emit PausedUpdated(paused, val);\r\n        paused = val;\r\n    }\r\n\r\n    /// @notice sets the collateralization rate used for LiquidationQueue type liquidations\r\n    /// @dev can only be called by the owner\r\n    /// @param _val the new value\r\n    function setLqCollateralizationRate(uint256 _val) external onlyOwner {\r\n        require(_val <= COLLATERALIZATION_RATE_PRECISION, 'SGL: not valid');\r\n        lqCollateralizationRate = _val;\r\n    }\r\n\r\n    /// @notice sets closed collateralization rate\r\n    /// @dev can only be called by the owner\r\n    /// @param _val the new value\r\n    function setClosedCollateralizationRate(uint256 _val) external onlyOwner {\r\n        require(_val <= COLLATERALIZATION_RATE_PRECISION, 'SGL: not valid');\r\n        closedCollateralizationRate = _val;\r\n    }\r\n\r\n    /// @notice sets the liquidation multiplier\r\n    /// @dev can only be called by the owner\r\n    /// @param _val the new value\r\n    function setLiquidationMultiplier(uint256 _val) external onlyOwner {\r\n        liquidationMultiplier = _val;\r\n    }\r\n\r\n    /// @notice sets the order book multiplier\r\n    /// @dev can only be called by the owner\r\n    /// @param _val the new value\r\n    function setOrderBookLiquidationMultiplier(uint256 _val)\r\n        external\r\n        onlyOwner\r\n    {\r\n        orderBookLiquidationMultiplier = _val;\r\n    }\r\n\r\n    /// @notice sets the borrowing opening fee\r\n    /// @dev can only be called by the owner\r\n    /// @param _val the new value\r\n    function setBorrowOpeningFee(uint256 _val) external onlyOwner {\r\n        require(_val <= FEE_PRECISION, 'SGL: not valid');\r\n        borrowOpeningFee = _val;\r\n    }\r\n\r\n    /// @notice sets the liquidator fee\r\n    /// @dev can only be called by the owner\r\n    /// @param _val the new value\r\n    function setCallerFee(uint256 _val) external onlyOwner {\r\n        require(_val <= FEE_PRECISION, 'SGL: not valid');\r\n        callerFee = _val;\r\n    }\r\n\r\n    /// @notice sets the protocol fee\r\n    /// @dev can only be called by the owner\r\n    /// @param _val the new value\r\n    function setProtocolFee(uint256 _val) external onlyOwner {\r\n        require(_val <= FEE_PRECISION, 'SGL: not valid');\r\n        protocolFee = _val;\r\n    }\r\n\r\n    /// @notice Set a new LiquidationQueue.\r\n    /// @param _liquidationQueue The address of the new LiquidationQueue contract.\r\n    function setLiquidationQueue(ILiquidationQueue _liquidationQueue)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(_liquidationQueue.onlyOnce(), 'SGL: LQ not initalized');\r\n        liquidationQueue = _liquidationQueue;\r\n    }\r\n\r\n    /// @notice Execute an only owner function inside of the LiquidationQueue\r\n    function updateLQExecutionSwapper(address _swapper) external onlyOwner {\r\n        liquidationQueue.setBidExecutionSwapper(_swapper);\r\n    }\r\n\r\n    /// @notice Execute an only owner function inside of the LiquidationQueue\r\n    function updateLQUsdoSwapper(address _swapper) external onlyOwner {\r\n        liquidationQueue.setUsdoSwapper(_swapper);\r\n    }\r\n\r\n    /// @notice sets max borrowable amount\r\n    function setBorrowCap(uint256 _cap) external notPaused onlyOwner {\r\n        emit LogBorrowCapUpdated(totalBorrowCap, _cap);\r\n        totalBorrowCap = _cap;\r\n    }\r\n\r\n    // ************************* //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n\r\n    function _getRevertMsg(bytes memory _returnData)\r\n        private\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return 'SGL: no return data';\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }\r\n\r\n    function _extractModule(Module _module) private view returns (address) {\r\n        address module;\r\n        if (_module == Module.LendingBorrowing) {\r\n            module = address(lendingBorrowingModule);\r\n        } else if (_module == Module.Liquidation) {\r\n            module = address(liquidationModule);\r\n        }\r\n        if (module == address(0)) {\r\n            revert('SGL: module not set');\r\n        }\r\n\r\n        return module;\r\n    }\r\n\r\n    function _executeModule(Module _module, bytes memory _data)\r\n        private\r\n        returns (bytes memory returnData)\r\n    {\r\n        bool success = true;\r\n        address module = _extractModule(_module);\r\n\r\n        (success, returnData) = module.delegatecall(_data);\r\n        if (!success) {\r\n            revert(_getRevertMsg(returnData));\r\n        }\r\n    }\r\n\r\n    function _executeViewModule(Module _module, bytes memory _data)\r\n        private\r\n        view\r\n        returns (bytes memory returnData)\r\n    {\r\n        bool success = true;\r\n        address module = _extractModule(_module);\r\n\r\n        (success, returnData) = module.staticcall(_data);\r\n        if (!success) {\r\n            revert(_getRevertMsg(returnData));\r\n        }\r\n    }\r\n\r\n    receive() external payable {}\r\n}\r\n"
    },
    "contracts/swappers/CurveSwapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport '@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol';\r\n\r\nimport './ISwapper.sol';\r\nimport '../interfaces/IPenrose.sol';\r\nimport '../../yieldbox/contracts/YieldBox.sol';\r\n\r\nimport '../libraries/ICurvePool.sol';\r\n\r\n/*\r\n\r\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\____        \r\n _\\///////\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\/////////\\\\\\_\\/////\\\\\\///______/\\\\\\///\\\\\\________/\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__       \r\n  _______\\/\\\\\\________/\\\\\\/////////\\\\\\_\\/\\\\\\_______\\/\\\\\\_____\\/\\\\\\_______/\\\\\\/__\\///\\\\\\____/\\\\\\/____________/\\\\\\/////////\\\\\\_      \r\n   _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\/\\\\\\______/\\\\\\______\\//\\\\\\__/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_     \r\n    _______\\/\\\\\\_______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\/////////________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \r\n     _______\\/\\\\\\_______\\/\\\\\\/////////\\\\\\_\\/\\\\\\_________________\\/\\\\\\_____\\//\\\\\\______/\\\\\\__\\//\\\\\\____________\\/\\\\\\/////////\\\\\\_   \r\n      _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_________________\\/\\\\\\______\\///\\\\\\__/\\\\\\_____\\///\\\\\\__________\\/\\\\\\_______\\/\\\\\\_  \r\n       _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\____\\///\\\\\\\\\\/________\\////\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_ \r\n        _______\\///________\\///________\\///__\\///______________\\///////////_______\\/////_____________\\/////////__\\///________\\///__\r\n\r\n*/\r\n\r\n/// @title Curve pool swapper\r\ncontract CurveSwapper is ISwapper {\r\n    using BoringERC20 for IERC20;\r\n\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n    ICurvePool public curvePool;\r\n\r\n    YieldBox private immutable yieldBox;\r\n\r\n    /// @notice creates a new CurveSwapper contract\r\n    /// @param _curvePool CurvePool address\r\n    /// @param _bar Penrose address\r\n    constructor(ICurvePool _curvePool, IPenrose _bar) {\r\n        curvePool = _curvePool;\r\n        yieldBox = YieldBox(_bar.yieldBox());\r\n    }\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n    /// @notice returns the possible output amount for input share\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param shareIn Shares to get the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    function getOutputAmount(\r\n        uint256 tokenInId,\r\n        uint256 shareIn,\r\n        bytes calldata dexData\r\n    ) external view override returns (uint256 amountOut) {\r\n        uint256[] memory tokenIndexes = abi.decode(dexData, (uint256[]));\r\n        uint256 amountIn = yieldBox.toAmount(tokenInId, shareIn, false);\r\n        amountOut = curvePool.get_dy(\r\n            int128(int256(tokenIndexes[0])),\r\n            int128(int256(tokenIndexes[1])),\r\n            amountIn\r\n        );\r\n    }\r\n\r\n    function getInputAmount(\r\n        uint256,\r\n        uint256,\r\n        bytes calldata\r\n    ) external pure returns (uint256) {\r\n        revert('Not implemented');\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n    /// @notice swaps token in with token out\r\n    /// @dev returns both amount and shares\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareIn Shares to be swapped\r\n    /// @param to Receiver address\r\n    /// @param amountOutMin Minimum amount to be received\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    ///     - for Curve, it should contain uint256[] tokenIndexes\r\n    function swap(\r\n        uint256 tokenInId,\r\n        uint256 tokenOutId,\r\n        uint256 shareIn,\r\n        address to,\r\n        uint256 amountOutMin,\r\n        bytes calldata dexData\r\n    ) external override returns (uint256 amountOut, uint256 shareOut) {\r\n        uint256[] memory tokenIndexes = abi.decode(dexData, (uint256[]));\r\n\r\n        (uint256 amountIn, ) = yieldBox.withdraw(\r\n            tokenInId,\r\n            address(this),\r\n            address(this),\r\n            0,\r\n            shareIn\r\n        );\r\n\r\n        amountOut = _swapTokensForTokens(\r\n            int128(int256(tokenIndexes[0])),\r\n            int128(int256(tokenIndexes[1])),\r\n            amountIn,\r\n            amountOutMin\r\n        );\r\n\r\n        (, address tokenOutAddress, , ) = yieldBox.assets(tokenOutId);\r\n        IERC20(tokenOutAddress).approve(address(yieldBox), amountOut);\r\n        (, shareOut) = yieldBox.depositAsset(\r\n            tokenOutId,\r\n            address(this),\r\n            to,\r\n            amountOut,\r\n            0\r\n        );\r\n    }\r\n\r\n    // ************************* //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    function _swapTokensForTokens(\r\n        int128 i,\r\n        int128 j,\r\n        uint256 amountIn,\r\n        uint256 amountOutMin\r\n    ) private returns (uint256) {\r\n        address tokenOut = curvePool.coins(uint256(uint128(j)));\r\n\r\n        uint256 outputAmount = curvePool.get_dy(i, j, amountIn);\r\n        require(outputAmount >= amountOutMin, 'insufficient-amount-out');\r\n\r\n        uint256 balanceBefore = IERC20(tokenOut).balanceOf(address(this));\r\n        curvePool.exchange(i, j, amountIn, amountOutMin);\r\n        uint256 balanceAfter = IERC20(tokenOut).balanceOf(address(this));\r\n        require(balanceAfter > balanceBefore, 'swap failed');\r\n\r\n        return balanceAfter - balanceBefore;\r\n    }\r\n}\r\n"
    },
    "contracts/swappers/ISwapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ninterface ISwapper {\r\n    /// @notice returns the possible output amount for input share\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param shareIn Shares to get the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    ///     - for Curve, it should contain uint256[] tokenIndexes\r\n    function getOutputAmount(\r\n        uint256 tokenInId,\r\n        uint256 shareIn,\r\n        bytes calldata dexData\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    /// @notice returns necessary input amount for a fixed output amount\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareOut Shares out to compute the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    function getInputAmount(\r\n        uint256 tokenOutId,\r\n        uint256 shareOut,\r\n        bytes calldata dexData\r\n    ) external view returns (uint256 amountIn);\r\n\r\n    /// @notice swaps token in with token out\r\n    /// @dev returns both amount and shares\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareIn Shares to be swapped\r\n    /// @param to Receiver address\r\n    /// @param amountOutMin Minimum amount to be received\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    ///     - for Curve, it should contain uint256[] tokenIndexes\r\n    function swap(\r\n        uint256 tokenInId,\r\n        uint256 tokenOutId,\r\n        uint256 shareIn,\r\n        address to,\r\n        uint256 amountOutMin,\r\n        bytes calldata dexData\r\n    ) external returns (uint256 amountOut, uint256 shareOut);\r\n}\r\n"
    },
    "contracts/swappers/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\n/// @title Contains 512-bit math functions\r\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\r\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\r\nlibrary FullMath {\r\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\r\n    function mulDiv(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        // 512-bit multiply [prod1 prod0] = a * b\r\n        // Compute the product mod 2**256 and mod 2**256 - 1\r\n        // then use the Chinese Remainder Theorem to reconstruct\r\n        // the 512 bit result. The result is stored in two 256\r\n        // variables such that product = prod1 * 2**256 + prod0\r\n        uint256 prod0; // Least significant 256 bits of the product\r\n        uint256 prod1; // Most significant 256 bits of the product\r\n        assembly {\r\n            let mm := mulmod(a, b, not(0))\r\n            prod0 := mul(a, b)\r\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n        }\r\n\r\n        // Handle non-overflow cases, 256 by 256 division\r\n        if (prod1 == 0) {\r\n            require(denominator > 0);\r\n            assembly {\r\n                result := div(prod0, denominator)\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Make sure the result is less than 2**256.\r\n        // Also prevents denominator == 0\r\n        require(denominator > prod1);\r\n\r\n        ///////////////////////////////////////////////\r\n        // 512 by 256 division.\r\n        ///////////////////////////////////////////////\r\n\r\n        // Make division exact by subtracting the remainder from [prod1 prod0]\r\n        // Compute remainder using mulmod\r\n        uint256 remainder;\r\n        assembly {\r\n            remainder := mulmod(a, b, denominator)\r\n        }\r\n        // Subtract 256 bit number from 512 bit number\r\n        assembly {\r\n            prod1 := sub(prod1, gt(remainder, prod0))\r\n            prod0 := sub(prod0, remainder)\r\n        }\r\n\r\n        // Factor powers of two out of denominator\r\n        // Compute largest power of two divisor of denominator.\r\n        // Always >= 1.\r\n        uint256 twos = denominator & (~denominator + 1);\r\n        // Divide denominator by power of two\r\n        assembly {\r\n            denominator := div(denominator, twos)\r\n        }\r\n\r\n        // Divide [prod1 prod0] by the factors of two\r\n        assembly {\r\n            prod0 := div(prod0, twos)\r\n        }\r\n        // Shift in bits from prod1 into prod0. For this we need\r\n        // to flip `twos` such that it is 2**256 / twos.\r\n        // If twos is zero, then it becomes one\r\n        assembly {\r\n            twos := add(div(sub(0, twos), twos), 1)\r\n        }\r\n        prod0 |= prod1 * twos;\r\n\r\n        // Invert denominator mod 2**256\r\n        // Now that denominator is an odd number, it has an inverse\r\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\r\n        // Compute the inverse by starting with a seed that is correct\r\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\r\n        uint256 inv = (3 * denominator) ^ 2;\r\n        // Now use Newton-Raphson iteration to improve the precision.\r\n        // Thanks to Hensel's lifting lemma, this also works in modular\r\n        // arithmetic, doubling the correct bits in each step.\r\n        inv *= 2 - denominator * inv; // inverse mod 2**8\r\n        inv *= 2 - denominator * inv; // inverse mod 2**16\r\n        inv *= 2 - denominator * inv; // inverse mod 2**32\r\n        inv *= 2 - denominator * inv; // inverse mod 2**64\r\n        inv *= 2 - denominator * inv; // inverse mod 2**128\r\n        inv *= 2 - denominator * inv; // inverse mod 2**256\r\n\r\n        // Because the division is now exact we can divide by multiplying\r\n        // with the modular inverse of denominator. This will give us the\r\n        // correct result modulo 2**256. Since the precoditions guarantee\r\n        // that the outcome is less than 2**256, this is the final result.\r\n        // We don't need to compute the high bits of the result and prod1\r\n        // is no longer required.\r\n        result = prod0 * inv;\r\n        return result;\r\n    }\r\n\r\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n    /// @param a The multiplicand\r\n    /// @param b The multiplier\r\n    /// @param denominator The divisor\r\n    /// @return result The 256-bit result\r\n    function mulDivRoundingUp(\r\n        uint256 a,\r\n        uint256 b,\r\n        uint256 denominator\r\n    ) internal pure returns (uint256 result) {\r\n        result = mulDiv(a, b, denominator);\r\n        if (mulmod(a, b, denominator) > 0) {\r\n            require(result < type(uint256).max);\r\n            result++;\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/swappers/libraries/OracleLibrary.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^0.8.0;\r\n\r\nimport './FullMath.sol';\r\nimport './TickMath.sol';\r\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\r\n\r\n/// @title Oracle library\r\n/// @notice Provides functions to integrate with V3 pool oracle\r\nlibrary OracleLibrary {\r\n    /// @notice Calculates time-weighted means of tick and liquidity for a given Uniswap V3 pool\r\n    /// @param pool Address of the pool that we want to observe\r\n    /// @param secondsAgo Number of seconds in the past from which to calculate the time-weighted means\r\n    /// @return arithmeticMeanTick The arithmetic mean tick from (block.timestamp - secondsAgo) to block.timestamp\r\n    /// @return harmonicMeanLiquidity The harmonic mean liquidity from (block.timestamp - secondsAgo) to block.timestamp\r\n    function consult(address pool, uint32 secondsAgo)\r\n        internal\r\n        view\r\n        returns (int24 arithmeticMeanTick, uint128 harmonicMeanLiquidity)\r\n    {\r\n        require(secondsAgo != 0, 'BP');\r\n\r\n        uint32[] memory secondsAgos = new uint32[](2);\r\n        secondsAgos[0] = secondsAgo;\r\n        secondsAgos[1] = 0;\r\n\r\n        (\r\n            int56[] memory tickCumulatives,\r\n            uint160[] memory secondsPerLiquidityCumulativeX128s\r\n        ) = IUniswapV3Pool(pool).observe(secondsAgos);\r\n\r\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\r\n        uint160 secondsPerLiquidityCumulativesDelta = secondsPerLiquidityCumulativeX128s[\r\n                1\r\n            ] - secondsPerLiquidityCumulativeX128s[0];\r\n\r\n        arithmeticMeanTick = int24(tickCumulativesDelta / int32(secondsAgo));\r\n        // Always round to negative infinity\r\n        if (\r\n            tickCumulativesDelta < 0 && (tickCumulativesDelta % int32(secondsAgo) != 0)\r\n        ) arithmeticMeanTick--;\r\n\r\n        // We are multiplying here instead of shifting to ensure that harmonicMeanLiquidity doesn't overflow uint128\r\n        uint192 secondsAgoX160 = uint192(secondsAgo) * type(uint160).max;\r\n        harmonicMeanLiquidity = uint128(\r\n            secondsAgoX160 /\r\n                (uint192(secondsPerLiquidityCumulativesDelta) << 32)\r\n        );\r\n    }\r\n\r\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\r\n    /// @param tick Tick value used to calculate the quote\r\n    /// @param baseAmount Amount of token to be converted\r\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\r\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\r\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\r\n    function getQuoteAtTick(\r\n        int24 tick,\r\n        uint128 baseAmount,\r\n        address baseToken,\r\n        address quoteToken\r\n    ) internal pure returns (uint256 quoteAmount) {\r\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\r\n\r\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\r\n        if (sqrtRatioX96 <= type(uint128).max) {\r\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\r\n            quoteAmount = baseToken < quoteToken\r\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\r\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\r\n        } else {\r\n            uint256 ratioX128 = FullMath.mulDiv(\r\n                sqrtRatioX96,\r\n                sqrtRatioX96,\r\n                1 << 64\r\n            );\r\n            quoteAmount = baseToken < quoteToken\r\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\r\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\r\n        }\r\n    }\r\n\r\n    /// @notice Given a pool, it returns the number of seconds ago of the oldest stored observation\r\n    /// @param pool Address of Uniswap V3 pool that we want to observe\r\n    /// @return secondsAgo The number of seconds ago of the oldest observation stored for the pool\r\n    function getOldestObservationSecondsAgo(address pool)\r\n        internal\r\n        view\r\n        returns (uint32 secondsAgo)\r\n    {\r\n        (\r\n            ,\r\n            ,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            ,\r\n            ,\r\n\r\n        ) = IUniswapV3Pool(pool).slot0();\r\n        require(observationCardinality > 0, 'NI');\r\n\r\n        (uint32 observationTimestamp, , , bool initialized) = IUniswapV3Pool(\r\n            pool\r\n        ).observations((observationIndex + 1) % observationCardinality);\r\n\r\n        // The next index might not be initialized if the cardinality is in the process of increasing\r\n        // In this case the oldest observation is always in index 0\r\n        if (!initialized) {\r\n            (observationTimestamp, , , ) = IUniswapV3Pool(pool).observations(0);\r\n        }\r\n\r\n        secondsAgo = uint32(block.timestamp) - observationTimestamp;\r\n    }\r\n\r\n    /// @notice Given a pool, it returns the tick value as of the start of the current block\r\n    /// @param pool Address of Uniswap V3 pool\r\n    /// @return The tick that the pool was in at the start of the current block\r\n    function getBlockStartingTickAndLiquidity(address pool)\r\n        internal\r\n        view\r\n        returns (int24, uint128)\r\n    {\r\n        (\r\n            ,\r\n            int24 tick,\r\n            uint16 observationIndex,\r\n            uint16 observationCardinality,\r\n            ,\r\n            ,\r\n\r\n        ) = IUniswapV3Pool(pool).slot0();\r\n\r\n        // 2 observations are needed to reliably calculate the block starting tick\r\n        require(observationCardinality > 1, 'NEO');\r\n\r\n        // If the latest observation occurred in the past, then no tick-changing trades have happened in this block\r\n        // therefore the tick in `slot0` is the same as at the beginning of the current block.\r\n        // We don't need to check if this observation is initialized - it is guaranteed to be.\r\n        (\r\n            uint32 observationTimestamp,\r\n            int56 tickCumulative,\r\n            uint160 secondsPerLiquidityCumulativeX128,\r\n\r\n        ) = IUniswapV3Pool(pool).observations(observationIndex);\r\n        if (observationTimestamp != uint32(block.timestamp)) {\r\n            return (tick, IUniswapV3Pool(pool).liquidity());\r\n        }\r\n\r\n        uint256 prevIndex = (uint256(observationIndex) +\r\n            observationCardinality -\r\n            1) % observationCardinality;\r\n        (\r\n            uint32 prevObservationTimestamp,\r\n            int56 prevTickCumulative,\r\n            uint160 prevSecondsPerLiquidityCumulativeX128,\r\n            bool prevInitialized\r\n        ) = IUniswapV3Pool(pool).observations(prevIndex);\r\n\r\n        require(prevInitialized, 'ONI');\r\n\r\n        uint32 delta = observationTimestamp - prevObservationTimestamp;\r\n        tick = int24((tickCumulative - prevTickCumulative) / int32(delta));\r\n        uint128 liquidity = uint128(\r\n            (uint192(delta) * type(uint160).max) /\r\n                (uint192(\r\n                    secondsPerLiquidityCumulativeX128 -\r\n                        prevSecondsPerLiquidityCumulativeX128\r\n                ) << 32)\r\n        );\r\n        return (tick, liquidity);\r\n    }\r\n\r\n    /// @notice Information for calculating a weighted arithmetic mean tick\r\n    struct WeightedTickData {\r\n        int24 tick;\r\n        uint128 weight;\r\n    }\r\n\r\n    /// @notice Given an array of ticks and weights, calculates the weighted arithmetic mean tick\r\n    /// @param weightedTickData An array of ticks and weights\r\n    /// @return weightedArithmeticMeanTick The weighted arithmetic mean tick\r\n    /// @dev Each entry of `weightedTickData` should represents ticks from pools with the same underlying pool tokens. If they do not,\r\n    /// extreme care must be taken to ensure that ticks are comparable (including decimal differences).\r\n    /// @dev Note that the weighted arithmetic mean tick corresponds to the weighted geometric mean price.\r\n    function getWeightedArithmeticMeanTick(\r\n        WeightedTickData[] memory weightedTickData\r\n    ) internal pure returns (int24 weightedArithmeticMeanTick) {\r\n        // Accumulates the sum of products between each tick and its weight\r\n        int256 numerator;\r\n\r\n        // Accumulates the sum of the weights\r\n        uint256 denominator;\r\n\r\n        // Products fit in 152 bits, so it would take an array of length ~2**104 to overflow this logic\r\n        for (uint256 i; i < weightedTickData.length; i++) {\r\n            numerator +=\r\n                weightedTickData[i].tick *\r\n                int256(uint256(weightedTickData[i].weight));\r\n            denominator += weightedTickData[i].weight;\r\n        }\r\n\r\n        weightedArithmeticMeanTick = int24(numerator / int256(denominator));\r\n        // Always round to negative infinity\r\n        if (numerator < 0 && (numerator % int256(denominator) != 0))\r\n            weightedArithmeticMeanTick--;\r\n    }\r\n\r\n    /// @notice Returns the \"synthetic\" tick which represents the price of the first entry in `tokens` in terms of the last\r\n    /// @dev Useful for calculating relative prices along routes.\r\n    /// @dev There must be one tick for each pairwise set of tokens.\r\n    /// @param tokens The token contract addresses\r\n    /// @param ticks The ticks, representing the price of each token pair in `tokens`\r\n    /// @return syntheticTick The synthetic tick, representing the relative price of the outermost tokens in `tokens`\r\n    function getChainedPrice(address[] memory tokens, int24[] memory ticks)\r\n        internal\r\n        pure\r\n        returns (int256 syntheticTick)\r\n    {\r\n        require(tokens.length - 1 == ticks.length, 'DL');\r\n        for (uint256 i = 1; i <= ticks.length; i++) {\r\n            // check the tokens for address sort order, then accumulate the\r\n            // ticks into the running synthetic tick, ensuring that intermediate tokens \"cancel out\"\r\n            tokens[i - 1] < tokens[i]\r\n                ? syntheticTick += ticks[i - 1]\r\n                : syntheticTick -= ticks[i - 1];\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/swappers/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^0.8.0;\r\n\r\n/// @title Math library for computing sqrt prices from ticks and vice versa\r\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\r\n/// prices between 2**-128 and 2**128\r\nlibrary TickMath {\r\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\r\n    int24 internal constant MIN_TICK = -887272;\r\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\r\n    int24 internal constant MAX_TICK = -MIN_TICK;\r\n\r\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\r\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\r\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\r\n    uint160 internal constant MAX_SQRT_RATIO =\r\n        1461446703485210103287273052203988822378723970342;\r\n\r\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\r\n    /// @dev Throws if |tick| > max tick\r\n    /// @param tick The input tick for the above formula\r\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\r\n    /// at the given tick\r\n    function getSqrtRatioAtTick(int24 tick)\r\n        internal\r\n        pure\r\n        returns (uint160 sqrtPriceX96)\r\n    {\r\n        uint256 absTick = tick < 0\r\n            ? uint256(-int256(tick))\r\n            : uint256(int256(tick));\r\n        require(absTick <= uint256(uint24(MAX_TICK)), 'T');\r\n\r\n        uint256 ratio = absTick & 0x1 != 0\r\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\r\n            : 0x100000000000000000000000000000000;\r\n        if (absTick & 0x2 != 0)\r\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\r\n        if (absTick & 0x4 != 0)\r\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\r\n        if (absTick & 0x8 != 0)\r\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\r\n        if (absTick & 0x10 != 0)\r\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\r\n        if (absTick & 0x20 != 0)\r\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\r\n        if (absTick & 0x40 != 0)\r\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\r\n        if (absTick & 0x80 != 0)\r\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\r\n        if (absTick & 0x100 != 0)\r\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\r\n        if (absTick & 0x200 != 0)\r\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\r\n        if (absTick & 0x400 != 0)\r\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\r\n        if (absTick & 0x800 != 0)\r\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\r\n        if (absTick & 0x1000 != 0)\r\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\r\n        if (absTick & 0x2000 != 0)\r\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\r\n        if (absTick & 0x4000 != 0)\r\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\r\n        if (absTick & 0x8000 != 0)\r\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\r\n        if (absTick & 0x10000 != 0)\r\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\r\n        if (absTick & 0x20000 != 0)\r\n            ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\r\n        if (absTick & 0x40000 != 0)\r\n            ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\r\n        if (absTick & 0x80000 != 0)\r\n            ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\r\n\r\n        if (tick > 0) ratio = type(uint256).max / ratio;\r\n\r\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\r\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\r\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\r\n        sqrtPriceX96 = uint160(\r\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\r\n        );\r\n    }\r\n\r\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\r\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\r\n    /// ever return.\r\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\r\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\r\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96)\r\n        internal\r\n        pure\r\n        returns (int24 tick)\r\n    {\r\n        // second inequality must be < because the price can never reach the price at the max tick\r\n        require(\r\n            sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\r\n            'R'\r\n        );\r\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\r\n\r\n        uint256 r = ratio;\r\n        uint256 msb = 0;\r\n\r\n        assembly {\r\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(5, gt(r, 0xFFFFFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(4, gt(r, 0xFFFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(3, gt(r, 0xFF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(2, gt(r, 0xF))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := shl(1, gt(r, 0x3))\r\n            msb := or(msb, f)\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            let f := gt(r, 0x1)\r\n            msb := or(msb, f)\r\n        }\r\n\r\n        if (msb >= 128) r = ratio >> (msb - 127);\r\n        else r = ratio << (127 - msb);\r\n\r\n        int256 log_2 = (int256(msb) - 128) << 64;\r\n\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(63, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(62, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(61, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(60, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(59, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(58, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(57, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(56, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(55, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(54, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(53, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(52, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(51, f))\r\n            r := shr(f, r)\r\n        }\r\n        assembly {\r\n            r := shr(127, mul(r, r))\r\n            let f := shr(128, r)\r\n            log_2 := or(log_2, shl(50, f))\r\n        }\r\n\r\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\r\n\r\n        int24 tickLow = int24(\r\n            (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\r\n        );\r\n        int24 tickHi = int24(\r\n            (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\r\n        );\r\n\r\n        tick = tickLow == tickHi\r\n            ? tickLow\r\n            : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\r\n            ? tickHi\r\n            : tickLow;\r\n    }\r\n}\r\n"
    },
    "contracts/swappers/MultiSwapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport '@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol';\r\n\r\nimport './ISwapper.sol';\r\nimport '../interfaces/IPenrose.sol';\r\nimport '../../yieldbox/contracts/YieldBox.sol';\r\n\r\nimport '../libraries/IUniswapV2Factory.sol';\r\nimport '../libraries/UniswapV2Library.sol';\r\nimport '../libraries/IUniswapV2Pair.sol';\r\n\r\n/// Modified from https://github.com/sushiswap/kashi-lending/blob/master/contracts/swappers/SushiSwapMultiSwapper.sol\r\ncontract MultiSwapper is ISwapper {\r\n    using BoringERC20 for IERC20;\r\n\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n    address private immutable factory;\r\n    YieldBox private immutable yieldBox;\r\n    bytes32 private immutable pairCodeHash;\r\n\r\n    /// @notice creates a new MultiSwapper contract\r\n    /// @param _factory UniswapV2Factory address\r\n    /// @param _tapiocaBar Penrose address\r\n    /// @param _pairCodeHash UniswapV2 pair code hash\r\n    constructor(\r\n        address _factory,\r\n        IPenrose _tapiocaBar,\r\n        bytes32 _pairCodeHash\r\n    ) {\r\n        factory = _factory;\r\n        yieldBox = YieldBox(_tapiocaBar.yieldBox());\r\n        pairCodeHash = _pairCodeHash;\r\n    }\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n    /// @notice returns the possible output amount for input share\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param shareIn Shares to get the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    function getOutputAmount(\r\n        uint256 tokenInId,\r\n        uint256 shareIn,\r\n        bytes calldata dexData\r\n    ) external view override returns (uint256 amountOut) {\r\n        address[] memory path = abi.decode(dexData, (address[]));\r\n        uint256 amountIn = yieldBox.toAmount(tokenInId, shareIn, false);\r\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\r\n            factory,\r\n            amountIn,\r\n            path,\r\n            pairCodeHash\r\n        );\r\n        amountOut = amounts[amounts.length - 1];\r\n    }\r\n\r\n    /// @notice returns necessary input amount for a fixed output amount\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareOut Shares out to compute the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    function getInputAmount(\r\n        uint256 tokenOutId,\r\n        uint256 shareOut,\r\n        bytes calldata dexData\r\n    ) external view override returns (uint256 amountIn) {\r\n        address[] memory path = abi.decode(dexData, (address[]));\r\n        uint256 amountOut = yieldBox.toAmount(tokenOutId, shareOut, false);\r\n        uint256[] memory amounts = UniswapV2Library.getAmountsIn(\r\n            factory,\r\n            amountOut,\r\n            path,\r\n            pairCodeHash\r\n        );\r\n        amountIn = amounts[0];\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n    /// @notice swaps token in with token out\r\n    /// @dev returns both amount and shares\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareIn Shares to be swapped\r\n    /// @param to Receiver address\r\n    /// @param amountOutMin Minimum amount to be received\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    function swap(\r\n        uint256 tokenInId,\r\n        uint256 tokenOutId,\r\n        uint256 shareIn,\r\n        address to,\r\n        uint256 amountOutMin,\r\n        bytes calldata dexData\r\n    ) external override returns (uint256 amountOut, uint256 shareOut) {\r\n        address[] memory path = abi.decode(dexData, (address[]));\r\n        (uint256 amountIn, ) = yieldBox.withdraw(\r\n            tokenInId,\r\n            address(this),\r\n            address(this),\r\n            0,\r\n            shareIn\r\n        );\r\n\r\n        amountOut = _swapExactTokensForTokens(\r\n            amountIn,\r\n            amountOutMin,\r\n            path,\r\n            address(this)\r\n        );\r\n\r\n        IERC20(path[path.length - 1]).approve(address(yieldBox), amountOut);\r\n        (, shareOut) = yieldBox.depositAsset(\r\n            tokenOutId,\r\n            address(this),\r\n            to,\r\n            amountOut,\r\n            0\r\n        );\r\n    }\r\n\r\n    // ************************* //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    // Swaps an exact amount of tokens for another token through the path passed as an argument\r\n    // Returns the amount of the final token\r\n    function _swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] memory path,\r\n        address to\r\n    ) internal returns (uint256 amountOut) {\r\n        uint256[] memory amounts = UniswapV2Library.getAmountsOut(\r\n            factory,\r\n            amountIn,\r\n            path,\r\n            pairCodeHash\r\n        );\r\n        amountOut = amounts[amounts.length - 1];\r\n        require(amountOut >= amountOutMin, 'insufficient-amount-out');\r\n        // Required for the next step\r\n        IERC20(path[0]).safeTransfer(\r\n            UniswapV2Library.pairFor(factory, path[0], path[1], pairCodeHash),\r\n            amountIn\r\n        );\r\n        _swap(amounts, path, to);\r\n    }\r\n\r\n    // requires the initial amount to have already been sent to the first pair\r\n    function _swap(\r\n        uint256[] memory amounts,\r\n        address[] memory path,\r\n        address _to\r\n    ) internal virtual {\r\n        for (uint256 i; i < path.length - 1; i++) {\r\n            (address input, address output) = (path[i], path[i + 1]);\r\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\r\n            uint256 amountOut = amounts[i + 1];\r\n            (uint256 amount0Out, uint256 amount1Out) = input == token0\r\n                ? (uint256(0), amountOut)\r\n                : (amountOut, uint256(0));\r\n            address to = i < path.length - 2\r\n                ? UniswapV2Library.pairFor(\r\n                    factory,\r\n                    output,\r\n                    path[i + 2],\r\n                    pairCodeHash\r\n                )\r\n                : _to;\r\n\r\n            IUniswapV2Pair(\r\n                UniswapV2Library.pairFor(factory, input, output, pairCodeHash)\r\n            ).swap(amount0Out, amount1Out, to, new bytes(0));\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/swappers/UniswapV3Swapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity ^0.8.0;\r\n\r\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\r\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\r\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\r\nimport '@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';\r\nimport '@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol';\r\n\r\nimport './ISwapper.sol';\r\nimport '../../yieldbox/contracts/interfaces/IYieldBox.sol';\r\nimport './libraries/OracleLibrary.sol';\r\n\r\n/*\r\n\r\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\____        \r\n _\\///////\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\/////////\\\\\\_\\/////\\\\\\///______/\\\\\\///\\\\\\________/\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__       \r\n  _______\\/\\\\\\________/\\\\\\/////////\\\\\\_\\/\\\\\\_______\\/\\\\\\_____\\/\\\\\\_______/\\\\\\/__\\///\\\\\\____/\\\\\\/____________/\\\\\\/////////\\\\\\_      \r\n   _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\/\\\\\\______/\\\\\\______\\//\\\\\\__/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_     \r\n    _______\\/\\\\\\_______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\/////////________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \r\n     _______\\/\\\\\\_______\\/\\\\\\/////////\\\\\\_\\/\\\\\\_________________\\/\\\\\\_____\\//\\\\\\______/\\\\\\__\\//\\\\\\____________\\/\\\\\\/////////\\\\\\_   \r\n      _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_________________\\/\\\\\\______\\///\\\\\\__/\\\\\\_____\\///\\\\\\__________\\/\\\\\\_______\\/\\\\\\_  \r\n       _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\____\\///\\\\\\\\\\/________\\////\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_ \r\n        _______\\///________\\///________\\///__\\///______________\\///////////_______\\/////_____________\\/////////__\\///________\\///__\r\n*/\r\n\r\n/// @title UniswapV3 swapper contract\r\ncontract UniswapV3Swapper is ISwapper {\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n    IYieldBox private immutable yieldBox;\r\n    ISwapRouter public immutable swapRouter;\r\n    IUniswapV3Factory public immutable factory;\r\n    address public owner;\r\n\r\n    uint24 public poolFee = 3000;\r\n\r\n    // ************** //\r\n    // *** EVENTS *** //\r\n    // ************** //\r\n    event PoolFee(uint256 _old, uint256 _new);\r\n\r\n    /// @notice creates a new UniswapV3Swapper contract\r\n    constructor(\r\n        IYieldBox _yieldBox,\r\n        ISwapRouter _swapRouter,\r\n        IUniswapV3Factory _factory\r\n    ) {\r\n        yieldBox = _yieldBox;\r\n        swapRouter = _swapRouter;\r\n        factory = _factory;\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice sets a new pool fee\r\n    /// @param _newFee the new value\r\n    function setPoolFee(uint24 _newFee) external {\r\n        require(msg.sender == owner, 'UniswapV3Swapper: not authorized');\r\n        emit PoolFee(poolFee, _newFee);\r\n        poolFee = _newFee;\r\n    }\r\n\r\n    /// @notice returns the possible output amount for input share\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param shareIn Shares to get the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    ///     - for Curve, it should contain uint256[] tokenIndexes\r\n    ///     - for UniV3, it should contain uint256 tokenOutId\r\n    function getOutputAmount(\r\n        uint256 tokenInId,\r\n        uint256 shareIn,\r\n        bytes calldata dexData\r\n    ) external view override returns (uint256 amountOut) {\r\n        uint256 tokenOutId = abi.decode(dexData, (uint256));\r\n\r\n        (, address tokenIn, , ) = yieldBox.assets(tokenInId);\r\n        (, address tokenOut, , ) = yieldBox.assets(tokenOutId);\r\n\r\n        uint256 amountIn = yieldBox.toAmount(tokenInId, shareIn, false);\r\n\r\n        address pool = factory.getPool(tokenIn, tokenOut, poolFee);\r\n        (int24 tick, ) = OracleLibrary.consult(pool, 60);\r\n\r\n        amountOut = OracleLibrary.getQuoteAtTick(\r\n            tick,\r\n            uint128(amountIn),\r\n            tokenIn,\r\n            tokenOut\r\n        );\r\n    }\r\n\r\n    /// @notice returns necessary input amount for a fixed output amount\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareOut Shares out to compute the amount for\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    ///     - for UniV3, it should contain uint256 tokenInId\r\n    function getInputAmount(\r\n        uint256 tokenOutId,\r\n        uint256 shareOut,\r\n        bytes calldata dexData\r\n    ) external view override returns (uint256 amountIn) {\r\n        uint256 tokenInId = abi.decode(dexData, (uint256));\r\n\r\n        (, address tokenIn, , ) = yieldBox.assets(tokenInId);\r\n        (, address tokenOut, , ) = yieldBox.assets(tokenOutId);\r\n\r\n        uint256 amountOut = yieldBox.toAmount(tokenOutId, shareOut, false);\r\n\r\n        address pool = factory.getPool(tokenIn, tokenOut, poolFee);\r\n\r\n        (int24 tick, ) = OracleLibrary.consult(pool, 60);\r\n        amountIn = OracleLibrary.getQuoteAtTick(\r\n            tick,\r\n            uint128(amountOut),\r\n            tokenOut,\r\n            tokenIn\r\n        );\r\n    }\r\n\r\n    /// @notice swaps token in with token out\r\n    /// @dev returns both amount and shares\r\n    /// @param tokenInId YieldBox asset id\r\n    /// @param tokenOutId YieldBox asset id\r\n    /// @param shareIn Shares to be swapped\r\n    /// @param to Receiver address\r\n    /// @param amountOutMin Minimum amount to be received\r\n    /// @param dexData Custom DEX data for query execution\r\n    /// @dev dexData examples:\r\n    ///     - for UniV2, it should contain address[] swapPath\r\n    ///     - for Curve, it should contain uint256[] tokenIndexes\r\n    ///     - for UniV3, it should contain uint256 deadline\r\n    function swap(\r\n        uint256 tokenInId,\r\n        uint256 tokenOutId,\r\n        uint256 shareIn,\r\n        address to,\r\n        uint256 amountOutMin,\r\n        bytes calldata dexData\r\n    ) external override returns (uint256 amountOut, uint256 shareOut) {\r\n        (, address tokenIn, , ) = yieldBox.assets(tokenInId);\r\n        (, address tokenOut, , ) = yieldBox.assets(tokenOutId);\r\n\r\n        (uint256 amountIn, ) = yieldBox.withdraw(\r\n            tokenInId,\r\n            address(this),\r\n            address(this),\r\n            0,\r\n            shareIn\r\n        );\r\n\r\n        TransferHelper.safeApprove(tokenIn, address(swapRouter), amountIn);\r\n\r\n        uint256 deadline = abi.decode(dexData, (uint256));\r\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter\r\n            .ExactInputSingleParams({\r\n                tokenIn: tokenIn,\r\n                tokenOut: tokenOut,\r\n                fee: poolFee,\r\n                recipient: address(this),\r\n                deadline: deadline,\r\n                amountIn: amountIn,\r\n                amountOutMinimum: amountOutMin,\r\n                sqrtPriceLimitX96: 0\r\n            });\r\n\r\n        amountOut = swapRouter.exactInputSingle(params);\r\n\r\n        IERC20(tokenOut).approve(address(yieldBox), amountOut);\r\n        (, shareOut) = yieldBox.depositAsset(\r\n            tokenOutId,\r\n            address(this),\r\n            to,\r\n            amountOut,\r\n            0\r\n        );\r\n    }\r\n}\r\n"
    },
    "contracts/usd0/BigBang.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport '@boringcrypto/boring-solidity/contracts/BoringOwnable.sol';\r\nimport '@boringcrypto/boring-solidity/contracts/ERC20.sol';\r\nimport '@boringcrypto/boring-solidity/contracts/libraries/BoringRebase.sol';\r\nimport '@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol';\r\n\r\nimport '../swappers/ISwapper.sol';\r\nimport './interfaces/IBigBang.sol';\r\nimport '../interfaces/IOracle.sol';\r\nimport '../interfaces/IPenrose.sol';\r\nimport '../interfaces/ISendFrom.sol';\r\nimport '../../yieldbox/contracts/YieldBox.sol';\r\n\r\n// solhint-disable max-line-length\r\n/*\r\n\r\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\____        \r\n _\\///////\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\/////////\\\\\\_\\/////\\\\\\///______/\\\\\\///\\\\\\________/\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__       \r\n  _______\\/\\\\\\________/\\\\\\/////////\\\\\\_\\/\\\\\\_______\\/\\\\\\_____\\/\\\\\\_______/\\\\\\/__\\///\\\\\\____/\\\\\\/____________/\\\\\\/////////\\\\\\_      \r\n   _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\/\\\\\\______/\\\\\\______\\//\\\\\\__/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_     \r\n    _______\\/\\\\\\_______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\/////////________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \r\n     _______\\/\\\\\\_______\\/\\\\\\/////////\\\\\\_\\/\\\\\\_________________\\/\\\\\\_____\\//\\\\\\______/\\\\\\__\\//\\\\\\____________\\/\\\\\\/////////\\\\\\_   \r\n      _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_________________\\/\\\\\\______\\///\\\\\\__/\\\\\\_____\\///\\\\\\__________\\/\\\\\\_______\\/\\\\\\_  \r\n       _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\____\\///\\\\\\\\\\/________\\////\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_ \r\n        _______\\///________\\///________\\///__\\///______________\\///////////_______\\/////_____________\\/////////__\\///________\\///__\r\n\r\n*/\r\n\r\ncontract BigBang is BoringOwnable {\r\n    using RebaseLibrary for Rebase;\r\n    using BoringERC20 for IERC20;\r\n\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n    mapping(address => mapping(address => bool)) public operators;\r\n\r\n    IBigBang.AccrueInfo public accrueInfo;\r\n\r\n    IPenrose public penrose;\r\n    YieldBox public yieldBox;\r\n    IERC20 public collateral;\r\n    IUSD0 public asset;\r\n    uint256 public collateralId;\r\n    uint256 public assetId;\r\n\r\n    // Total amounts\r\n    uint256 public totalCollateralShare; // Total collateral supplied\r\n    Rebase public totalBorrow; // elastic = Total token amount to be repayed by borrowers, base = Total parts of the debt held by borrowers\r\n    uint256 public totalBorrowCap;\r\n\r\n    // User balances\r\n    mapping(address => uint256) public userCollateralShare;\r\n    // userAssetFraction is called balanceOf for ERC20 compatibility (it's in ERC20.sol)\r\n\r\n    mapping(address => uint256) public userBorrowPart;\r\n\r\n    // map of operator approval\r\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\r\n\r\n    /// @notice Exchange and interest rate tracking.\r\n    /// This is 'cached' here because calls to Oracles can be very expensive.\r\n    /// Asset -> collateral = assetAmount * exchangeRate.\r\n    uint256 public exchangeRate;\r\n    uint256 public borrowingFee;\r\n\r\n    IOracle oracle;\r\n    bytes public oracleData;\r\n\r\n    uint256 public callerFee; // 90%\r\n    uint256 public protocolFee; // 10%\r\n    uint256 public collateralizationRate; // 75%\r\n    uint256 public totalFees;\r\n\r\n    bool public paused;\r\n    address public conservator;\r\n\r\n    bool private _isEthMarket;\r\n    uint256 public maxDebtRate;\r\n    uint256 public minDebtRate;\r\n    uint256 public debtRateAgainstEthMarket;\r\n    uint256 public debtStartPoint;\r\n    uint256 private constant DEBT_PRECISION = 1e18;\r\n\r\n    uint256 public minLiquidatorReward = 1e3; //1%\r\n    uint256 public maxLiquidatorReward = 1e4; //10%\r\n    uint256 public liquidationBonusAmount = 1e4; //10%\r\n\r\n    //errors\r\n    error NotApproved(address _from, address _operator);\r\n\r\n    // ************** //\r\n    // *** EVENTS *** //\r\n    // ************** //\r\n    event LogExchangeRate(uint256 rate);\r\n    event LogAccrue(uint256 accruedAmount, uint64 rate);\r\n    event LogAddCollateral(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share\r\n    );\r\n    event LogRemoveCollateral(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share\r\n    );\r\n    event LogBorrow(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 feeAmount,\r\n        uint256 part\r\n    );\r\n    event LogRepay(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 part\r\n    );\r\n    event LogWithdrawFees(address indexed feeTo, uint256 feesEarned);\r\n    event LogYieldBoxFeesDeposit(uint256 feeShares, uint256 tapAmount);\r\n    event LogApprovalForAll(\r\n        address indexed _from,\r\n        address indexed _operator,\r\n        bool _approved\r\n    );\r\n    event LogBorrowCapUpdated(uint256 _oldVal, uint256 _newVal);\r\n    event LogStabilityFee(uint256 _oldFee, uint256 _newFee);\r\n    event LogBorrowingFee(uint256 _oldVal, uint256 _newVal);\r\n    event ConservatorUpdated(address indexed old, address indexed _new);\r\n    event PausedUpdated(bool oldState, bool newState);\r\n\r\n    // ***************** //\r\n    // *** CONSTANTS *** //\r\n    // ***************** //\r\n    uint256 private constant LIQUIDATION_MULTIPLIER = 112000; // add 12%\r\n\r\n    uint256 private constant MAX_BORROWING_FEE = 8e4; //at 80% for testing; TODO\r\n    uint256 private constant MAX_STABILITY_FEE = 8e17; //at 80% for testing; TODO\r\n\r\n    uint256 private constant FEE_PRECISION = 1e5;\r\n    uint256 private EXCHANGE_RATE_PRECISION; //not costant, but can only be set in the 'init' method\r\n    uint256 private constant COLLATERALIZATION_RATE_PRECISION = 1e5; // Must be less than EXCHANGE_RATE_PRECISION (due to optimization in math)\r\n    uint256 private constant LIQUIDATION_MULTIPLIER_PRECISION = 1e5;\r\n\r\n    // ***************** //\r\n    // *** MODIFIERS *** //\r\n    // ***************** //\r\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\r\n    /// If 'from' is msg.sender, it's allowed.\r\n    /// If 'msg.sender' is an address (an operator) that is approved by 'from', it's allowed.\r\n    modifier allowed(address from) virtual {\r\n        if (from != msg.sender && !operators[from][msg.sender]) {\r\n            revert NotApproved(from, msg.sender);\r\n        }\r\n        _;\r\n    }\r\n    /// @dev Checks if the user is solvent in the closed liquidation case at the end of the function body.\r\n    modifier solvent(address from) {\r\n        _;\r\n        require(_isSolvent(from, exchangeRate), 'BigBang: insolvent');\r\n    }\r\n\r\n    modifier notPaused() {\r\n        require(!paused, 'BigBang: paused');\r\n        _;\r\n    }\r\n\r\n    bool private initialized;\r\n    modifier onlyOnce() {\r\n        require(!initialized, 'BigBang: initialized');\r\n        _;\r\n        initialized = true;\r\n    }\r\n\r\n    /// @notice The init function that acts as a constructor\r\n    function init(bytes calldata data) external onlyOnce {\r\n        (\r\n            IPenrose tapiocaBar_,\r\n            IERC20 _collateral,\r\n            uint256 _collateralId,\r\n            IOracle _oracle,\r\n            uint256 _exchangeRatePrecision,\r\n            uint256 _debtRateAgainstEth,\r\n            uint256 _debtRateMin,\r\n            uint256 _debtRateMax,\r\n            uint256 _debtStartPoint\r\n        ) = abi.decode(\r\n                data,\r\n                (\r\n                    IPenrose,\r\n                    IERC20,\r\n                    uint256,\r\n                    IOracle,\r\n                    uint256,\r\n                    uint256,\r\n                    uint256,\r\n                    uint256,\r\n                    uint256\r\n                )\r\n            );\r\n\r\n        penrose = tapiocaBar_;\r\n        yieldBox = YieldBox(tapiocaBar_.yieldBox());\r\n        owner = address(penrose);\r\n\r\n        address _asset = penrose.usdoToken();\r\n\r\n        require(\r\n            address(_collateral) != address(0) &&\r\n                address(_asset) != address(0) &&\r\n                address(_oracle) != address(0),\r\n            'BigBang: bad pair'\r\n        );\r\n\r\n        asset = IUSD0(_asset);\r\n        assetId = penrose.usdoAssetId();\r\n        collateral = _collateral;\r\n        collateralId = _collateralId;\r\n        oracle = _oracle;\r\n\r\n        updateExchangeRate();\r\n\r\n        callerFee = 90000; // 90%\r\n        protocolFee = 10000; // 10%\r\n        collateralizationRate = 75000; // 75%\r\n\r\n        EXCHANGE_RATE_PRECISION = _exchangeRatePrecision;\r\n\r\n        _isEthMarket = collateralId == penrose.wethAssetId();\r\n        if (!_isEthMarket) {\r\n            debtRateAgainstEthMarket = _debtRateAgainstEth;\r\n            maxDebtRate = _debtRateMax;\r\n            minDebtRate = _debtRateMin;\r\n            debtStartPoint = _debtStartPoint;\r\n        }\r\n\r\n        minLiquidatorReward = 1e3;\r\n        maxLiquidatorReward = 1e4;\r\n        liquidationBonusAmount = 1e4;\r\n    }\r\n\r\n    // ********************** //\r\n    // *** VIEW FUNCTIONS *** //\r\n    // ********************** //\r\n    /// @notice Return the amount of collateral for a `user` to be solvent, min TVL and max TVL. Returns 0 if user already solvent.\r\n    /// @dev We use a `CLOSED_COLLATERIZATION_RATE` that is a safety buffer when making the user solvent again,\r\n    ///      To prevent from being liquidated. This function is valid only if user is not solvent by `_isSolvent()`.\r\n    /// @param user The user to check solvency.\r\n    /// @param _exchangeRate The exchange rate asset/collateral.\r\n    /// @return amountToSolvency The amount of collateral to be solvent.\r\n    function computeTVLInfo(address user, uint256 _exchangeRate)\r\n        public\r\n        view\r\n        returns (\r\n            uint256 amountToSolvency,\r\n            uint256 minTVL,\r\n            uint256 maxTVL\r\n        )\r\n    {\r\n        uint256 borrowPart = userBorrowPart[user];\r\n        if (borrowPart == 0) return (0, 0, 0);\r\n        uint256 collateralShare = userCollateralShare[user];\r\n\r\n        Rebase memory _totalBorrow = totalBorrow;\r\n\r\n        uint256 collateralAmountInAsset = yieldBox.toAmount(\r\n            collateralId,\r\n            (collateralShare *\r\n                (EXCHANGE_RATE_PRECISION / COLLATERALIZATION_RATE_PRECISION) *\r\n                collateralizationRate),\r\n            false\r\n        ) / _exchangeRate;\r\n        borrowPart = (borrowPart * _totalBorrow.elastic) / _totalBorrow.base;\r\n\r\n        amountToSolvency = borrowPart >= collateralAmountInAsset\r\n            ? borrowPart - collateralAmountInAsset\r\n            : 0;\r\n\r\n        (minTVL, maxTVL) = _computeMaxAndMinLTVInAsset(\r\n            collateralShare,\r\n            _exchangeRate\r\n        );\r\n    }\r\n\r\n    /// @notice Return the maximum liquidatable amount for user\r\n    function computeClosingFactor(address user, uint256 _exchangeRate)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_isSolvent(user, _exchangeRate)) return 0;\r\n\r\n        (uint256 amountToSolvency, , uint256 maxTVL) = computeTVLInfo(\r\n            user,\r\n            _exchangeRate\r\n        );\r\n        uint256 borrowed = userBorrowPart[user];\r\n        if (borrowed >= maxTVL) return borrowed;\r\n\r\n        return\r\n            amountToSolvency +\r\n            ((liquidationBonusAmount * borrowed) / FEE_PRECISION);\r\n    }\r\n\r\n    function computeLiquidatorReward(address user, uint256 _exchangeRate)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (uint256 minTVL, uint256 maxTVL) = _computeMaxAndMinLTVInAsset(\r\n            userCollateralShare[user],\r\n            _exchangeRate\r\n        );\r\n        return _getCallerReward(userBorrowPart[user], minTVL, maxTVL);\r\n    }\r\n\r\n    /// @notice returns total market debt\r\n    function getTotalDebt() external view returns (uint256) {\r\n        return totalBorrow.elastic;\r\n    }\r\n\r\n    /// @notice returns the current debt rate\r\n    function getDebtRate() public view returns (uint256) {\r\n        if (_isEthMarket) return penrose.bigBangEthDebtRate(); // default 0.5%\r\n        if (totalBorrow.elastic == 0) return minDebtRate;\r\n\r\n        uint256 _ethMarketTotalDebt = BigBang(penrose.bigBangEthMarket())\r\n            .getTotalDebt();\r\n        uint256 _currentDebt = totalBorrow.elastic;\r\n        uint256 _maxDebtPoint = (_ethMarketTotalDebt *\r\n            debtRateAgainstEthMarket) / 1e18;\r\n\r\n        if (_currentDebt >= _maxDebtPoint) return maxDebtRate;\r\n\r\n        uint256 debtPercentage = ((_currentDebt - debtStartPoint) *\r\n            DEBT_PRECISION) / (_maxDebtPoint - debtStartPoint);\r\n        uint256 debt = ((maxDebtRate - minDebtRate) * debtPercentage) /\r\n            DEBT_PRECISION +\r\n            minDebtRate;\r\n\r\n        return debt;\r\n    }\r\n\r\n    // ************************ //\r\n    // *** PUBLIC FUNCTIONS *** //\r\n    // ************************ //\r\n    /// @notice Allows batched call to BingBang.\r\n    /// @param calls An array encoded call data.\r\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\r\n    function execute(bytes[] calldata calls, bool revertOnFail)\r\n        external\r\n        returns (bool[] memory successes, string[] memory results)\r\n    {\r\n        successes = new bool[](calls.length);\r\n        results = new string[](calls.length);\r\n        for (uint256 i = 0; i < calls.length; i++) {\r\n            (bool success, bytes memory result) = address(this).delegatecall(\r\n                calls[i]\r\n            );\r\n            require(success || !revertOnFail, _getRevertMsg(result));\r\n            successes[i] = success;\r\n            results[i] = _getRevertMsg(result);\r\n        }\r\n    }\r\n\r\n    /// @notice allows 'operator' to act on behalf of the sender\r\n    /// @param status true/false\r\n    function updateOperator(address operator, bool status) external {\r\n        operators[msg.sender][operator] = status;\r\n    }\r\n\r\n    /// @notice Gets the exchange rate. I.e how much collateral to buy 1e18 asset.\r\n    /// @dev This function is supposed to be invoked if needed because Oracle queries can be expensive.\r\n    ///      Oracle should consider USD0 at 1$\r\n    /// @return updated True if `exchangeRate` was updated.\r\n    /// @return rate The new exchange rate.\r\n    function updateExchangeRate() public returns (bool updated, uint256 rate) {\r\n        (updated, rate) = oracle.get('');\r\n\r\n        if (updated) {\r\n            exchangeRate = rate;\r\n            emit LogExchangeRate(rate);\r\n        } else {\r\n            // Return the old rate if fetching wasn't successful\r\n            rate = exchangeRate;\r\n        }\r\n    }\r\n\r\n    /// @notice Accrues the interest on the borrowed tokens and handles the accumulation of fees.\r\n    function accrue() public {\r\n        IBigBang.AccrueInfo memory _accrueInfo = accrueInfo;\r\n        // Number of seconds since accrue was called\r\n        uint256 elapsedTime = block.timestamp - _accrueInfo.lastAccrued;\r\n        if (elapsedTime == 0) {\r\n            return;\r\n        }\r\n        //update debt rate\r\n        uint256 annumDebtRate = getDebtRate();\r\n        _accrueInfo.debtRate = uint64(annumDebtRate / 31536000); //per second\r\n\r\n        _accrueInfo.lastAccrued = uint64(block.timestamp);\r\n\r\n        Rebase memory _totalBorrow = totalBorrow;\r\n\r\n        uint256 extraAmount = 0;\r\n\r\n        // Calculate fees\r\n        extraAmount =\r\n            (uint256(_totalBorrow.elastic) *\r\n                _accrueInfo.debtRate *\r\n                elapsedTime) /\r\n            1e18;\r\n        _totalBorrow.elastic += uint128(extraAmount);\r\n\r\n        totalBorrow = _totalBorrow;\r\n        accrueInfo = _accrueInfo;\r\n\r\n        emit LogAccrue(extraAmount, _accrueInfo.debtRate);\r\n    }\r\n\r\n    /// @notice Sender borrows `amount` and transfers it to `to`.\r\n    /// @param from Account to borrow for.\r\n    /// @param to The receiver of borrowed tokens.\r\n    /// @param amount Amount to borrow.\r\n    /// @return part Total part of the debt held by borrowers.\r\n    /// @return share Total amount in shares borrowed.\r\n    function borrow(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    )\r\n        public\r\n        notPaused\r\n        solvent(from)\r\n        allowed(from)\r\n        returns (uint256 part, uint256 share)\r\n    {\r\n        updateExchangeRate();\r\n\r\n        accrue();\r\n\r\n        (part, share) = _borrow(from, to, amount);\r\n    }\r\n\r\n    /// @notice Repays a loan.\r\n    /// @dev The bool param is not used but we added it to respect the ISingularity interface for MarketsHelper compatibility\r\n    /// @param from Address to repay from.\r\n    /// @param to Address of the user this payment should go.\r\n    /// @param part The amount to repay. See `userBorrowPart`.\r\n    /// @return amount The total amount repayed.\r\n    function repay(\r\n        address from,\r\n        address to,\r\n        bool,\r\n        uint256 part\r\n    ) public notPaused allowed(from) returns (uint256 amount) {\r\n        updateExchangeRate();\r\n\r\n        accrue();\r\n\r\n        amount = _repay(from, to, part);\r\n    }\r\n\r\n    /// @notice Adds `collateral` from msg.sender to the account `to`.\r\n    /// @param from Account to transfer shares from.\r\n    /// @param to The receiver of the tokens.\r\n    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\r\n    /// False if tokens from msg.sender in `yieldBox` should be transferred.\r\n    /// @param share The amount of shares to add for `to`.\r\n    function addCollateral(\r\n        address from,\r\n        address to,\r\n        bool skim,\r\n        uint256 share\r\n    ) public notPaused allowed(from) {\r\n        userCollateralShare[to] += share;\r\n        uint256 oldTotalCollateralShare = totalCollateralShare;\r\n        totalCollateralShare = oldTotalCollateralShare + share;\r\n        _addTokens(from, collateralId, share, oldTotalCollateralShare, skim);\r\n        emit LogAddCollateral(skim ? address(yieldBox) : from, to, share);\r\n    }\r\n\r\n    /// @notice Removes `share` amount of collateral and transfers it to `to`.\r\n    /// @param from Account to debit collateral from.\r\n    /// @param to The receiver of the shares.\r\n    /// @param share Amount of shares to remove.\r\n    function removeCollateral(\r\n        address from,\r\n        address to,\r\n        uint256 share\r\n    ) public notPaused solvent(from) allowed(from) {\r\n        updateExchangeRate();\r\n\r\n        // accrue must be called because we check solvency\r\n        accrue();\r\n\r\n        _removeCollateral(from, to, share);\r\n    }\r\n\r\n    /// @notice Withdraw the balance of `feeTo`, swap asset into TAP and deposit it to yieldBox of `feeTo`\r\n    function depositFeesToYieldBox(\r\n        ISwapper swapper,\r\n        IPenrose.SwapData calldata swapData\r\n    ) public notPaused {\r\n        require(penrose.swappers(swapper), 'BigBang: Invalid swapper');\r\n\r\n        uint256 balance = asset.balanceOf(address(this));\r\n        totalFees += balance;\r\n\r\n        emit LogWithdrawFees(penrose.feeTo(), balance);\r\n\r\n        address _feeTo = penrose.feeTo();\r\n        if (totalFees > 0) {\r\n            uint256 feeShares = yieldBox.toShare(assetId, totalFees, false);\r\n\r\n            asset.approve(address(yieldBox), totalFees);\r\n            yieldBox.depositAsset(\r\n                assetId,\r\n                address(this),\r\n                address(this),\r\n                totalFees,\r\n                0\r\n            );\r\n\r\n            totalFees = 0;\r\n            yieldBox.transfer(\r\n                address(this),\r\n                address(swapper),\r\n                assetId,\r\n                feeShares\r\n            );\r\n            (uint256 colAmount, ) = swapper.swap(\r\n                assetId,\r\n                penrose.wethAssetId(),\r\n                feeShares,\r\n                _feeTo,\r\n                swapData.minAssetAmount,\r\n                abi.encode(_assetToWethSwapPath())\r\n            );\r\n\r\n            emit LogYieldBoxFeesDeposit(feeShares, colAmount);\r\n        }\r\n    }\r\n\r\n    /// @notice Entry point for liquidations.\r\n    /// @param users An array of user addresses.\r\n    /// @param maxBorrowParts A one-to-one mapping to `users`, contains maximum (partial) borrow amounts (to liquidate) of the respective user.\r\n    /// @param swapper Contract address of the `MultiSwapper` implementation. See `setSwapper`.\r\n    /// @param collateralToAssetSwapData Extra swap data\r\n    function liquidate(\r\n        address[] calldata users,\r\n        uint256[] calldata maxBorrowParts,\r\n        ISwapper swapper,\r\n        bytes calldata collateralToAssetSwapData\r\n    ) external notPaused {\r\n        // Oracle can fail but we still need to allow liquidations\r\n        (, uint256 _exchangeRate) = updateExchangeRate();\r\n        accrue();\r\n\r\n        _closedLiquidation(\r\n            users,\r\n            maxBorrowParts,\r\n            swapper,\r\n            _exchangeRate,\r\n            collateralToAssetSwapData\r\n        );\r\n    }\r\n\r\n    /// @notice Withdraw to another layer\r\n    function withdrawTo(\r\n        uint16 dstChainId,\r\n        bytes32 receiver,\r\n        uint256 amount,\r\n        bytes calldata adapterParams,\r\n        address payable refundAddress\r\n    ) public payable {\r\n        try\r\n            IERC165(address(asset)).supportsInterface(\r\n                type(ISendFrom).interfaceId\r\n            )\r\n        {} catch {\r\n            return;\r\n        }\r\n\r\n        uint256 available = yieldBox.toAmount(\r\n            assetId,\r\n            yieldBox.balanceOf(msg.sender, assetId),\r\n            false\r\n        );\r\n        require(available >= amount, 'BigBang: not available');\r\n\r\n        yieldBox.withdraw(assetId, msg.sender, address(this), amount, 0);\r\n\r\n        ISendFrom.LzCallParams memory callParams = ISendFrom.LzCallParams({\r\n            refundAddress: refundAddress,\r\n            zroPaymentAddress: address(0),\r\n            adapterParams: adapterParams\r\n        });\r\n\r\n        ISendFrom(address(asset)).sendFrom{value: msg.value}(\r\n            address(this),\r\n            dstChainId,\r\n            receiver,\r\n            amount,\r\n            callParams\r\n        );\r\n    }\r\n\r\n    // *********************** //\r\n    // *** OWNER FUNCTIONS *** //\r\n    // *********************** //\r\n    /// @notice Set the bonus amount a liquidator can make use of, on top of the amount needed to make the user solvent\r\n    /// @param _val the new value\r\n    function setLiquidationBonusAmount(uint256 _val) external onlyOwner {\r\n        require(_val < FEE_PRECISION, 'BigBang: not valid');\r\n        liquidationBonusAmount = _val;\r\n    }\r\n\r\n    /// @notice Set the liquidator min reward\r\n    /// @param _val the new value\r\n    function setMinLiquidatorReward(uint256 _val) external onlyOwner {\r\n        require(_val < FEE_PRECISION, 'BigBang: not valid');\r\n        require(_val < maxLiquidatorReward, 'BigBang: not valid');\r\n        minLiquidatorReward = _val;\r\n    }\r\n\r\n    /// @notice Set the liquidator max reward\r\n    /// @param _val the new value\r\n    function setMaxLiquidatorReward(uint256 _val) external onlyOwner {\r\n        require(_val < FEE_PRECISION, 'BigBang: not valid');\r\n        require(_val > minLiquidatorReward, 'BigBang: not valid');\r\n        maxLiquidatorReward = _val;\r\n    }\r\n\r\n    /// @notice Set the Conservator address\r\n    /// @dev Conservator can pause the contract\r\n    /// @param _conservator The new address\r\n    function setConservator(address _conservator) external onlyOwner {\r\n        require(_conservator != address(0), 'BigBang: address not valid');\r\n        emit ConservatorUpdated(conservator, _conservator);\r\n        conservator = _conservator;\r\n    }\r\n\r\n    /// @notice updates the pause state of the contract\r\n    /// @param val the new value\r\n    function updatePause(bool val) external {\r\n        require(msg.sender == conservator, 'BigBang: unauthorized');\r\n        require(val != paused, 'BigBang: same state');\r\n        emit PausedUpdated(paused, val);\r\n        paused = val;\r\n    }\r\n\r\n    /// @notice sets the protocol fee\r\n    /// @dev can only be called by the owner\r\n    /// @param _val the new value\r\n    function setProtocolFee(uint256 _val) external onlyOwner {\r\n        require(_val <= FEE_PRECISION, 'BigBang: not valid');\r\n        protocolFee = _val;\r\n    }\r\n\r\n    /// @notice sets the caller fee\r\n    /// @dev can only be called by the owner\r\n    /// @param _val the new value\r\n    function setCallerFee(uint256 _val) external onlyOwner {\r\n        require(_val <= FEE_PRECISION, 'BigBang: not valid');\r\n        callerFee = _val;\r\n    }\r\n\r\n    /// @notice sets the collateralization rate\r\n    /// @dev can only be called by the owner\r\n    /// @param _val the new value\r\n    function setCollateralizationRate(uint256 _val) external onlyOwner {\r\n        require(_val <= COLLATERALIZATION_RATE_PRECISION, 'BigBang: not valid');\r\n        collateralizationRate = _val;\r\n    }\r\n\r\n    /// @notice sets max borrowable amount\r\n    function setBorrowCap(uint256 _cap) external onlyOwner notPaused {\r\n        emit LogBorrowCapUpdated(totalBorrowCap, _cap);\r\n        totalBorrowCap = _cap;\r\n    }\r\n\r\n    /// @notice Updates the variable debt ratio\r\n    /// @dev has to be called before accrue\r\n    function updateDebt() private {}\r\n\r\n    /// @notice Updates the borrowing fee\r\n    /// @param _borrowingFee the new value\r\n    function updateBorrowingFee(uint256 _borrowingFee) external onlyOwner {\r\n        require(_borrowingFee <= MAX_BORROWING_FEE, 'BigBang: value not valid');\r\n        emit LogBorrowingFee(borrowingFee, _borrowingFee);\r\n        borrowingFee = _borrowingFee;\r\n    }\r\n\r\n    // ************************* //\r\n    // *** PRIVATE FUNCTIONS *** //\r\n    // ************************* //\r\n    function _getRevertMsg(bytes memory _returnData)\r\n        private\r\n        pure\r\n        returns (string memory)\r\n    {\r\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\r\n        if (_returnData.length < 68) return 'BingBang: no return data';\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            // Slice the sighash.\r\n            _returnData := add(_returnData, 0x04)\r\n        }\r\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\r\n    }\r\n\r\n    /// @notice construct Uniswap path\r\n    function _collateralToAssetSwapPath()\r\n        private\r\n        view\r\n        returns (address[] memory path)\r\n    {\r\n        path = new address[](2);\r\n        path[0] = address(collateral);\r\n        path[1] = address(asset);\r\n    }\r\n\r\n    function _assetToWethSwapPath()\r\n        internal\r\n        view\r\n        returns (address[] memory path)\r\n    {\r\n        path = new address[](2);\r\n        path[0] = address(asset);\r\n        path[1] = address(penrose.wethToken());\r\n    }\r\n\r\n    /// @notice Concrete implementation of `isSolvent`. Includes a parameter to allow caching `exchangeRate`.\r\n    /// @param _exchangeRate The exchange rate. Used to cache the `exchangeRate` between calls.\r\n    function _isSolvent(address user, uint256 _exchangeRate)\r\n        internal\r\n        view\r\n        returns (bool)\r\n    {\r\n        // accrue must have already been called!\r\n        uint256 borrowPart = userBorrowPart[user];\r\n        if (borrowPart == 0) return true;\r\n        uint256 collateralShare = userCollateralShare[user];\r\n\r\n        Rebase memory _totalBorrow = totalBorrow;\r\n\r\n        return\r\n            yieldBox.toAmount(\r\n                collateralId,\r\n                collateralShare *\r\n                    (EXCHANGE_RATE_PRECISION /\r\n                        COLLATERALIZATION_RATE_PRECISION) *\r\n                    collateralizationRate,\r\n                false\r\n            ) >=\r\n            // Moved exchangeRate here instead of dividing the other side to preserve more precision\r\n            (borrowPart * _totalBorrow.elastic * _exchangeRate) /\r\n                _totalBorrow.base;\r\n    }\r\n\r\n    function _liquidateUser(\r\n        address user,\r\n        uint256 maxBorrowPart,\r\n        ISwapper swapper,\r\n        uint256 _exchangeRate,\r\n        bytes calldata swapData\r\n    ) private {\r\n        if (_isSolvent(user, _exchangeRate)) return;\r\n\r\n        (\r\n            uint256 startTVLInAsset,\r\n            uint256 maxTVLInAsset\r\n        ) = _computeMaxAndMinLTVInAsset(\r\n                userCollateralShare[user],\r\n                _exchangeRate\r\n            );\r\n        uint256 callerReward = _getCallerReward(\r\n            userBorrowPart[user],\r\n            startTVLInAsset,\r\n            maxTVLInAsset\r\n        );\r\n\r\n        (\r\n            uint256 borrowAmount,\r\n            uint256 borrowPart,\r\n            uint256 collateralShare\r\n        ) = _updateBorrowAndCollateralShare(user, maxBorrowPart, _exchangeRate);\r\n        emit LogRemoveCollateral(user, address(swapper), collateralShare);\r\n        emit LogRepay(address(swapper), user, borrowAmount, borrowPart);\r\n\r\n        uint256 borrowShare = yieldBox.toShare(assetId, borrowAmount, true);\r\n\r\n        // Closed liquidation using a pre-approved swapper\r\n        require(penrose.swappers(swapper), 'BigBang: Invalid swapper');\r\n\r\n        // Swaps the users collateral for the borrowed asset\r\n        yieldBox.transfer(\r\n            address(this),\r\n            address(swapper),\r\n            collateralId,\r\n            collateralShare\r\n        );\r\n\r\n        uint256 minAssetMount = 0;\r\n        if (swapData.length > 0) {\r\n            minAssetMount = abi.decode(swapData, (uint256));\r\n        }\r\n\r\n        uint256 balanceBefore = yieldBox.balanceOf(address(this), assetId);\r\n        swapper.swap(\r\n            collateralId,\r\n            assetId,\r\n            collateralShare,\r\n            address(this),\r\n            minAssetMount,\r\n            abi.encode(_collateralToAssetSwapPath())\r\n        );\r\n        uint256 balanceAfter = yieldBox.balanceOf(address(this), assetId);\r\n\r\n        uint256 returnedShare = balanceAfter - balanceBefore;\r\n        _extractLiquidationFees(returnedShare, borrowShare, callerReward);\r\n    }\r\n\r\n    function _extractLiquidationFees(\r\n        uint256 returnedShare,\r\n        uint256 borrowShare,\r\n        uint256 callerReward\r\n    ) private {\r\n        uint256 extraShare = returnedShare - borrowShare;\r\n        uint256 feeShare = (extraShare * protocolFee) / FEE_PRECISION; // x% of profit goes to fee.\r\n        uint256 callerShare = (extraShare * callerReward) / FEE_PRECISION; //  y%  of profit goes to caller.\r\n\r\n        yieldBox.transfer(address(this), penrose.feeTo(), assetId, feeShare);\r\n        yieldBox.transfer(address(this), msg.sender, assetId, callerShare);\r\n    }\r\n\r\n    /// @notice Handles the liquidation of users' balances, once the users' amount of collateral is too low.\r\n    /// @dev Closed liquidations Only, 90% of extra shares goes to caller and 10% to protocol\r\n    /// @param users An array of user addresses.\r\n    /// @param maxBorrowParts A one-to-one mapping to `users`, contains maximum (partial) borrow amounts (to liquidate) of the respective user.\r\n    /// @param swapper Contract address of the `MultiSwapper` implementation. See `setSwapper`.\r\n    /// @param swapData Swap necessar data\r\n    function _closedLiquidation(\r\n        address[] calldata users,\r\n        uint256[] calldata maxBorrowParts,\r\n        ISwapper swapper,\r\n        uint256 _exchangeRate,\r\n        bytes calldata swapData\r\n    ) private {\r\n        uint256 liquidatedCount = 0;\r\n        for (uint256 i = 0; i < users.length; i++) {\r\n            address user = users[i];\r\n            if (!_isSolvent(user, _exchangeRate)) {\r\n                liquidatedCount++;\r\n                _liquidateUser(\r\n                    user,\r\n                    maxBorrowParts[i],\r\n                    swapper,\r\n                    _exchangeRate,\r\n                    swapData\r\n                );\r\n            }\r\n        }\r\n\r\n        require(liquidatedCount > 0, 'SGL: no users found');\r\n    }\r\n\r\n    /// @dev Helper function to move tokens.\r\n    /// @param from Account to debit tokens from, in `yieldBox`.\r\n    /// @param _tokenId The ERC-20 token asset ID in yieldBox.\r\n    /// @param share The amount in shares to add.\r\n    /// @param total Grand total amount to deduct from this contract's balance. Only applicable if `skim` is True.\r\n    /// Only used for accounting checks.\r\n    /// @param skim If True, only does a balance check on this contract.\r\n    /// False if tokens from msg.sender in `yieldBox` should be transferred.\r\n    function _addTokens(\r\n        address from,\r\n        uint256 _tokenId,\r\n        uint256 share,\r\n        uint256 total,\r\n        bool skim\r\n    ) internal {\r\n        if (skim) {\r\n            require(\r\n                share <= yieldBox.balanceOf(address(this), _tokenId) - total,\r\n                'BigBang: too much'\r\n            );\r\n        } else {\r\n            yieldBox.transfer(from, address(this), _tokenId, share);\r\n        }\r\n    }\r\n\r\n    /// @dev Concrete implementation of `removeCollateral`.\r\n    function _removeCollateral(\r\n        address from,\r\n        address to,\r\n        uint256 share\r\n    ) internal {\r\n        userCollateralShare[from] -= share;\r\n        totalCollateralShare -= share;\r\n        emit LogRemoveCollateral(from, to, share);\r\n        yieldBox.transfer(address(this), to, collateralId, share);\r\n    }\r\n\r\n    /// @dev Concrete implementation of `repay`.\r\n    function _repay(\r\n        address from,\r\n        address to,\r\n        uint256 part\r\n    ) internal returns (uint256 amount) {\r\n        (totalBorrow, amount) = totalBorrow.sub(part, true);\r\n\r\n        userBorrowPart[to] -= part;\r\n\r\n        uint256 toWithdraw = (amount - part); //acrrued\r\n        uint256 toBurn = amount - toWithdraw;\r\n        yieldBox.withdraw(assetId, from, address(this), amount, 0);\r\n        //burn USD0\r\n        if (toBurn > 0) {\r\n            asset.burn(address(this), toBurn);\r\n        }\r\n\r\n        emit LogRepay(from, to, amount, part);\r\n    }\r\n\r\n    //TODO: accrue fees when re-borrowing\r\n    /// @dev Concrete implementation of `borrow`.\r\n    function _borrow(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal returns (uint256 part, uint256 share) {\r\n        uint256 feeAmount = (amount * borrowingFee) / FEE_PRECISION; // A flat % fee is charged for any borrow\r\n\r\n        (totalBorrow, part) = totalBorrow.add(amount + feeAmount, true);\r\n        require(\r\n            totalBorrowCap == 0 || totalBorrow.elastic <= totalBorrowCap,\r\n            'BigBang: borrow cap reached'\r\n        );\r\n\r\n        userBorrowPart[from] += part;\r\n\r\n        //mint USD0\r\n        asset.mint(address(this), amount);\r\n\r\n        //deposit borrowed amount to user\r\n        asset.approve(address(yieldBox), amount);\r\n        yieldBox.depositAsset(assetId, address(this), to, amount, 0);\r\n\r\n        share = yieldBox.toShare(assetId, amount, false);\r\n\r\n        emit LogBorrow(from, to, amount, feeAmount, part);\r\n    }\r\n\r\n    /// @notice Returns the min and max LTV for user in asset price\r\n    function _computeMaxAndMinLTVInAsset(\r\n        uint256 collateralShare,\r\n        uint256 _exchangeRate\r\n    ) internal view returns (uint256 min, uint256 max) {\r\n        uint256 collateralAmount = yieldBox.toAmount(\r\n            collateralId,\r\n            collateralShare,\r\n            false\r\n        );\r\n\r\n        max = (collateralAmount * EXCHANGE_RATE_PRECISION) / _exchangeRate;\r\n        min = (max * collateralizationRate) / COLLATERALIZATION_RATE_PRECISION;\r\n    }\r\n\r\n    function _getCallerReward(\r\n        uint256 borrowed,\r\n        uint256 startTVLInAsset,\r\n        uint256 maxTVLInAsset\r\n    ) internal view returns (uint256) {\r\n        if (borrowed == 0) return 0;\r\n        if (startTVLInAsset == 0) return 0;\r\n\r\n        if (borrowed < startTVLInAsset) return 0;\r\n        if (borrowed >= maxTVLInAsset) return minLiquidatorReward;\r\n\r\n        uint256 rewardPercentage = ((borrowed - startTVLInAsset) *\r\n            FEE_PRECISION) / (maxTVLInAsset - startTVLInAsset);\r\n\r\n        int256 diff = int256(minLiquidatorReward) - int256(maxLiquidatorReward);\r\n        int256 reward = (diff * int256(rewardPercentage)) /\r\n            int256(FEE_PRECISION) +\r\n            int256(maxLiquidatorReward);\r\n\r\n        return uint256(reward);\r\n    }\r\n\r\n    function _updateBorrowAndCollateralShare(\r\n        address user,\r\n        uint256 maxBorrowPart,\r\n        uint256 _exchangeRate\r\n    )\r\n        private\r\n        returns (\r\n            uint256 borrowAmount,\r\n            uint256 borrowPart,\r\n            uint256 collateralShare\r\n        )\r\n    {\r\n        uint256 availableBorrowPart = computeClosingFactor(user, _exchangeRate);\r\n        borrowPart = maxBorrowPart > availableBorrowPart\r\n            ? availableBorrowPart\r\n            : maxBorrowPart;\r\n\r\n        userBorrowPart[user] = userBorrowPart[user] - borrowPart;\r\n\r\n        borrowAmount = totalBorrow.toElastic(borrowPart, false);\r\n        collateralShare = yieldBox.toShare(\r\n            collateralId,\r\n            (borrowAmount * LIQUIDATION_MULTIPLIER * _exchangeRate) /\r\n                (LIQUIDATION_MULTIPLIER_PRECISION * EXCHANGE_RATE_PRECISION),\r\n            false\r\n        );\r\n        userCollateralShare[user] -= collateralShare;\r\n        require(borrowAmount != 0, 'SGL: solvent');\r\n\r\n        totalBorrow.elastic -= uint128(borrowAmount);\r\n        totalBorrow.base -= uint128(borrowPart);\r\n    }\r\n}\r\n"
    },
    "contracts/usd0/interfaces/IBigBang.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBigBang {\r\n    struct AccrueInfo {\r\n        uint64 debtRate;\r\n        uint64 lastAccrued;\r\n    }\r\n\r\n    function accrueInfo()\r\n        external\r\n        view\r\n        returns (uint64 debtRate, uint64 lastAccrued);\r\n}\r\n"
    },
    "contracts/usd0/IUSD0.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\nimport '@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol';\n\ninterface IUSD0 is IStrictERC20 {\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "tapioca-sdk/dist/contracts/libraries/LzLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.6.0;\npragma experimental ABIEncoderV2;\n\nlibrary LzLib {\n    // LayerZero communication\n    struct CallParams {\n        address payable refundAddress;\n        address zroPaymentAddress;\n    }\n\n    //---------------------------------------------------------------------------\n    // Address type handling\n\n    struct AirdropParams {\n        uint airdropAmount;\n        bytes32 airdropAddress;\n    }\n\n    function buildAdapterParams(LzLib.AirdropParams memory _airdropParams, uint _uaGasLimit) internal pure returns (bytes memory adapterParams) {\n        if (_airdropParams.airdropAmount == 0 && _airdropParams.airdropAddress == bytes32(0x0)) {\n            adapterParams = buildDefaultAdapterParams(_uaGasLimit);\n        } else {\n            adapterParams = buildAirdropAdapterParams(_uaGasLimit, _airdropParams);\n        }\n    }\n\n    // Build Adapter Params\n    function buildDefaultAdapterParams(uint _uaGas) internal pure returns (bytes memory) {\n        // txType 1\n        // bytes  [2       32      ]\n        // fields [txType  extraGas]\n        return abi.encodePacked(uint16(1), _uaGas);\n    }\n\n    function buildAirdropAdapterParams(uint _uaGas, AirdropParams memory _params) internal pure returns (bytes memory) {\n        require(_params.airdropAmount > 0, \"Airdrop amount must be greater than 0\");\n        require(_params.airdropAddress != bytes32(0x0), \"Airdrop address must be set\");\n\n        // txType 2\n        // bytes  [2       32        32            bytes[]         ]\n        // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\n        return abi.encodePacked(uint16(2), _uaGas, _params.airdropAmount, _params.airdropAddress);\n    }\n\n    function getGasLimit(bytes memory _adapterParams) internal pure returns (uint gasLimit) {\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \"Invalid adapterParams\");\n        assembly {\n            gasLimit := mload(add(_adapterParams, 34))\n        }\n    }\n\n    // Decode Adapter Params\n    function decodeAdapterParams(bytes memory _adapterParams) internal pure returns (uint16 txType, uint uaGas, uint airdropAmount, address payable airdropAddress) {\n        require(_adapterParams.length == 34 || _adapterParams.length > 66, \"Invalid adapterParams\");\n        assembly {\n            txType := mload(add(_adapterParams, 2))\n            uaGas := mload(add(_adapterParams, 34))\n        }\n        require(txType == 1 || txType == 2, \"Unsupported txType\");\n        require(uaGas > 0, \"Gas too low\");\n\n        if (txType == 2) {\n            assembly {\n                airdropAmount := mload(add(_adapterParams, 66))\n                airdropAddress := mload(add(_adapterParams, 86))\n            }\n        }\n    }\n\n    //---------------------------------------------------------------------------\n    // Address type handling\n    function bytes32ToAddress(bytes32 _bytes32Address) internal pure returns (address _address) {\n        return address(uint160(uint(_bytes32Address)));\n    }\n\n    function addressToBytes32(address _address) internal pure returns (bytes32 _bytes32Address) {\n        return bytes32(uint(uint160(_address)));\n    }\n}\n"
    },
    "yieldbox/contracts/AssetRegister.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"./interfaces/IStrategy.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\";\nimport \"./ERC1155.sol\";\n\n// An asset is a token + a strategy\nstruct Asset {\n    TokenType tokenType;\n    address contractAddress;\n    IStrategy strategy;\n    uint256 tokenId;\n}\n\ncontract AssetRegister is ERC1155 {\n    using BoringAddress for address;\n\n    event AssetRegistered(\n        TokenType indexed tokenType,\n        address indexed contractAddress,\n        IStrategy strategy,\n        uint256 indexed tokenId,\n        uint256 assetId\n    );\n\n    // ids start at 1 so that id 0 means it's not yet registered\n    mapping(TokenType => mapping(address => mapping(IStrategy => mapping(uint256 => uint256)))) public ids;\n    Asset[] public assets;\n\n    constructor() {\n        assets.push(Asset(TokenType.None, address(0), NO_STRATEGY, 0));\n    }\n\n    function assetCount() public view returns (uint256) {\n        return assets.length;\n    }\n\n    function _registerAsset(\n        TokenType tokenType,\n        address contractAddress,\n        IStrategy strategy,\n        uint256 tokenId\n    ) internal returns (uint256 assetId) {\n        // Checks\n        assetId = ids[tokenType][contractAddress][strategy][tokenId];\n\n        // If assetId is 0, this is a new asset that needs to be registered\n        if (assetId == 0) {\n            // Only do these checks if a new asset needs to be created\n            require(tokenId == 0 || tokenType != TokenType.ERC20, \"YieldBox: No tokenId for ERC20\");\n            require(\n                tokenType == TokenType.Native ||\n                    (tokenType == strategy.tokenType() && contractAddress == strategy.contractAddress() && tokenId == strategy.tokenId()),\n                \"YieldBox: Strategy mismatch\"\n            );\n            // If a new token gets added, the isContract checks that this is a deployed contract. Needed for security.\n            // Prevents getting shares for a future token whose address is known in advance. For instance a token that will be deployed with CREATE2 in the future or while the contract creation is\n            // in the mempool\n            require((tokenType == TokenType.Native && contractAddress == address(0)) || contractAddress.isContract(), \"YieldBox: Not a token\");\n\n            // Effects\n            assetId = assets.length;\n            assets.push(Asset(tokenType, contractAddress, strategy, tokenId));\n            ids[tokenType][contractAddress][strategy][tokenId] = assetId;\n\n            // The actual URI isn't emitted here as per EIP1155, because that would make this call super expensive.\n            emit URI(\"\", assetId);\n            emit AssetRegistered(tokenType, contractAddress, strategy, tokenId, assetId);\n        }\n    }\n\n    function registerAsset(\n        TokenType tokenType,\n        address contractAddress,\n        IStrategy strategy,\n        uint256 tokenId\n    ) public returns (uint256 assetId) {\n        // Native assets can only be added internally by the NativeTokenFactory\n        require(\n            tokenType == TokenType.ERC20 || tokenType == TokenType.ERC721 || tokenType == TokenType.ERC1155,\n            \"AssetManager: cannot add Native\"\n        );\n        assetId = _registerAsset(tokenType, contractAddress, strategy, tokenId);\n    }\n}\n"
    },
    "yieldbox/contracts/BoringMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nlibrary BoringMath {\n    function to128(uint256 a) internal pure returns (uint128 c) {\n        require(a <= type(uint128).max, \"BoringMath: uint128 Overflow\");\n        c = uint128(a);\n    }\n\n    function to64(uint256 a) internal pure returns (uint64 c) {\n        require(a <= type(uint64).max, \"BoringMath: uint64 Overflow\");\n        c = uint64(a);\n    }\n\n    function to32(uint256 a) internal pure returns (uint32 c) {\n        require(a <= type(uint32).max, \"BoringMath: uint32 Overflow\");\n        c = uint32(a);\n    }\n\n    function muldiv(\n        uint256 value,\n        uint256 mul,\n        uint256 div,\n        bool roundUp\n    ) internal pure returns (uint256 result) {\n        result = (value * mul) / div;\n        if (roundUp && (result * div) / mul < value) {\n            result++;\n        }\n    }\n}\n"
    },
    "yieldbox/contracts/enums/YieldBoxTokenType.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/// @title TokenType\n/// @author BoringCrypto (@Boring_Crypto)\n/// @notice The YieldBox can hold different types of tokens:\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\nenum TokenType {\n    Native,\n    ERC20,\n    ERC721,\n    ERC1155,\n    None\n}\n"
    },
    "yieldbox/contracts/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\n\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\";\n\n// Written by OreNoMochi (https://github.com/OreNoMochii), BoringCrypto\n\ncontract ERC1155 is IERC1155 {\n    using BoringAddress for address;\n\n    // mappings\n    mapping(address => mapping(address => bool)) public override isApprovedForAll; // map of operator approval\n    mapping(address => mapping(uint256 => uint256)) public override balanceOf; // map of tokens owned by\n    mapping(uint256 => uint256) public totalSupply; // totalSupply per token\n\n    function supportsInterface(bytes4 interfaceID) public pure override returns (bool) {\n        return\n            interfaceID == this.supportsInterface.selector || // EIP-165\n            interfaceID == 0xd9b67a26 || // ERC-1155\n            interfaceID == 0x0e89341c; // EIP-1155 Metadata\n    }\n\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view override returns (uint256[] memory balances) {\n        uint256 len = owners.length;\n        require(len == ids.length, \"ERC1155: Length mismatch\");\n\n        balances = new uint256[](len);\n\n        for (uint256 i = 0; i < len; i++) {\n            balances[i] = balanceOf[owners[i]][ids[i]];\n        }\n    }\n\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 value\n    ) internal {\n        require(to != address(0), \"No 0 address\");\n\n        balanceOf[to][id] += value;\n        totalSupply[id] += value;\n\n        emit TransferSingle(msg.sender, address(0), to, id, value);\n    }\n\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 value\n    ) internal {\n        require(from != address(0), \"No 0 address\");\n\n        balanceOf[from][id] -= value;\n        totalSupply[id] -= value;\n\n        emit TransferSingle(msg.sender, from, address(0), id, value);\n    }\n\n    function _transferSingle(\n        address from,\n        address to,\n        uint256 id,\n        uint256 value\n    ) internal {\n        require(to != address(0), \"No 0 address\");\n\n        balanceOf[from][id] -= value;\n        balanceOf[to][id] += value;\n\n        emit TransferSingle(msg.sender, from, to, id, value);\n    }\n\n    function _transferBatch(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values\n    ) internal {\n        require(to != address(0), \"No 0 address\");\n\n        uint256 len = ids.length;\n        for (uint256 i = 0; i < len; i++) {\n            uint256 id = ids[i];\n            uint256 value = values[i];\n            balanceOf[from][id] -= value;\n            balanceOf[to][id] += value;\n        }\n\n        emit TransferBatch(msg.sender, from, to, ids, values);\n    }\n\n    function _requireTransferAllowed(address from) internal view virtual {\n        require(from == msg.sender || isApprovedForAll[from][msg.sender] == true, \"Transfer not allowed\");\n    }\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external override {\n        _requireTransferAllowed(from);\n\n        _transferSingle(from, to, id, value);\n\n        if (to.isContract()) {\n            require(\n                IERC1155TokenReceiver(to).onERC1155Received(msg.sender, from, id, value, data) ==\n                    bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\")),\n                \"Wrong return value\"\n            );\n        }\n    }\n\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external override {\n        require(ids.length == values.length, \"ERC1155: Length mismatch\");\n        _requireTransferAllowed(from);\n\n        _transferBatch(from, to, ids, values);\n\n        if (to.isContract()) {\n            require(\n                IERC1155TokenReceiver(to).onERC1155BatchReceived(msg.sender, from, ids, values, data) ==\n                    bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\")),\n                \"Wrong return value\"\n            );\n        }\n    }\n\n    function setApprovalForAll(address operator, bool approved) external virtual override {\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    function uri(\n        uint256 /*assetId*/\n    ) external view virtual returns (string memory) {\n        return \"\";\n    }\n}\n"
    },
    "yieldbox/contracts/ERC1155TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155TokenReceiver.sol\";\n\ncontract ERC1155TokenReceiver is IERC1155TokenReceiver {\n    // ERC1155 receivers that simple accept the transfer\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return 0xf23a6e61; //bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] calldata,\n        uint256[] calldata,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return 0xbc197c81; //bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\n    }\n}\n"
    },
    "yieldbox/contracts/ERC721TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC721TokenReceiver.sol\";\n\ncontract ERC721TokenReceiver is IERC721TokenReceiver {\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes calldata\n    ) external pure override returns (bytes4) {\n        return 0x150b7a02; //bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))\n    }\n}\n"
    },
    "yieldbox/contracts/interfaces/IStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"../enums/YieldBoxTokenType.sol\";\nimport \"./IYieldBox.sol\";\n\ninterface IStrategy {\n    /// Each strategy only works with a single asset. This should help make implementations simpler and more readable.\n    /// To safe gas a proxy pattern (YieldBox factory) could be used to deploy the same strategy for multiple tokens.\n\n    /// It is recommended that strategies keep a small amount of funds uninvested (like 5%) to handle small withdrawals\n    /// and deposits without triggering costly investing/divesting logic.\n\n    /// #########################\n    /// ### Basic Information ###\n    /// #########################\n\n    /// Returns the address of the yieldBox that this strategy is for\n    function yieldBox() external view returns (IYieldBox yieldBox_);\n\n    /// Returns a name for this strategy\n    function name() external view returns (string memory name_);\n\n    /// Returns a description for this strategy\n    function description() external view returns (string memory description_);\n\n    /// #######################\n    /// ### Supported Token ###\n    /// #######################\n\n    /// Returns the standard that this strategy works with\n    function tokenType() external view returns (TokenType tokenType_);\n\n    /// Returns the contract address that this strategy works with\n    function contractAddress() external view returns (address contractAddress_);\n\n    /// Returns the tokenId that this strategy works with (for EIP1155)\n    /// This is always 0 for EIP20 tokens\n    function tokenId() external view returns (uint256 tokenId_);\n\n    /// ###########################\n    /// ### Balance Information ###\n    /// ###########################\n\n    /// Returns the total value the strategy holds (principle + gain) expressed in asset token amount.\n    /// This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more.\n    /// The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox\n    /// that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called.\n    function currentBalance() external view returns (uint256 amount);\n\n    /// Returns the maximum amount that can be withdrawn\n    function withdrawable() external view returns (uint256 amount);\n\n    /// Returns the maximum amount that can be withdrawn for a low gas fee\n    /// When more than this amount is withdrawn it will trigger divesting from the actual strategy\n    /// which will incur higher gas costs\n    function cheapWithdrawable() external view returns (uint256 amount);\n\n    /// ##########################\n    /// ### YieldBox Functions ###\n    /// ##########################\n\n    /// Is called by YieldBox to signal funds have been added, the strategy may choose to act on this\n    /// When a large enough deposit is made, this should trigger the strategy to invest into the actual\n    /// strategy. This function should normally NOT be used to invest on each call as that would be costly\n    /// for small deposits.\n    /// If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be\n    /// up to the strategy to wrap it if needed.\n    /// Only accept this call from the YieldBox\n    function deposited(uint256 amount) external;\n\n    /// Is called by the YieldBox to ask the strategy to withdraw to the user\n    /// When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount,\n    /// the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve.\n    /// If the strategy handles native tokens (ETH) it should send this, not a wrapped version.\n    /// With some strategies it might be hard to withdraw exactly the correct amount.\n    /// Only accept this call from the YieldBox\n    function withdraw(address to, uint256 amount) external;\n}\n\nIStrategy constant NO_STRATEGY = IStrategy(address(0));\n"
    },
    "yieldbox/contracts/interfaces/IWrappedNative.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\";\n\ninterface IWrappedNative is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "yieldbox/contracts/interfaces/IYieldBox.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"../enums/YieldBoxTokenType.sol\";\n\ninterface IYieldBox {\n    function wrappedNative() external view returns (address wrappedNative);\n\n    function assets(uint256 assetId)\n        external\n        view\n        returns (\n            TokenType tokenType,\n            address contractAddress,\n            address strategy,\n            uint256 tokenId\n        );\n\n    function nativeTokens(uint256 assetId)\n        external\n        view\n        returns (\n            string memory name,\n            string memory symbol,\n            uint8 decimals\n        );\n\n    function owner(uint256 assetId) external view returns (address owner);\n\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\n\n    function depositAsset(\n        uint256 assetId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n\n    function withdraw(\n        uint256 assetId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) external returns (uint256 amountOut, uint256 shareOut);\n\n    function transfer(\n        address from,\n        address to,\n        uint256 assetId,\n        uint256 share\n    ) external;\n\n    function batchTransfer(\n        address from,\n        address to,\n        uint256[] calldata assetIds_,\n        uint256[] calldata shares_\n    ) external;\n\n    function transferMultiple(\n        address from,\n        address[] calldata tos,\n        uint256 assetId,\n        uint256[] calldata shares\n    ) external;\n\n    function toShare(\n        uint256 assetId,\n        uint256 amount,\n        bool roundUp\n    ) external view returns (uint256 share);\n\n    function toAmount(\n        uint256 assetId,\n        uint256 share,\n        bool roundUp\n    ) external view returns (uint256 amount);\n}\n"
    },
    "yieldbox/contracts/NativeTokenFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\nimport \"./AssetRegister.sol\";\nimport \"./BoringMath.sol\";\n\nstruct NativeToken {\n    string name;\n    string symbol;\n    uint8 decimals;\n    string uri;\n}\n\n/// @title NativeTokenFactory\n/// @author BoringCrypto (@Boring_Crypto)\n/// @notice The NativeTokenFactory is a token factory to create ERC1155 tokens. This is used by YieldBox to create\n/// native tokens in YieldBox. These have many benefits:\n/// - low and predictable gas usage\n/// - simplified approval\n/// - no hidden features, all these tokens behave the same\n/// TODO: MintBatch? BurnBatch?\n\ncontract NativeTokenFactory is AssetRegister {\n    using BoringMath for uint256;\n\n    mapping(uint256 => NativeToken) public nativeTokens;\n    mapping(uint256 => address) public owner;\n    mapping(uint256 => address) public pendingOwner;\n\n    event TokenCreated(address indexed creator, string name, string symbol, uint8 decimals, uint256 tokenId);\n    event OwnershipTransferred(uint256 indexed tokenId, address indexed previousOwner, address indexed newOwner);\n\n    // ***************** //\n    // *** MODIFIERS *** //\n    // ***************** //\n\n    /// Modifier to check if the msg.sender is allowed to use funds belonging to the 'from' address.\n    /// If 'from' is msg.sender, it's allowed.\n    /// If 'msg.sender' is an address (an operator) that is approved by 'from', it's allowed.\n    modifier allowed(address from) {\n        _requireTransferAllowed(from);\n        _;\n    }\n\n    /// @notice Only allows the `owner` to execute the function.\n    /// @param tokenId The `tokenId` that the sender has to be owner of.\n    modifier onlyOwner(uint256 tokenId) {\n        require(msg.sender == owner[tokenId], \"NTF: caller is not the owner\");\n        _;\n    }\n\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\n    /// Can only be invoked by the current `owner`.\n    /// @param tokenId The `tokenId` of the token that ownership whose ownership will be transferred/renounced.\n    /// @param newOwner Address of the new owner.\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\n    function transferOwnership(\n        uint256 tokenId,\n        address newOwner,\n        bool direct,\n        bool renounce\n    ) public onlyOwner(tokenId) {\n        if (direct) {\n            // Checks\n            require(newOwner != address(0) || renounce, \"NTF: zero address\");\n\n            // Effects\n            emit OwnershipTransferred(tokenId, owner[tokenId], newOwner);\n            owner[tokenId] = newOwner;\n            pendingOwner[tokenId] = address(0);\n        } else {\n            // Effects\n            pendingOwner[tokenId] = newOwner;\n        }\n    }\n\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\n    /// @param tokenId The `tokenId` of the token that ownership is claimed for.\n    function claimOwnership(uint256 tokenId) public {\n        address _pendingOwner = pendingOwner[tokenId];\n\n        // Checks\n        require(msg.sender == _pendingOwner, \"NTF: caller != pending owner\");\n\n        // Effects\n        emit OwnershipTransferred(tokenId, owner[tokenId], _pendingOwner);\n        owner[tokenId] = _pendingOwner;\n        pendingOwner[tokenId] = address(0);\n    }\n\n    /// @notice Create a new native token. This will be an ERC1155 token. If later it's needed as an ERC20 token it can\n    /// be wrapped into an ERC20 token. Native support for ERC1155 tokens is growing though.\n    /// @param name The name of the token.\n    /// @param symbol The symbol of the token.\n    /// @param decimals The number of decimals of the token (this is just for display purposes). Should be set to 18 in normal cases.\n    function createToken(\n        string calldata name,\n        string calldata symbol,\n        uint8 decimals,\n        string calldata uri\n    ) public returns (uint32 tokenId) {\n        // To keep each Token unique in the AssetRegister, we use the assetId as the tokenId. So for native assets, the tokenId is always equal to the assetId.\n        tokenId = assets.length.to32();\n        _registerAsset(TokenType.Native, address(0), NO_STRATEGY, tokenId);\n        // Initial supply is 0, use owner can mint. For a fixed supply the owner can mint and revoke ownership.\n        // The msg.sender is the initial owner, can be changed after.\n        nativeTokens[tokenId] = NativeToken(name, symbol, decimals, uri);\n        owner[tokenId] = msg.sender;\n\n        emit TokenCreated(msg.sender, name, symbol, decimals, tokenId);\n        emit TransferSingle(msg.sender, address(0), address(0), tokenId, 0);\n        emit OwnershipTransferred(tokenId, address(0), msg.sender);\n    }\n\n    /// @notice The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\n    /// @param tokenId The token to be minted.\n    /// @param to The account to transfer the minted tokens to.\n    /// @param amount The amount of tokens to mint.\n    /// @dev For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\n    function mint(\n        uint256 tokenId,\n        address to,\n        uint256 amount\n    ) public onlyOwner(tokenId) {\n        _mint(to, tokenId, amount);\n    }\n\n    /// @notice Burns tokens. Only the holder of tokens can burn them or an approved operator.\n    /// @param tokenId The token to be burned.\n    /// @param amount The amount of tokens to burn.\n    function burn(\n        uint256 tokenId,\n        address from,\n        uint256 amount\n    ) public allowed(from) {\n        require(assets[tokenId].tokenType == TokenType.Native, \"NTF: Not native\");\n        _burn(from, tokenId, amount);\n    }\n\n    /// @notice The `owner` can mint tokens. If a fixed supply is needed, the `owner` should mint the totalSupply and renounce ownership.\n    /// @param tokenId The token to be minted.\n    /// @param tos The accounts to transfer the minted tokens to.\n    /// @param amounts The amounts of tokens to mint.\n    /// @dev If the tos array is longer than the amounts array there will be an out of bounds error. If the amounts array is longer, the extra amounts are simply ignored.\n    /// @dev For security reasons, operators are not allowed to mint. Only the actual owner can do this. Of course the owner can be a contract.\n    function batchMint(\n        uint256 tokenId,\n        address[] calldata tos,\n        uint256[] calldata amounts\n    ) public onlyOwner(tokenId) {\n        uint256 len = tos.length;\n        for (uint256 i = 0; i < len; i++) {\n            _mint(tos[i], tokenId, amounts[i]);\n        }\n    }\n\n    /// @notice Burns tokens. This is only useful to be used by an operator.\n    /// @param tokenId The token to be burned.\n    /// @param froms The accounts to burn tokens from.\n    /// @param amounts The amounts of tokens to burn.\n    function batchBurn(\n        uint256 tokenId,\n        address[] calldata froms,\n        uint256[] calldata amounts\n    ) public {\n        require(assets[tokenId].tokenType == TokenType.Native, \"NTF: Not native\");\n        uint256 len = froms.length;\n        for (uint256 i = 0; i < len; i++) {\n            _requireTransferAllowed(froms[i]);\n            _burn(froms[i], tokenId, amounts[i]);\n        }\n    }\n}\n"
    },
    "yieldbox/contracts/strategies/BaseStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\";\nimport \"../enums/YieldBoxTokenType.sol\";\nimport \"../interfaces/IStrategy.sol\";\n\n// solhint-disable const-name-snakecase\n// solhint-disable no-empty-blocks\n\nabstract contract BaseStrategy is IStrategy {\n    IYieldBox public immutable yieldBox;\n\n    constructor(IYieldBox _yieldBox) {\n        yieldBox = _yieldBox;\n    }\n\n    function _currentBalance() internal view virtual returns (uint256 amount);\n\n    function currentBalance() public view virtual returns (uint256 amount) {\n        return _currentBalance();\n    }\n\n    function withdrawable() external view virtual returns (uint256 amount) {\n        return _currentBalance();\n    }\n\n    function cheapWithdrawable() external view virtual returns (uint256 amount) {\n        return _currentBalance();\n    }\n\n    function _deposited(uint256 amount) internal virtual;\n\n    function deposited(uint256 amount) external {\n        require(msg.sender == address(yieldBox), \"Not YieldBox\");\n        _deposited(amount);\n    }\n\n    function _withdraw(address to, uint256 amount) internal virtual;\n\n    function withdraw(address to, uint256 amount) external {\n        require(msg.sender == address(yieldBox), \"Not YieldBox\");\n        _withdraw(to, amount);\n    }\n}\n\nabstract contract BaseERC20Strategy is BaseStrategy {\n    TokenType public constant tokenType = TokenType.ERC20;\n    uint256 public constant tokenId = 0;\n    address public immutable contractAddress;\n\n    constructor(IYieldBox _yieldBox, address _contractAddress) BaseStrategy(_yieldBox) {\n        contractAddress = _contractAddress;\n    }\n}\n\nabstract contract BaseERC1155Strategy is BaseStrategy {\n    TokenType public constant tokenType = TokenType.ERC1155;\n    uint256 public immutable tokenId;\n    address public immutable contractAddress;\n\n    constructor(\n        IYieldBox _yieldBox,\n        address _contractAddress,\n        uint256 _tokenId\n    ) BaseStrategy(_yieldBox) {\n        contractAddress = _contractAddress;\n        tokenId = _tokenId;\n    }\n}\n"
    },
    "yieldbox/contracts/strategies/ERC20WithoutStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\npragma experimental ABIEncoderV2;\n\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\";\nimport \"../enums/YieldBoxTokenType.sol\";\nimport \"../BoringMath.sol\";\nimport \"./BaseStrategy.sol\";\n\n// solhint-disable const-name-snakecase\n// solhint-disable no-empty-blocks\n\ncontract ERC20WithoutStrategy is BaseERC20Strategy {\n    using BoringERC20 for IERC20;\n\n    constructor(IYieldBox _yieldBox, IERC20 token) BaseERC20Strategy(_yieldBox, address(token)) {}\n\n    string public constant override name = \"No strategy\";\n    string public constant override description = \"No strategy\";\n\n    function _currentBalance() internal view override returns (uint256 amount) {\n        return IERC20(contractAddress).safeBalanceOf(address(this));\n    }\n\n    function _deposited(uint256 amount) internal override {}\n\n    function _withdraw(address to, uint256 amount) internal override {\n        IERC20(contractAddress).safeTransfer(to, amount);\n    }\n}\n"
    },
    "yieldbox/contracts/YieldBox.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\n// The YieldBox\n// The original BentoBox is owned by the Sushi team to set strategies for each token. Abracadabra wanted different strategies, which led to\n// them launching their own DegenBox. The YieldBox solves this by allowing an unlimited number of strategies for each token in a fully\n// permissionless manner. The YieldBox has no owner and operates fully permissionless.\n\n// Other improvements:\n// Better system to make sure the token to share ratio doesn't reset.\n// Full support for rebasing tokens.\n\n// This contract stores funds, handles their transfers, approvals and strategies.\n\n// Copyright (c) 2021, 2022 BoringCrypto - All rights reserved\n// Twitter: @Boring_Crypto\n\n// Since the contract is permissionless, only one deployment per chain is needed. If it's not yet deployed\n// on a chain or if you want to make a derivative work, contact @BoringCrypto. The core of YieldBox is\n// copyrighted. Most of the contracts that it builds on are open source though.\n\n// BEWARE: Still under active development\n// Security review not done yet\n\npragma solidity ^0.8.9;\npragma experimental ABIEncoderV2;\nimport \"./interfaces/IWrappedNative.sol\";\nimport \"./interfaces/IStrategy.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC721.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/Domain.sol\";\nimport \"./ERC721TokenReceiver.sol\";\nimport \"./ERC1155TokenReceiver.sol\";\nimport \"./ERC1155.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"./AssetRegister.sol\";\nimport \"./NativeTokenFactory.sol\";\nimport \"./YieldBoxRebase.sol\";\nimport \"./YieldBoxURIBuilder.sol\";\n\n// solhint-disable no-empty-blocks\n\n/// @title YieldBox\n/// @author BoringCrypto, Keno\n/// @notice The YieldBox is a vault for tokens. The stored tokens can assigned to strategies.\n/// Yield from this will go to the token depositors.\n/// Any funds transfered directly onto the YieldBox will be lost, use the deposit function instead.\ncontract YieldBox is BoringBatchable, NativeTokenFactory, ERC721TokenReceiver, ERC1155TokenReceiver {\n    using BoringAddress for address;\n    using BoringERC20 for IERC20;\n    using BoringERC20 for IWrappedNative;\n    using YieldBoxRebase for uint256;\n\n    // ************** //\n    // *** EVENTS *** //\n    // ************** //\n\n    // TODO: Add events\n\n    // ******************* //\n    // *** CONSTRUCTOR *** //\n    // ******************* //\n\n    IWrappedNative public immutable wrappedNative;\n    YieldBoxURIBuilder public immutable uriBuilder;\n\n    constructor(IWrappedNative wrappedNative_, YieldBoxURIBuilder uriBuilder_) {\n        wrappedNative = wrappedNative_;\n        uriBuilder = uriBuilder_;\n    }\n\n    // ************************** //\n    // *** INTERNAL FUNCTIONS *** //\n    // ************************** //\n\n    /// @dev Returns the total balance of `token` the strategy contract holds,\n    /// plus the total amount this contract thinks the strategy holds.\n    function _tokenBalanceOf(Asset storage asset) internal view returns (uint256 amount) {\n        return asset.strategy.currentBalance();\n    }\n\n    // ************************ //\n    // *** PUBLIC FUNCTIONS *** //\n    // ************************ //\n\n    /// @notice Deposit an amount of `token` represented in either `amount` or `share`.\n    /// @param assetId The id of the asset.\n    /// @param from which account to pull the tokens.\n    /// @param to which account to push the tokens.\n    /// @param amount Token amount in native representation to deposit.\n    /// @param share Token amount represented in shares to deposit. Takes precedence over `amount`.\n    /// @return amountOut The amount deposited.\n    /// @return shareOut The deposited amount repesented in shares.\n    function depositAsset(\n        uint256 assetId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\n        // Checks\n        Asset storage asset = assets[assetId];\n        require(asset.tokenType != TokenType.Native && asset.tokenType != TokenType.ERC721, \"YieldBox: can't deposit type\");\n\n        // Effects\n        uint256 totalAmount = _tokenBalanceOf(asset);\n        if (share == 0) {\n            // value of the share may be lower than the amount due to rounding, that's ok\n            share = amount._toShares(totalSupply[assetId], totalAmount, false);\n        } else {\n            // amount may be lower than the value of share due to rounding, in that case, add 1 to amount (Always round up)\n            amount = share._toAmount(totalSupply[assetId], totalAmount, true);\n        }\n\n        _mint(to, assetId, share);\n\n        // Interactions\n        if (asset.tokenType == TokenType.ERC20) {\n            // For ERC20 tokens, use the safe helper function to deal with broken ERC20 implementations. This actually calls transferFrom on the ERC20 contract.\n            IERC20(asset.contractAddress).safeTransferFrom(from, address(asset.strategy), amount);\n        } else {\n            // ERC1155\n            // When depositing yieldBox tokens into the yieldBox, things can be simplified\n            if (asset.contractAddress == address(this)) {\n                _transferSingle(from, address(asset.strategy), asset.tokenId, amount);\n            } else {\n                IERC1155(asset.contractAddress).safeTransferFrom(from, address(asset.strategy), asset.tokenId, amount, \"\");\n            }\n        }\n\n        asset.strategy.deposited(amount);\n\n        return (amount, share);\n    }\n\n    /// @notice Deposit an NFT asset\n    /// @param assetId The id of the asset.\n    /// @param from which account to pull the tokens.\n    /// @param to which account to push the tokens.\n    /// @return amountOut The amount deposited.\n    /// @return shareOut The deposited amount repesented in shares.\n    function depositNFTAsset(\n        uint256 assetId,\n        address from,\n        address to\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\n        // Checks\n        Asset storage asset = assets[assetId];\n        require(asset.tokenType == TokenType.ERC721, \"YieldBox: not ERC721\");\n\n        // Effects\n        _mint(to, assetId, 1);\n\n        // Interactions\n        IERC721(asset.contractAddress).safeTransferFrom(from, address(asset.strategy), asset.tokenId);\n\n        asset.strategy.deposited(1);\n\n        return (1, 1);\n    }\n\n    function depositETHAsset(\n        uint256 assetId,\n        address to,\n        uint256 amount\n    )\n        public\n        payable\n        returns (\n            // TODO: allow shares with refund?\n            uint256 amountOut,\n            uint256 shareOut\n        )\n    {\n        // Checks\n        Asset storage asset = assets[assetId];\n        require(asset.tokenType == TokenType.ERC20 && asset.contractAddress == address(wrappedNative), \"YieldBox: not wrappedNative\");\n\n        // Effects\n        uint256 share = amount._toShares(totalSupply[assetId], _tokenBalanceOf(asset), false);\n\n        _mint(to, assetId, share);\n\n        // Interactions\n        wrappedNative.deposit{ value: amount }();\n        // Strategies always receive wrappedNative (supporting both wrapped and raw native tokens adds too much complexity)\n        wrappedNative.safeTransfer(address(asset.strategy), amount);\n        asset.strategy.deposited(amount);\n\n        return (amount, share);\n    }\n\n    /// @notice Withdraws an amount of `token` from a user account.\n    /// @param assetId The id of the asset.\n    /// @param from which user to pull the tokens.\n    /// @param to which user to push the tokens.\n    /// @param amount of tokens. Either one of `amount` or `share` needs to be supplied.\n    /// @param share Like above, but `share` takes precedence over `amount`.\n    function withdraw(\n        uint256 assetId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) public allowed(from) returns (uint256 amountOut, uint256 shareOut) {\n        // Checks\n        Asset storage asset = assets[assetId];\n        require(asset.tokenType != TokenType.Native, \"YieldBox: can't withdraw Native\");\n\n        // Effects\n        uint256 totalAmount = _tokenBalanceOf(asset);\n        if (share == 0) {\n            // value of the share paid could be lower than the amount paid due to rounding, in that case, add a share (Always round up)\n            share = amount._toShares(totalSupply[assetId], totalAmount, true);\n        } else {\n            // amount may be lower than the value of share due to rounding, that's ok\n            amount = share._toAmount(totalSupply[assetId], totalAmount, false);\n        }\n\n        _burn(from, assetId, share);\n\n        // Interactions\n        asset.strategy.withdraw(to, amount);\n\n        return (amount, share);\n    }\n\n    /// @notice Transfer shares from a user account to another one.\n    /// @param from which user to pull the tokens.\n    /// @param to which user to push the tokens.\n    /// @param assetId The id of the asset.\n    /// @param share The amount of `token` in shares.\n    function transfer(\n        address from,\n        address to,\n        uint256 assetId,\n        uint256 share\n    ) public allowed(from) {\n        _transferSingle(from, to, assetId, share);\n    }\n\n    function batchTransfer(\n        address from,\n        address to,\n        uint256[] calldata assetIds_,\n        uint256[] calldata shares_\n    ) public allowed(from) {\n        _transferBatch(from, to, assetIds_, shares_);\n    }\n\n    /// @notice Transfer shares from a user account to multiple other ones.\n    /// @param assetId The id of the asset.\n    /// @param from which user to pull the tokens.\n    /// @param tos The receivers of the tokens.\n    /// @param shares The amount of `token` in shares for each receiver in `tos`.\n    function transferMultiple(\n        address from,\n        address[] calldata tos,\n        uint256 assetId,\n        uint256[] calldata shares\n    ) public allowed(from) {\n        // Checks\n        uint256 len = tos.length;\n        for (uint256 i = 0; i < len; i++) {\n            require(tos[i] != address(0), \"YieldBox: to not set\"); // To avoid a bad UI from burning funds\n        }\n\n        // Effects\n        uint256 totalAmount;\n        for (uint256 i = 0; i < len; i++) {\n            address to = tos[i];\n            uint256 share_ = shares[i];\n            balanceOf[to][assetId] += share_;\n            totalAmount += share_;\n            emit TransferSingle(msg.sender, from, to, assetId, share_);\n        }\n        balanceOf[from][assetId] -= totalAmount;\n    }\n\n    function setApprovalForAll(address operator, bool approved) external override {\n        // Checks\n        require(operator != address(0), \"YieldBox: operator not set\"); // Important for security\n        require(operator != address(this), \"YieldBox: can't approve yieldBox\");\n\n        // Effects\n        isApprovedForAll[msg.sender][operator] = approved;\n\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    // This functionality has been split off into a separate contract. This is only a view function, so gas usage isn't a huge issue.\n    // This keeps the YieldBox contract smaller, so it can be optimized more.\n    function uri(uint256 assetId) external view override returns (string memory) {\n        return uriBuilder.uri(assets[assetId], nativeTokens[assetId], totalSupply[assetId], owner[assetId]);\n    }\n\n    function name(uint256 assetId) external view returns (string memory) {\n        return uriBuilder.name(assets[assetId], nativeTokens[assetId].name);\n    }\n\n    function symbol(uint256 assetId) external view returns (string memory) {\n        return uriBuilder.symbol(assets[assetId], nativeTokens[assetId].symbol);\n    }\n\n    function decimals(uint256 assetId) external view returns (uint8) {\n        return uriBuilder.decimals(assets[assetId], nativeTokens[assetId].decimals);\n    }\n\n    // Helper functions\n\n    function assetTotals(uint256 assetId) external view returns (uint256 totalShare, uint256 totalAmount) {\n        totalShare = totalSupply[assetId];\n        totalAmount = _tokenBalanceOf(assets[assetId]);\n    }\n\n    /// @dev Helper function to represent an `amount` of `token` in shares.\n    /// @param assetId The id of the asset.\n    /// @param amount The `token` amount.\n    /// @param roundUp If the result `share` should be rounded up.\n    /// @return share The token amount represented in shares.\n    function toShare(\n        uint256 assetId,\n        uint256 amount,\n        bool roundUp\n    ) external view returns (uint256 share) {\n        if (assets[assetId].tokenType == TokenType.Native || assets[assetId].tokenType == TokenType.ERC721) {\n            share = amount;\n        } else {\n            share = amount._toShares(totalSupply[assetId], _tokenBalanceOf(assets[assetId]), roundUp);\n        }\n    }\n\n    /// @dev Helper function represent shares back into the `token` amount.\n    /// @param assetId The id of the asset.\n    /// @param share The amount of shares.\n    /// @param roundUp If the result should be rounded up.\n    /// @return amount The share amount back into native representation.\n    function toAmount(\n        uint256 assetId,\n        uint256 share,\n        bool roundUp\n    ) external view returns (uint256 amount) {\n        if (assets[assetId].tokenType == TokenType.Native || assets[assetId].tokenType == TokenType.ERC721) {\n            amount = share;\n        } else {\n            amount = share._toAmount(totalSupply[assetId], _tokenBalanceOf(assets[assetId]), roundUp);\n        }\n    }\n\n    /// @dev Helper function represent the balance in `token` amount for a `user` for an `asset`.\n    /// @param user The `user` to get the amount for.\n    /// @param assetId The id of the asset.\n    function amountOf(address user, uint256 assetId) external view returns (uint256 amount) {\n        if (assets[assetId].tokenType == TokenType.Native || assets[assetId].tokenType == TokenType.ERC721) {\n            amount = balanceOf[user][assetId];\n        } else {\n            amount = balanceOf[user][assetId]._toAmount(totalSupply[assetId], _tokenBalanceOf(assets[assetId]), false);\n        }\n    }\n\n    function deposit(\n        TokenType tokenType,\n        address contractAddress,\n        IStrategy strategy,\n        uint256 tokenId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 share\n    ) public returns (uint256 amountOut, uint256 shareOut) {\n        if (tokenType == TokenType.Native) {\n            // If native token, register it as an ERC1155 asset (as that's what it is)\n            return depositAsset(registerAsset(TokenType.ERC1155, address(this), strategy, tokenId), from, to, amount, share);\n        } else {\n            return depositAsset(registerAsset(tokenType, contractAddress, strategy, tokenId), from, to, amount, share);\n        }\n    }\n\n    function depositETH(\n        IStrategy strategy,\n        address to,\n        uint256 amount\n    ) public payable returns (uint256 amountOut, uint256 shareOut) {\n        return depositETHAsset(registerAsset(TokenType.ERC20, address(wrappedNative), strategy, 0), to, amount);\n    }\n}\n"
    },
    "yieldbox/contracts/YieldBoxRebase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\npragma experimental ABIEncoderV2;\nimport \"./interfaces/IStrategy.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/interfaces/IERC1155.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/BoringAddress.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/Domain.sol\";\nimport \"./ERC1155TokenReceiver.sol\";\nimport \"./ERC1155.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/BoringBatchable.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/BoringFactory.sol\";\n\nlibrary YieldBoxRebase {\n    /// @notice Calculates the base value in relationship to `elastic` and `total`.\n    function _toShares(\n        uint256 amount,\n        uint256 totalShares_,\n        uint256 totalAmount,\n        bool roundUp\n    ) internal pure returns (uint256 share) {\n        // To prevent reseting the ratio due to withdrawal of all shares, we start with\n        // 1 amount/1e8 shares already burned. This also starts with a 1 : 1e8 ratio which\n        // functions like 8 decimal fixed point math. This prevents ratio attacks or inaccuracy\n        // due to 'gifting' or rebasing tokens. (Up to a certain degree)\n        totalAmount++;\n        totalShares_ += 1e8;\n\n        // Calculte the shares using te current amount to share ratio\n        share = (amount * totalShares_) / totalAmount;\n\n        // Default is to round down (Solidity), round up if required\n        if (roundUp && (share * totalAmount) / totalShares_ < amount) {\n            share++;\n        }\n    }\n\n    /// @notice Calculates the elastic value in relationship to `base` and `total`.\n    function _toAmount(\n        uint256 share,\n        uint256 totalShares_,\n        uint256 totalAmount,\n        bool roundUp\n    ) internal pure returns (uint256 amount) {\n        // To prevent reseting the ratio due to withdrawal of all shares, we start with\n        // 1 amount/1e8 shares already burned. This also starts with a 1 : 1e8 ratio which\n        // functions like 8 decimal fixed point math. This prevents ratio attacks or inaccuracy\n        // due to 'gifting' or rebasing tokens. (Up to a certain degree)\n        totalAmount++;\n        totalShares_ += 1e8;\n\n        // Calculte the amount using te current amount to share ratio\n        amount = (share * totalAmount) / totalShares_;\n\n        // Default is to round down (Solidity), round up if required\n        if (roundUp && (amount * totalShares_) / totalAmount < share) {\n            amount++;\n        }\n    }\n}\n"
    },
    "yieldbox/contracts/YieldBoxURIBuilder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.9;\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\";\nimport \"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\";\nimport \"./interfaces/IYieldBox.sol\";\nimport \"./NativeTokenFactory.sol\";\n\n// solhint-disable quotes\n\ncontract YieldBoxURIBuilder {\n    using BoringERC20 for IERC20;\n    using Strings for uint256;\n    using Base64 for bytes;\n\n    struct AssetDetails {\n        string tokenType;\n        string name;\n        string symbol;\n        uint256 decimals;\n    }\n\n    function name(Asset calldata asset, string calldata nativeName) external view returns (string memory) {\n        if (asset.strategy == NO_STRATEGY) {\n            return nativeName;\n        } else {\n            if (asset.tokenType == TokenType.ERC20) {\n                IERC20 token = IERC20(asset.contractAddress);\n                return string(abi.encodePacked(token.safeName(), \" (\", asset.strategy.name(), \")\"));\n            } else if (asset.tokenType == TokenType.ERC1155) {\n                return\n                    string(\n                        abi.encodePacked(\n                            string(\n                                abi.encodePacked(\n                                    \"ERC1155:\",\n                                    uint256(uint160(asset.contractAddress)).toHexString(20),\n                                    \"/\",\n                                    asset.tokenId.toString()\n                                )\n                            ),\n                            \" (\",\n                            asset.strategy.name(),\n                            \")\"\n                        )\n                    );\n            } else {\n                return string(abi.encodePacked(nativeName, \" (\", asset.strategy.name(), \")\"));\n            }\n        }\n    }\n\n    function symbol(Asset calldata asset, string calldata nativeSymbol) external view returns (string memory) {\n        if (asset.strategy == NO_STRATEGY) {\n            return nativeSymbol;\n        } else {\n            if (asset.tokenType == TokenType.ERC20) {\n                IERC20 token = IERC20(asset.contractAddress);\n                return string(abi.encodePacked(token.safeSymbol(), \" (\", asset.strategy.name(), \")\"));\n            } else if (asset.tokenType == TokenType.ERC1155) {\n                return string(abi.encodePacked(\"ERC1155\", \" (\", asset.strategy.name(), \")\"));\n            } else {\n                return string(abi.encodePacked(nativeSymbol, \" (\", asset.strategy.name(), \")\"));\n            }\n        }\n    }\n\n    function decimals(Asset calldata asset, uint8 nativeDecimals) external view returns (uint8) {\n        if (asset.tokenType == TokenType.ERC1155) {\n            return 0;\n        } else if (asset.tokenType == TokenType.ERC20) {\n            IERC20 token = IERC20(asset.contractAddress);\n            return token.safeDecimals();\n        } else {\n            return nativeDecimals;\n        }\n    }\n\n    function uri(\n        Asset calldata asset,\n        NativeToken calldata nativeToken,\n        uint256 totalSupply,\n        address owner\n    ) external view returns (string memory) {\n        AssetDetails memory details;\n        if (asset.tokenType == TokenType.ERC1155) {\n            // Contracts can't retrieve URIs, so the details are out of reach\n            details.tokenType = \"ERC1155\";\n            details.name = string(\n                abi.encodePacked(\"ERC1155:\", uint256(uint160(asset.contractAddress)).toHexString(20), \"/\", asset.tokenId.toString())\n            );\n            details.symbol = \"ERC1155\";\n        } else if (asset.tokenType == TokenType.ERC20) {\n            IERC20 token = IERC20(asset.contractAddress);\n            details = AssetDetails(\"ERC20\", token.safeName(), token.safeSymbol(), token.safeDecimals());\n        } else {\n            // Native\n            details.tokenType = \"Native\";\n            details.name = nativeToken.name;\n            details.symbol = nativeToken.symbol;\n            details.decimals = nativeToken.decimals;\n        }\n\n        string memory properties = string(\n            asset.tokenType != TokenType.Native\n                ? abi.encodePacked(',\"tokenAddress\":\"', uint256(uint160(asset.contractAddress)).toHexString(20), '\"')\n                : abi.encodePacked(',\"totalSupply\":', totalSupply.toString(), ',\"fixedSupply\":', owner == address(0) ? \"true\" : \"false\")\n        );\n\n        return\n            string(\n                abi.encodePacked(\n                    \"data:application/json;base64,\",\n                    abi\n                        .encodePacked(\n                            '{\"name\":\"',\n                            details.name,\n                            '\",\"symbol\":\"',\n                            details.symbol,\n                            '\"',\n                            asset.tokenType == TokenType.ERC1155 ? \"\" : ',\"decimals\":',\n                            asset.tokenType == TokenType.ERC1155 ? \"\" : details.decimals.toString(),\n                            ',\"properties\":{\"strategy\":\"',\n                            uint256(uint160(address(asset.strategy))).toHexString(20),\n                            '\",\"tokenType\":\"',\n                            details.tokenType,\n                            '\"',\n                            properties,\n                            asset.tokenType == TokenType.ERC1155 ? string(abi.encodePacked(',\"tokenId\":', asset.tokenId.toString())) : \"\",\n                            \"}}\"\n                        )\n                        .encode()\n                )\n            );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}