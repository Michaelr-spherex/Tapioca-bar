{
  "language": "Solidity",
  "sources": {
    "contracts/mocks/MultisigMock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.18;\n\ncontract MultisigMock {\n    address[] public owners;\n    mapping(address => bool) public isOwner;\n    uint public numConfirmationsRequired;\n\n    struct Transaction {\n        address to;\n        uint value;\n        bytes data;\n        bool executed;\n        uint numConfirmations;\n    }\n\n    mapping(uint => mapping(address => bool)) public isConfirmed;\n\n    Transaction[] public transactions;\n\n    modifier onlyOwner() {\n        require(isOwner[msg.sender], \"not owner\");\n        _;\n    }\n    modifier txExists(uint _txIndex) {\n        require(_txIndex < transactions.length, \"tx does not exist\");\n        _;\n    }\n\n    modifier notExecuted(uint _txIndex) {\n        require(!transactions[_txIndex].executed, \"tx already executed\");\n        _;\n    }\n\n    modifier notConfirmed(uint _txIndex) {\n        require(!isConfirmed[_txIndex][msg.sender], \"tx already confirmed\");\n        _;\n    }\n\n    constructor(uint _numConfirmationsRequired) {\n        isOwner[msg.sender] = true;\n        owners.push(msg.sender);\n\n        numConfirmationsRequired = _numConfirmationsRequired;\n    }\n\n    function getTransactionCount() public view returns (uint) {\n        return transactions.length;\n    }\n\n    function getOwners() public view returns (address[] memory) {\n        return owners;\n    }\n\n    function submitTransaction(\n        address _to,\n        uint _value,\n        bytes memory _data\n    ) public onlyOwner {\n        transactions.push(\n            Transaction({\n                to: _to,\n                value: _value,\n                data: _data,\n                executed: false,\n                numConfirmations: 0\n            })\n        );\n    }\n\n    function confirmTransaction(\n        uint _txIndex\n    )\n        public\n        onlyOwner\n        txExists(_txIndex)\n        notExecuted(_txIndex)\n        notConfirmed(_txIndex)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n        transaction.numConfirmations += 1;\n        isConfirmed[_txIndex][msg.sender] = true;\n    }\n\n    function executeTransaction(\n        uint _txIndex\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(\n            transaction.numConfirmations >= numConfirmationsRequired,\n            \"cannot execute tx\"\n        );\n\n        transaction.executed = true;\n\n        (bool success, ) = transaction.to.call{value: transaction.value}(\n            transaction.data\n        );\n        require(success, \"tx failed\");\n    }\n\n    function getTransaction(\n        uint _txIndex\n    )\n        public\n        view\n        returns (\n            address to,\n            uint value,\n            bytes memory data,\n            bool executed,\n            uint numConfirmations\n        )\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        return (\n            transaction.to,\n            transaction.value,\n            transaction.data,\n            transaction.executed,\n            transaction.numConfirmations\n        );\n    }\n}\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}