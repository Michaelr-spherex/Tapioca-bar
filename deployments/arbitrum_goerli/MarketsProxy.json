{
  "address": "0xD441B51FeBEB9633831947547fbdfb5b662617FF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "singularity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "LogMarketStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_dstSingularity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_sglPayload",
          "type": "bytes"
        }
      ],
      "name": "ReceiveFromChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_srcAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_sglPayload",
          "type": "bytes"
        }
      ],
      "name": "SendToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_type",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDstGas",
          "type": "uint256"
        }
      ],
      "name": "SetMinDstGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "precrime",
          "type": "address"
        }
      ],
      "name": "SetPrecrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemoteAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_useCustomAdapterParams",
          "type": "bool"
        }
      ],
      "name": "SetUseCustomAdapterParams",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_PAYLOAD_SIZE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FUNCTION_TYPE_SEND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NO_EXTRA_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_marketDstAddress",
          "type": "address"
        },
        {
          "internalType": "bytes[]",
          "name": "_marketCalls",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "executeOnChain",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemoteAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "minDstGasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "payloadSizeLimitLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_packetType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minGas",
          "type": "uint256"
        }
      ],
      "name": "setMinDstGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setPayloadSizeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_precrime",
          "type": "address"
        }
      ],
      "name": "setPrecrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemoteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_useCustomAdapterParams",
          "type": "bool"
        }
      ],
      "name": "setUseCustomAdapterParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateMarketStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useCustomAdapterParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe5961170260a965337b768a2f498b66ff1d6db1926ab7a289960a9395c359e9a",
  "receipt": {
    "to": null,
    "from": "0x40282d3Cf4890D9806BC1853e97a59C93D813653",
    "contractAddress": "0xD441B51FeBEB9633831947547fbdfb5b662617FF",
    "transactionIndex": 1,
    "gasUsed": "6809398",
    "logsBloom": "0x
    "blockHash": "0xe0c43c739edda7dc3e9e803f1c02adb6bd02d9ef3705f68fb147296ecaa9dac9",
    "transactionHash": "0xe5961170260a965337b768a2f498b66ff1d6db1926ab7a289960a9395c359e9a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 7676440,
        "transactionHash": "0xe5961170260a965337b768a2f498b66ff1d6db1926ab7a289960a9395c359e9a",
        "address": "0xD441B51FeBEB9633831947547fbdfb5b662617FF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000040282d3cf4890d9806bc1853e97a59c93d813653"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe0c43c739edda7dc3e9e803f1c02adb6bd02d9ef3705f68fb147296ecaa9dac9"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 7676440,
        "transactionHash": "0xe5961170260a965337b768a2f498b66ff1d6db1926ab7a289960a9395c359e9a",
        "address": "0xD441B51FeBEB9633831947547fbdfb5b662617FF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000040282d3cf4890d9806bc1853e97a59c93d813653",
          "0x00000000000000000000000040282d3cf4890d9806bc1853e97a59c93d813653"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe0c43c739edda7dc3e9e803f1c02adb6bd02d9ef3705f68fb147296ecaa9dac9"
      }
    ],
    "blockNumber": 7676440,
    "cumulativeGasUsed": "6809398",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6aB5Ae6822647046626e83ee6dB8187151E1d5ab",
    "0x40282d3Cf4890D9806BC1853e97a59C93D813653"
  ],
  "numDeployments": 1,
  "solcInputHash": "3c1211aa0116175131f08ea61f910b35",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"singularity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogMarketStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_dstSingularity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_sglPayload\",\"type\":\"bytes\"}],\"name\":\"ReceiveFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_srcAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_sglPayload\",\"type\":\"bytes\"}],\"name\":\"SendToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_useCustomAdapterParams\",\"type\":\"bool\"}],\"name\":\"SetUseCustomAdapterParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_PAYLOAD_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNCTION_TYPE_SEND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_EXTRA_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_marketDstAddress\",\"type\":\"address\"},{\"internalType\":\"bytes[]\",\"name\":\"_marketCalls\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"executeOnChain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"payloadSizeLimitLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setPayloadSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useCustomAdapterParams\",\"type\":\"bool\"}],\"name\":\"setUseCustomAdapterParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateMarketStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useCustomAdapterParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_lzEndpoint\":\"LayerZero endpoint address\",\"_owner\":\"contract's owner address\"}},\"executeOnChain(uint16,address,bytes[],bytes)\":{\"params\":{\"_adapterParams\":\"custom adapters\",\"_dstChainId\":\"te LayerZero destination chain id\",\"_marketCalls\":\"Market calls\",\"_marketDstAddress\":\"destination Market address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setUseCustomAdapterParams(bool)\":{\"params\":{\"_useCustomAdapterParams\":\"true/false\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMarketStatus(address,bool)\":{\"details\":\"callable by owner\",\"params\":{\"_market\":\"the market address\",\"_status\":\"whitelisted/not\"}}},\"title\":\"Omnichain proxy for Singularity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"creates a new SGLProxy contract\"},\"executeOnChain(uint16,address,bytes[],bytes)\":{\"notice\":\"execute Singularity methods on another chain\"},\"setUseCustomAdapterParams(bool)\":{\"notice\":\"set custom adapter usage status\"},\"updateMarketStatus(address,bool)\":{\"notice\":\"set whitelist status for market\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarketsProxy.sol\":\"MarketsProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\\n    // By removing them you can't accidentally use them.\\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IStrictERC20 {\\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3ab46c194bf6ebcb4ae1b094c7e41061ef651ee1150d1a07beaf9db085dee0ee\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\\n    bytes4 private constant SIG_TOTALSUPPLY = 0x18160ddd; // balanceOf(address)\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to The address of the user to check.\\n    /// @return amount The token amount.\\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\\n        require(success && data.length >= 32, \\\"BoringERC20: BalanceOf failed\\\");\\n        amount = abi.decode(data, (uint256));\\n    }\\n\\n    /// @notice Provides a gas-optimized totalSupply to avoid a redundant extcodesize check in addition to the returndatasize check.\\n    /// @param token The address of the ERC-20 token.\\n    /// @return totalSupply The token totalSupply.\\n    function safeTotalSupply(IERC20 token) internal view returns (uint256 totalSupply) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_TOTALSUPPLY));\\n        require(success && data.length >= 32, \\\"BoringERC20: totalSupply failed\\\");\\n        totalSupply = abi.decode(data, (uint256));\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdd38cb2bcfe5facaf9e0d8bbba61454e7eb5dc705366668ffce73a72f57abcad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MarketsProxy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport '@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol';\\r\\nimport 'tapioca-sdk/dist/contracts/lzApp/NonblockingLzApp.sol';\\r\\n\\r\\nimport './interfaces/IMarket.sol';\\r\\n\\r\\n/*\\r\\n\\r\\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____        \\r\\n _\\\\///////\\\\\\\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/////\\\\\\\\\\\\///______/\\\\\\\\\\\\///\\\\\\\\\\\\________/\\\\\\\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__       \\r\\n  _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_      \\r\\n   _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\/\\\\\\\\\\\\______/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_     \\r\\n    _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\/////////________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \\r\\n     _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_   \\r\\n      _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\______\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\_____\\\\///\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\///\\\\\\\\\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_ \\r\\n        _______\\\\///________\\\\///________\\\\///__\\\\///______________\\\\///////////_______\\\\/////_____________\\\\/////////__\\\\///________\\\\///__\\r\\n\\r\\n*/\\r\\n/// @title Omnichain proxy for Singularity\\r\\ncontract MarketsProxy is NonblockingLzApp {\\r\\n    // ************ //\\r\\n    // *** VARS *** //\\r\\n    // ************ //\\r\\n    bool public useCustomAdapterParams;\\r\\n\\r\\n    // Address of the whitelisted Singularity contracts\\r\\n    mapping(address => bool) public markets;\\r\\n\\r\\n    // ***************** //\\r\\n    // *** CONSTANTS *** //\\r\\n    // ***************** //\\r\\n    uint256 public constant NO_EXTRA_GAS = 0;\\r\\n    uint256 public constant FUNCTION_TYPE_SEND = 1;\\r\\n\\r\\n    // ************** //\\r\\n    // *** EVENTS *** //\\r\\n    // ************** //\\r\\n\\r\\n    event ReceiveFromChain(\\r\\n        uint16 indexed _srcChainId,\\r\\n        address indexed _dstSingularity,\\r\\n        bytes _sglPayload\\r\\n    );\\r\\n    event SendToChain(\\r\\n        uint16 indexed _srcChainId,\\r\\n        address indexed _srcAddress,\\r\\n        bytes _sglPayload\\r\\n    );\\r\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\r\\n    event LogMarketStatus(address indexed singularity, bool status);\\r\\n\\r\\n    /// @notice creates a new SGLProxy contract\\r\\n    /// @param _lzEndpoint LayerZero endpoint address\\r\\n    /// @param _owner contract's owner address\\r\\n    constructor(address _lzEndpoint, address _owner)\\r\\n        NonblockingLzApp(_lzEndpoint)\\r\\n    {\\r\\n        _transferOwnership(_owner);\\r\\n    }\\r\\n\\r\\n    // ************************ //\\r\\n    // *** PUBLIC FUNCTIONS *** //\\r\\n    // ************************ //\\r\\n    /// @notice execute Singularity methods on another chain\\r\\n    /// @param _dstChainId te LayerZero destination chain id\\r\\n    /// @param _marketDstAddress destination Market address\\r\\n    /// @param _marketCalls Market calls\\r\\n    /// @param _adapterParams custom adapters\\r\\n    function executeOnChain(\\r\\n        uint16 _dstChainId,\\r\\n        address _marketDstAddress,\\r\\n        bytes[] memory _marketCalls,\\r\\n        bytes memory _adapterParams\\r\\n    ) external payable {\\r\\n        uint256 chainId = lzEndpoint.getChainId();\\r\\n        require(chainId != _dstChainId, 'MarketsProxy: chain not valid');\\r\\n\\r\\n        _send(\\r\\n            msg.sender,\\r\\n            _dstChainId,\\r\\n            _marketDstAddress,\\r\\n            _marketCalls,\\r\\n            payable(msg.sender),\\r\\n            address(0),\\r\\n            _adapterParams\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // *********************** //\\r\\n    // *** OWNER FUNCTIONS *** //\\r\\n    // *********************** //\\r\\n    /// @notice set whitelist status for market\\r\\n    /// @dev callable by owner\\r\\n    /// @param _market the market address\\r\\n    /// @param _status whitelisted/not\\r\\n    function updateMarketStatus(address _market, bool _status)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        markets[_market] = _status;\\r\\n        emit LogMarketStatus(_market, _status);\\r\\n    }\\r\\n\\r\\n    /// @notice set custom adapter usage status\\r\\n    /// @param _useCustomAdapterParams true/false\\r\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        useCustomAdapterParams = _useCustomAdapterParams;\\r\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\r\\n    }\\r\\n\\r\\n    // ************************* //\\r\\n    // *** PRIVATE FUNCTIONS *** //\\r\\n    // ************************* //\\r\\n    /// @notice override of the '_nonblockingLzReceive' method\\r\\n    function _nonblockingLzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory, /*_srcAddress*/\\r\\n        uint64, /*_nonce*/\\r\\n        bytes memory _payload\\r\\n    ) internal override {\\r\\n        // decode and load the toAddress\\r\\n        (, address toAddress, bytes[] memory marketCalls) = abi.decode(\\r\\n            _payload,\\r\\n            (bytes32, address, bytes[])\\r\\n        );\\r\\n\\r\\n        require(markets[toAddress], 'MarketsProxy: market not valid');\\r\\n\\r\\n        IMarket(toAddress).execute(marketCalls, true);\\r\\n\\r\\n        emit ReceiveFromChain(_srcChainId, toAddress, _payload);\\r\\n    }\\r\\n\\r\\n    /// @notice override of the '_send' method\\r\\n    function _send(\\r\\n        address _from,\\r\\n        uint16 _dstChainId,\\r\\n        address _toAddress,\\r\\n        bytes[] memory _marketCalls,\\r\\n        address payable _refundAddress,\\r\\n        address _zroPaymentAddress,\\r\\n        bytes memory _adapterParams\\r\\n    ) internal {\\r\\n        bytes memory payload = abi.encode(\\r\\n            abi.encodePacked(address(this)),\\r\\n            _toAddress,\\r\\n            _marketCalls\\r\\n        );\\r\\n        if (useCustomAdapterParams) {\\r\\n            _checkGasLimit(\\r\\n                _dstChainId,\\r\\n                uint16(FUNCTION_TYPE_SEND),\\r\\n                _adapterParams,\\r\\n                NO_EXTRA_GAS\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _adapterParams.length == 0,\\r\\n                'LzApp: _adapterParams must be empty.'\\r\\n            );\\r\\n        }\\r\\n        _lzSend(\\r\\n            _dstChainId,\\r\\n            payload,\\r\\n            _refundAddress,\\r\\n            _zroPaymentAddress,\\r\\n            _adapterParams,\\r\\n            msg.value\\r\\n        );\\r\\n\\r\\n        emit SendToChain(_dstChainId, _from, payload);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xff289b191b2912fc42b9a7c22f7e65d0d933868a5003cef92f0ac4f9ec84ac69\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './IOracle.sol';\\r\\n\\r\\ninterface IMarket {\\r\\n    function asset() external view returns (address);\\r\\n\\r\\n    function assetId() external view returns (uint256);\\r\\n\\r\\n    function collateral() external view returns (address);\\r\\n\\r\\n    function collateralId() external view returns (uint256);\\r\\n\\r\\n    function totalBorrowCap() external view returns (uint256);\\r\\n\\r\\n    function totalCollateralShare() external view returns (uint256);\\r\\n\\r\\n    function userBorrowPart(address) external view returns (uint256);\\r\\n\\r\\n    function userCollateralShare(address) external view returns (uint256);\\r\\n\\r\\n    function totalBorrow()\\r\\n        external\\r\\n        view\\r\\n        returns (uint128 elastic, uint128 base);\\r\\n\\r\\n    function oracle() external view returns (IOracle);\\r\\n\\r\\n    function oracleData() external view returns (bytes memory);\\r\\n\\r\\n    function exchangeRate() external view returns (uint256);\\r\\n\\r\\n    function yieldBox() external view returns (address payable);\\r\\n\\r\\n    function liquidationMultiplier() external view returns (uint256);\\r\\n\\r\\n    function addCollateral(\\r\\n        address from,\\r\\n        address to,\\r\\n        bool skim,\\r\\n        uint256 share\\r\\n    ) external;\\r\\n\\r\\n    function removeCollateral(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 share\\r\\n    ) external;\\r\\n\\r\\n    function repay(\\r\\n        address from,\\r\\n        address to,\\r\\n        bool skim,\\r\\n        uint256 part\\r\\n    ) external returns (uint256 amount);\\r\\n\\r\\n    function withdrawTo(\\r\\n        address from,\\r\\n        uint16 dstChainId,\\r\\n        bytes32 receiver,\\r\\n        uint256 amount,\\r\\n        bytes calldata adapterParams,\\r\\n        address payable refundAddress\\r\\n    ) external payable;\\r\\n\\r\\n    function borrow(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (uint256 part, uint256 share);\\r\\n\\r\\n    function execute(bytes[] calldata calls, bool revertOnFail)\\r\\n        external\\r\\n        returns (bool[] memory successes, string[] memory results);\\r\\n}\\r\\n\",\"keccak256\":\"0x847abf8d7f70415c98aceb9dcc1db18731074b8a834f17ae1634c104579676c9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IOracle {\\r\\n    /// @notice Get the latest exchange rate.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return success if no valid (recent) rate is available, return false else true.\\r\\n    /// @return rate The rate of the requested asset / pair / pool.\\r\\n    function get(bytes calldata data)\\r\\n        external\\r\\n        returns (bool success, uint256 rate);\\r\\n\\r\\n    /// @notice Check the last exchange rate without any state changes.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return success if no valid (recent) rate is available, return false else true.\\r\\n    /// @return rate The rate of the requested asset / pair / pool.\\r\\n    function peek(bytes calldata data)\\r\\n        external\\r\\n        view\\r\\n        returns (bool success, uint256 rate);\\r\\n\\r\\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return rate The rate of the requested asset / pair / pool.\\r\\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\\r\\n\\r\\n    /// @notice Returns a human readable (short) name about this oracle.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return (string) A human readable symbol name about this oracle.\\r\\n    function symbol(bytes calldata data) external view returns (string memory);\\r\\n\\r\\n    /// @notice Returns a human readable name about this oracle.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return (string) A human readable name about this oracle.\\r\\n    function name(bytes calldata data) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xf2fa35d3a39c5e99a46fc5ffe6ec42922060beb4cba101aaa37f2ff7f621409d\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\n\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\n    // @param _payload - a custom bytes payload to send to the destination contract\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\n\\n    // @notice used by the messaging library to publish verified payload\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\n    // @param _dstAddress - the address on destination chain\\n    // @param _nonce - the unbound message ordering nonce\\n    // @param _gasLimit - the gas limit for external contract execution\\n    // @param _payload - verified payload to send to the destination contract\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\n\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\n\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\n    // @param _srcAddress - the source chain contract address\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\n\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\n    // @param _dstChainId - the destination chain identifier\\n    // @param _userApplication - the user app address on this EVM chain\\n    // @param _payload - the custom message to send over LayerZero\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\n\\n    // @notice get this Endpoint's immutable source identifier\\n    function getChainId() external view returns (uint16);\\n\\n    // @notice the interface to retry failed message on this Endpoint destination\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    // @param _payload - the payload to be retried\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\n\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\n    // @param _srcChainId - the source chain identifier\\n    // @param _srcAddress - the source chain contract address\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\n\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\n    // @param _userApplication - the user app address on this EVM chain\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\n\\n    // @notice query if the non-reentrancy guard for send() is on\\n    // @return true if the guard is on. false otherwise\\n    function isSendingPayload() external view returns (bool);\\n\\n    // @notice query if the non-reentrancy guard for receive() is on\\n    // @return true if the guard is on. false otherwise\\n    function isReceivingPayload() external view returns (bool);\\n\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _userApplication - the contract address of the user application\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\n\\n    // @notice get the send() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\n\\n    // @notice get the lzReceive() LayerZero messaging library version\\n    // @param _userApplication - the contract address of the user application\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\n}\\n\",\"keccak256\":\"0xe9617a9f6db351b6ac4c9d5b1097798af59ad7f813e370e8cf69bb44addd8548\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroReceiver {\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\n    // @param _srcChainId - the source endpoint identifier\\n    // @param _srcAddress - the source sending contract address from the source chain\\n    // @param _nonce - the ordered message nonce\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0x909bf72002c91806f39a64172c12b4188219e8649deefbe8d862604d4f9d3faf\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\ninterface ILayerZeroUserApplicationConfig {\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\n    // @param _version - messaging library version\\n    // @param _chainId - the chainId for the pending config change\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\n\\n    // @notice set the send() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setSendVersion(uint16 _version) external;\\n\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\n    // @param _version - new messaging library version\\n    function setReceiveVersion(uint16 _version) external;\\n\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\n    // @param _srcChainId - the chainId of the source chain\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\n}\\n\",\"keccak256\":\"0xe3e50134e39aa3c0f916447d36367970c6e4df972d488b794227e0b052ce80d5\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\nimport \\\"../util/BytesLib.sol\\\";\\n\\n/*\\n * a generic LzReceiver implementation\\n */\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\n    using BytesLib for bytes;\\n\\n    // ua can not send payload larger than this by default, but it can be changed by the ua owner\\n    uint constant public DEFAULT_PAYLOAD_SIZE_LIMIT = 10000;\\n\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\n    mapping(uint16 => uint) public payloadSizeLimitLookup;\\n    address public precrime;\\n\\n    event SetPrecrime(address precrime);\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\n\\n    constructor(address _endpoint) {\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\n    }\\n\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\n        // lzReceive must be called by the endpoint for security\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\n\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\n\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\n        _checkPayloadSize(_dstChainId, _payload.length);\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\n    }\\n\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\n    }\\n\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\n        assembly {\\n            gasLimit := mload(add(_adapterParams, 34))\\n        }\\n    }\\n\\n    function _checkPayloadSize(uint16 _dstChainId, uint _payloadSize) internal view virtual {\\n        uint payloadSizeLimit = payloadSizeLimitLookup[_dstChainId];\\n        if (payloadSizeLimit == 0) { // use default if not set\\n            payloadSizeLimit = DEFAULT_PAYLOAD_SIZE_LIMIT;\\n        }\\n        require(_payloadSize <= payloadSizeLimit, \\\"LzApp: payload size is too large\\\");\\n    }\\n\\n    //---------------------------UserApplication config----------------------------------------\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\n    }\\n\\n    // generic config for LayerZero user Application\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\n    }\\n\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setSendVersion(_version);\\n    }\\n\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\n        lzEndpoint.setReceiveVersion(_version);\\n    }\\n\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\n    }\\n\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\n    // this function set the trusted path for the cross-chain communication\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\n        trustedRemoteLookup[_srcChainId] = _path;\\n        emit SetTrustedRemote(_srcChainId, _path);\\n    }\\n\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\n    }\\n\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\n    }\\n\\n    function setPrecrime(address _precrime) external onlyOwner {\\n        precrime = _precrime;\\n        emit SetPrecrime(_precrime);\\n    }\\n\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\n    }\\n\\n    // if the size is 0, it means default size limit\\n    function setPayloadSizeLimit(uint16 _dstChainId, uint _size) external onlyOwner {\\n        payloadSizeLimitLookup[_dstChainId] = _size;\\n    }\\n\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xf7a97c79e0670912e51cfe74a06bf049718640ac764706250a903a63fec6e0b6\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LzApp.sol\\\";\\nimport \\\"../util/ExcessivelySafeCall.sol\\\";\\n\\n/*\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\n */\\nabstract contract NonblockingLzApp is LzApp {\\n    using ExcessivelySafeCall for address;\\n\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\n\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\n\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\n\\n    // overriding the virtual function in LzReceiver\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\n        // try-catch all errors/exceptions\\n        if (!success) {\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\n        }\\n    }\\n\\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\n    }\\n\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\n        // only internal transaction\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n    }\\n\\n    //@notice override this function\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\n\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\n        // assert there is message to retry\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\n        // clear the stored message\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\n        // execute the message. revert if it fails again\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\n    }\\n}\\n\",\"keccak256\":\"0x2afd4980a5850f45f2c4d7ec44d77b292a51b80f847566479548f89572065311\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n        // Get a location of some free memory and store it in tempBytes as\\n        // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n        // Store the length of the first bytes array at the beginning of\\n        // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n        // Maintain a memory counter for the current write location in the\\n        // temp bytes array by adding the 32 bytes for the array length to\\n        // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n        // Stop copying when the memory counter reaches the length of the\\n        // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n            // Initialize a copy counter to the start of the _preBytes data,\\n            // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n            // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\n            // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Add the length of _postBytes to the current length of tempBytes\\n        // and store it as the new length in the first 32 bytes of the\\n        // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n        // Move the memory counter back from a multiple of 0x20 to the\\n        // actual end of the _preBytes data.\\n            mc := end\\n        // Stop copying when the memory counter reaches the new combined\\n        // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n        // Update the free-memory pointer by padding our last write location\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n        // next 32 byte block, then round down to the nearest multiple of\\n        // 32. If the sum of the length of the two arrays is zero then add\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n            not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\n        // of the array. (We don't need to use the offset into the slot\\n        // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n        // Arrays of 31 bytes or less have an even value in their slot,\\n        // while longer arrays have an odd value. The actual length is\\n        // the slot divided by two for odd values, and the lowest order\\n        // byte divided by two for even values.\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\n        // two to get the length. If the slot is odd, bitwise and the slot\\n        // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n        // slength can contain both the length and contents of the array\\n        // if length < 32 bytes so let's prepare for that\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n            // Since the new array still fits in the slot, we just need to\\n            // update the contents of the slot.\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                _preBytes.slot,\\n                // all the modifications to the slot are inside this\\n                // next block\\n                add(\\n                // we can just add to the slot contents because the\\n                // bytes we want to change are the LSBs\\n                fslot,\\n                add(\\n                mul(\\n                div(\\n                // load the bytes from memory\\n                mload(add(_postBytes, 0x20)),\\n                // zero all bytes to the right\\n                exp(0x100, sub(32, mlength))\\n                ),\\n                // and now shift left the number of bytes to\\n                // leave space for the length in the slot\\n                exp(0x100, sub(32, newlength))\\n                ),\\n                // increase length by the double of the memory\\n                // bytes length\\n                mul(mlength, 2)\\n                )\\n                )\\n                )\\n            }\\n            case 1 {\\n            // The stored value fits in the slot, but the combined value\\n            // will exceed it.\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // The contents of the _postBytes array start 32 bytes into\\n            // the structure. Our first read should obtain the `submod`\\n            // bytes that can fit into the unused space in the last word\\n            // of the stored array. To get this, we read 32 bytes starting\\n            // from `submod`, so the data we read overlaps with the array\\n            // contents by `submod` bytes. Masking the lowest-order\\n            // `submod` bytes allows us to add that value directly to the\\n            // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                sc,\\n                add(\\n                and(\\n                fslot,\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                ),\\n                and(mload(mc), mask)\\n                )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n            // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n            // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n            // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n            // Copy over the first `submod` bytes of the new data as in\\n            // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n    internal\\n    pure\\n    returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n            // The first word of the slice result is potentially a partial\\n            // word read from the original array. To read it, we calculate\\n            // the length of that partial word and start copying that many\\n            // bytes into the array. The first word we copy will start with\\n            // data we don't care about, but the last `lengthmod` bytes will\\n            // land at the beginning of the contents of the new array. When\\n            // we're done copying, we overwrite the full first word with\\n            // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n            // The multiplication in the next line is necessary\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\n            // the following copy loop was copying the origin's length\\n            // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                // The multiplication in the next line has the same exact purpose\\n                // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n            //update free-memory pointer\\n            //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n            //zero out the 32 bytes slice we are about to return\\n            //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n            // cb is a circuit breaker in the for loop since there's\\n            //  no said feature for inline assembly loops\\n            // cb = 1 - don't breaker\\n            // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                    // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n    internal\\n    view\\n    returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n        // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n        // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n        // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                    // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                        // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                        let cb := 1\\n\\n                    // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                            // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n            // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0x2255aadad70e87ed42b158776330175644b07fbbc7e77ed32cd6330974abbcee\",\"license\":\"Unlicense\"},\"tapioca-sdk/dist/contracts/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.7.6;\\n\\nlibrary ExcessivelySafeCall {\\n    uint256 constant LOW_28_MASK =\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := call(\\n            _gas, // gas\\n            _target, // recipient\\n            0, // ether value\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\n    /// contract. This prevents the called contract from causing reversion of\\n    /// the caller in as many ways as we can.\\n    /// @dev The main difference between this and a solidity low-level call is\\n    /// that we limit the number of bytes that the callee can cause to be\\n    /// copied to caller memory. This prevents stupid things like malicious\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\n    /// to memory.\\n    /// @param _target The address to call\\n    /// @param _gas The amount of gas to forward to the remote contract\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\n    /// to memory.\\n    /// @param _calldata The data to send to the remote contract\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\n    /// `_maxCopy` bytes.\\n    function excessivelySafeStaticCall(\\n        address _target,\\n        uint256 _gas,\\n        uint16 _maxCopy,\\n        bytes memory _calldata\\n    ) internal view returns (bool, bytes memory) {\\n        // set up for assembly call\\n        uint256 _toCopy;\\n        bool _success;\\n        bytes memory _returnData = new bytes(_maxCopy);\\n        // dispatch message to recipient\\n        // by assembly calling \\\"handle\\\" function\\n        // we call via assembly to avoid memcopying a very large returndata\\n        // returned by a malicious contract\\n        assembly {\\n            _success := staticcall(\\n            _gas, // gas\\n            _target, // recipient\\n            add(_calldata, 0x20), // inloc\\n            mload(_calldata), // inlen\\n            0, // outloc\\n            0 // outlen\\n            )\\n        // limit our copy to 256 bytes\\n            _toCopy := returndatasize()\\n            if gt(_toCopy, _maxCopy) {\\n                _toCopy := _maxCopy\\n            }\\n        // Store the length of the copied bytes\\n            mstore(_returnData, _toCopy)\\n        // copy the bytes from returndata[0:_toCopy]\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\n        }\\n        return (_success, _returnData);\\n    }\\n\\n    /**\\n     * @notice Swaps function selectors in encoded contract calls\\n     * @dev Allows reuse of encoded calldata for functions with identical\\n     * argument types but different names. It simply swaps out the first 4 bytes\\n     * for the new selector. This function modifies memory in place, and should\\n     * only be used with caution.\\n     * @param _newSelector The new 4-byte selector\\n     * @param _buf The encoded contract args\\n     */\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\n    internal\\n    pure\\n    {\\n        require(_buf.length >= 4);\\n        uint256 _mask = LOW_28_MASK;\\n        assembly {\\n        // load the first word of\\n            let _word := mload(add(_buf, 0x20))\\n        // mask out the top 4 bytes\\n        // /x\\n            _word := and(_word, _mask)\\n            _word := or(_newSelector, _word)\\n            mstore(add(_buf, 0x20), _word)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x23942250ddd277c443fa27c6b4ab51e6b3b5e654548b6b9e8d785a88ebec4dfe\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002d8f38038062002d8f8339810160408190526200003491620000ce565b8180620000413362000061565b6001600160a01b031660805250620000598162000061565b505062000106565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000c957600080fd5b919050565b60008060408385031215620000e257600080fd5b620000ed83620000b1565b9150620000fd60208401620000b1565b90509250929050565b608051612c356200015a600039600081816104e00152818161065b015281816108aa0152818161095201528181610a7501528181610e7a0152818161136c015281816113f00152611cb00152612c356000f3fe6080604052600436106101e25760003560e01c80639f38369a11610102578063df2a5b3b11610095578063f2fde38b11610064578063f2fde38b146105e5578063f3264a2d14610605578063f5ecbdbc14610625578063f86a4ab31461064557600080fd5b8063df2a5b3b1461056b578063eab45d9c1461058b578063eb8d72b7146105ab578063ed629c5c146105cb57600080fd5b8063baf3292d116100d1578063baf3292d14610502578063c446183414610522578063cbed8b9c14610538578063d1deba1f1461055857600080fd5b80639f38369a14610479578063a6c3d16514610499578063af3fb21c146104b9578063b353aaa7146104ce57600080fd5b80635b8c41e61161017a5780638cfd8f5c116101495780638cfd8f5c146103bf5780638da5cb5b146103f75780638e8f294b14610429578063950c8a741461045957600080fd5b80635b8c41e61461030e57806366ad5c8a1461035d578063715018a61461037d5780637533d7881461039257600080fd5b80633d8b38f6116101b65780633d8b38f6146102695780633f1f4fa41461029e57806342d65a8d146102d957806344770515146102f957600080fd5b80621d3567146101e757806307e0db17146102095780630df374831461022957806310ddb13714610249575b600080fd5b3480156101f357600080fd5b50610207610202366004611e72565b610658565b005b34801561021557600080fd5b50610207610224366004611f07565b610889565b34801561023557600080fd5b50610207610244366004611f24565b610912565b34801561025557600080fd5b50610207610264366004611f07565b610931565b34801561027557600080fd5b50610289610284366004611f50565b610989565b60405190151581526020015b60405180910390f35b3480156102aa57600080fd5b506102cb6102b9366004611f07565b60036020526000908152604090205481565b604051908152602001610295565b3480156102e557600080fd5b506102076102f4366004611f50565b610a56565b34801561030557600080fd5b506102cb600081565b34801561031a57600080fd5b506102cb610329366004612067565b6005602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561036957600080fd5b50610207610378366004611e72565b610adc565b34801561038957600080fd5b50610207610bb8565b34801561039e57600080fd5b506103b26103ad366004611f07565b610bcc565b6040516102959190612122565b3480156103cb57600080fd5b506102cb6103da366004612135565b600260209081526000928352604080842090915290825290205481565b34801561040357600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610295565b34801561043557600080fd5b50610289610444366004612183565b60076020526000908152604090205460ff1681565b34801561046557600080fd5b50600454610411906001600160a01b031681565b34801561048557600080fd5b506103b2610494366004611f07565b610c66565b3480156104a557600080fd5b506102076104b4366004611f50565b610d75565b3480156104c557600080fd5b506102cb600181565b3480156104da57600080fd5b506104117f000000000000000000000000000000000000000000000000000000000000000081565b34801561050e57600080fd5b5061020761051d366004612183565b610dfe565b34801561052e57600080fd5b506102cb61271081565b34801561054457600080fd5b506102076105533660046121a0565b610e5b565b610207610566366004611e72565b610ef0565b34801561057757600080fd5b50610207610586366004612212565b611106565b34801561059757600080fd5b506102076105a6366004612261565b6111b8565b3480156105b757600080fd5b506102076105c6366004611f50565b611201565b3480156105d757600080fd5b506006546102899060ff1681565b3480156105f157600080fd5b50610207610600366004612183565b61125b565b34801561061157600080fd5b5061020761062036600461227e565b6112d4565b34801561063157600080fd5b506103b26106403660046122ac565b61133b565b610207610653366004612320565b6113ec565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106d55760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff8616600090815260016020526040812080546106f39061241a565b80601f016020809104026020016040519081016040528092919081815260200182805461071f9061241a565b801561076c5780601f106107415761010080835404028352916020019161076c565b820191906000526020600020905b81548152906001019060200180831161074f57829003601f168201915b50505050509050805186869050148015610787575060008151115b80156107af5750805160208201206040516107a59088908890612454565b6040518091039020145b61080a5760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b60648201526084016106cc565b6108808787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506114d992505050565b50505050505050565b610891611552565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b1580156108f757600080fd5b505af115801561090b573d6000803e3d6000fd5b5050505050565b61091a611552565b61ffff909116600090815260036020526040902055565b610939611552565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb137906024016108dd565b61ffff8316600090815260016020526040812080548291906109aa9061241a565b80601f01602080910402602001604051908101604052809291908181526020018280546109d69061241a565b8015610a235780601f106109f857610100808354040283529160200191610a23565b820191906000526020600020905b815481529060010190602001808311610a0657829003601f168201915b505050505090508383604051610a3a929190612454565b60405180910390208180519060200120149150505b9392505050565b610a5e611552565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d90610aae9086908690869060040161248d565b600060405180830381600087803b158015610ac857600080fd5b505af1158015610880573d6000803e3d6000fd5b333014610b3a5760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b60648201526084016106cc565b610bb08686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152899350915087908790819084018382808284376000920191909152506115ac92505050565b505050505050565b610bc0611552565b610bca60006116f8565b565b60016020526000908152604090208054610be59061241a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c119061241a565b8015610c5e5780601f10610c3357610100808354040283529160200191610c5e565b820191906000526020600020905b815481529060010190602001808311610c4157829003601f168201915b505050505081565b61ffff8116600090815260016020526040812080546060929190610c899061241a565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb59061241a565b8015610d025780601f10610cd757610100808354040283529160200191610d02565b820191906000526020600020905b815481529060010190602001808311610ce557829003601f168201915b505050505090508051600003610d5a5760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f726400000060448201526064016106cc565b610a4f600060148351610d6d91906124c1565b839190611748565b610d7d611552565b818130604051602001610d92939291906124d8565b60408051601f1981840301815291815261ffff8516600090815260016020522090610dbd9082612544565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051610df19392919061248d565b60405180910390a1505050565b610e06611552565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b906020015b60405180910390a150565b610e63611552565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90610eb79088908890889088908890600401612603565b600060405180830381600087803b158015610ed157600080fd5b505af1158015610ee5573d6000803e3d6000fd5b505050505050505050565b61ffff86166000908152600560205260408082209051610f139088908890612454565b90815260408051602092819003830190206001600160401b03871660009081529252902054905080610f935760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b60648201526084016106cc565b808383604051610fa4929190612454565b6040518091039020146110035760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b60648201526084016106cc565b61ffff871660009081526005602052604080822090516110269089908990612454565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f880182900482028301820190528682526110be918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506115ac92505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e587878787856040516110f595949392919061263c565b60405180910390a150505050505050565b61110e611552565b600081116111565760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b60448201526064016106cc565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001610df1565b6111c0611552565b6006805460ff19168215159081179091556040519081527f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a490602001610e50565b611209611552565b61ffff83166000908152600160205260409020611227828483612677565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051610df19392919061248d565b611263611552565b6001600160a01b0381166112c85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106cc565b6112d1816116f8565b50565b6112dc611552565b6001600160a01b038216600081815260076020908152604091829020805460ff191685151590811790915591519182527f1bc0fc0d4d10627d4504555c200a4f8c7c6470c31b305764e9f1372161078a8d910160405180910390a25050565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa1580156113bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113e39190810190612786565b95945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633408e4706040518163ffffffff1660e01b8152600401602060405180830381865afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147091906127c2565b61ffff1690508461ffff1681036114c95760405162461bcd60e51b815260206004820152601d60248201527f4d61726b65747350726f78793a20636861696e206e6f742076616c696400000060448201526064016106cc565b61090b3386868633600088611855565b60008061153c5a60966366ad5c8a60e01b8989898960405160240161150194939291906127df565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190611981565b9150915081610bb057610bb08686868685611a0b565b6000546001600160a01b03163314610bca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106cc565b600080828060200190518101906115c3919061281d565b6001600160a01b038216600090815260076020526040902054919450925060ff1690506116325760405162461bcd60e51b815260206004820152601e60248201527f4d61726b65747350726f78793a206d61726b6574206e6f742076616c6964000060448201526064016106cc565b60405163aa7d966560e01b81526001600160a01b0383169063aa7d966590611661908490600190600401612941565b6000604051808303816000875af1158015611680573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116a89190810190612a04565b5050816001600160a01b03168661ffff167fe56f9bcb2a90b3dc97f0814c287246469fc5c7050a6022ad21b2fe9058129c81856040516116e89190612122565b60405180910390a3505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608161175681601f612ac8565b10156117955760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016106cc565b61179f8284612ac8565b845110156117e35760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016106cc565b606082158015611802576040519150600082526020820160405261184c565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561183b578051835260209283019201611823565b5050858452601f01601f1916604052505b50949350505050565b6040516bffffffffffffffffffffffff193060601b16602082015260009060340160408051601f19818403018152908290526118979188908890602001612ae0565b60408051601f1981840301815291905260065490915060ff16156118c8576118c3876001846000611aa8565b611923565b8151156119235760405162461bcd60e51b8152602060048201526024808201527f4c7a4170703a205f61646170746572506172616d73206d75737420626520656d604482015263383a3c9760e11b60648201526084016106cc565b611931878286868634611b87565b876001600160a01b03168761ffff167fd3b01b57b25c5a506ceef68a2e5ce63cf91fe09d5270a8bb49839a64d5b1b1f78360405161196f9190612122565b60405180910390a35050505050505050565b6000606060008060008661ffff166001600160401b038111156119a6576119a6611fa4565b6040519080825280601f01601f1916602001820160405280156119d0576020820181803683370190505b50905060008087516020890160008d8df191503d9250868311156119f2578692505b828152826000602083013e909890975095505050505050565b8180519060200120600560008761ffff1661ffff16815260200190815260200160002085604051611a3c9190612b1e565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90611a999087908790879087908790612b3a565b60405180910390a15050505050565b6000611ab383611d2c565b61ffff808716600090815260026020908152604080832093891683529290529081205491925090611ae5908490612ac8565b905060008111611b375760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f742073657400000000000060448201526064016106cc565b80821015610bb05760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f77000000000060448201526064016106cc565b61ffff861660009081526001602052604081208054611ba59061241a565b80601f0160208091040260200160405190810160405280929190818152602001828054611bd19061241a565b8015611c1e5780601f10611bf357610100808354040283529160200191611c1e565b820191906000526020600020905b815481529060010190602001808311611c0157829003601f168201915b505050505090508051600003611c8f5760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b60648201526084016106cc565b611c9a878751611d88565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c5803100908490611cf1908b9086908c908c908c908c90600401612b98565b6000604051808303818588803b158015611d0a57600080fd5b505af1158015611d1e573d6000803e3d6000fd5b505050505050505050505050565b6000602282511015611d805760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d730000000060448201526064016106cc565b506022015190565b61ffff821660009081526003602052604081205490819003611da957506127105b80821115611df95760405162461bcd60e51b815260206004820181905260248201527f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c6172676560448201526064016106cc565b505050565b61ffff811681146112d157600080fd5b60008083601f840112611e2057600080fd5b5081356001600160401b03811115611e3757600080fd5b602083019150836020828501011115611e4f57600080fd5b9250929050565b80356001600160401b0381168114611e6d57600080fd5b919050565b60008060008060008060808789031215611e8b57600080fd5b8635611e9681611dfe565b955060208701356001600160401b0380821115611eb257600080fd5b611ebe8a838b01611e0e565b9097509550859150611ed260408a01611e56565b94506060890135915080821115611ee857600080fd5b50611ef589828a01611e0e565b979a9699509497509295939492505050565b600060208284031215611f1957600080fd5b8135610a4f81611dfe565b60008060408385031215611f3757600080fd5b8235611f4281611dfe565b946020939093013593505050565b600080600060408486031215611f6557600080fd5b8335611f7081611dfe565b925060208401356001600160401b03811115611f8b57600080fd5b611f9786828701611e0e565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611fe257611fe2611fa4565b604052919050565b60006001600160401b0382111561200357612003611fa4565b50601f01601f191660200190565b600082601f83011261202257600080fd5b813561203561203082611fea565b611fba565b81815284602083860101111561204a57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561207c57600080fd5b833561208781611dfe565b925060208401356001600160401b038111156120a257600080fd5b6120ae86828701612011565b9250506120bd60408501611e56565b90509250925092565b60005b838110156120e15781810151838201526020016120c9565b838111156120f0576000848401525b50505050565b6000815180845261210e8160208601602086016120c6565b601f01601f19169290920160200192915050565b602081526000610a4f60208301846120f6565b6000806040838503121561214857600080fd5b823561215381611dfe565b9150602083013561216381611dfe565b809150509250929050565b6001600160a01b03811681146112d157600080fd5b60006020828403121561219557600080fd5b8135610a4f8161216e565b6000806000806000608086880312156121b857600080fd5b85356121c381611dfe565b945060208601356121d381611dfe565b93506040860135925060608601356001600160401b038111156121f557600080fd5b61220188828901611e0e565b969995985093965092949392505050565b60008060006060848603121561222757600080fd5b833561223281611dfe565b9250602084013561224281611dfe565b929592945050506040919091013590565b80151581146112d157600080fd5b60006020828403121561227357600080fd5b8135610a4f81612253565b6000806040838503121561229157600080fd5b823561229c8161216e565b9150602083013561216381612253565b600080600080608085870312156122c257600080fd5b84356122cd81611dfe565b935060208501356122dd81611dfe565b925060408501356122ed8161216e565b9396929550929360600135925050565b60006001600160401b0382111561231657612316611fa4565b5060051b60200190565b6000806000806080858703121561233657600080fd5b843561234181611dfe565b93506020858101356123528161216e565b935060408601356001600160401b038082111561236e57600080fd5b818801915088601f83011261238257600080fd5b8135612390612030826122fd565b81815260059190911b8301840190848101908b8311156123af57600080fd5b8585015b838110156123e7578035858111156123cb5760008081fd5b6123d98e89838a0101612011565b8452509186019186016123b3565b5096505050606088013592508083111561240057600080fd5b505061240e87828801612011565b91505092959194509250565b600181811c9082168061242e57607f821691505b60208210810361244e57634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff841681526040602082015260006113e3604083018486612464565b634e487b7160e01b600052601160045260246000fd5b6000828210156124d3576124d36124ab565b500390565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b601f821115611df957600081815260208120601f850160051c810160208610156125255750805b601f850160051c820191505b81811015610bb057828155600101612531565b81516001600160401b0381111561255d5761255d611fa4565b6125718161256b845461241a565b846124fe565b602080601f8311600181146125a6576000841561258e5750858301515b600019600386901b1c1916600185901b178555610bb0565b600085815260208120601f198616915b828110156125d5578886015182559484019460019091019084016125b6565b50858210156125f35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061ffff808816835280871660208401525084604083015260806060830152612631608083018486612464565b979650505050505050565b61ffff8616815260806020820152600061265a608083018688612464565b6001600160401b0394909416604083015250606001529392505050565b6001600160401b0383111561268e5761268e611fa4565b6126a28361269c835461241a565b836124fe565b6000601f8411600181146126d657600085156126be5750838201355b600019600387901b1c1916600186901b17835561090b565b600083815260209020601f19861690835b8281101561270757868501358255602094850194600190920191016126e7565b50868210156127245760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600061274461203084611fea565b905082815283838301111561275857600080fd5b610a4f8360208301846120c6565b600082601f83011261277757600080fd5b610a4f83835160208501612736565b60006020828403121561279857600080fd5b81516001600160401b038111156127ae57600080fd5b6127ba84828501612766565b949350505050565b6000602082840312156127d457600080fd5b8151610a4f81611dfe565b61ffff851681526080602082015260006127fc60808301866120f6565b6001600160401b0385166040840152828103606084015261263181856120f6565b60008060006060848603121561283257600080fd5b835192506020808501516128458161216e565b60408601519093506001600160401b038082111561286257600080fd5b818701915087601f83011261287657600080fd5b8151612884612030826122fd565b81815260059190911b8301840190848101908a8311156128a357600080fd5b8585015b838110156128db578051858111156128bf5760008081fd5b6128cd8d89838a0101612766565b8452509186019186016128a7565b508096505050505050509250925092565b600081518084526020808501808196508360051b8101915082860160005b858110156129345782840389526129228483516120f6565b9885019893509084019060010161290a565b5091979650505050505050565b60408152600061295460408301856128ec565b905082151560208301529392505050565b600082601f83011261297657600080fd5b81516020612986612030836122fd565b82815260059290921b840181019181810190868411156129a557600080fd5b8286015b848110156129f95780516001600160401b038111156129c85760008081fd5b8701603f810189136129da5760008081fd5b6129eb898683015160408401612736565b8452509183019183016129a9565b509695505050505050565b60008060408385031215612a1757600080fd5b82516001600160401b0380821115612a2e57600080fd5b818501915085601f830112612a4257600080fd5b81516020612a52612030836122fd565b82815260059290921b84018101918181019089841115612a7157600080fd5b948201945b83861015612a98578551612a8981612253565b82529482019490820190612a76565b91880151919650909350505080821115612ab157600080fd5b50612abe85828601612965565b9150509250929050565b60008219821115612adb57612adb6124ab565b500190565b606081526000612af360608301866120f6565b6001600160a01b03851660208401528281036040840152612b1481856128ec565b9695505050505050565b60008251612b308184602087016120c6565b9190910192915050565b61ffff8616815260a060208201526000612b5760a08301876120f6565b6001600160401b03861660408401528281036060840152612b7881866120f6565b90508281036080840152612b8c81856120f6565b98975050505050505050565b61ffff8716815260c060208201526000612bb560c08301886120f6565b8281036040840152612bc781886120f6565b6001600160a01b0387811660608601528616608085015283810360a08501529050612bf281856120f6565b999850505050505050505056fea26469706673582212207dc20a4112383f07fa85580e80012933e5c2ac5138c7b80203e8aacce43d5d3264736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106101e25760003560e01c80639f38369a11610102578063df2a5b3b11610095578063f2fde38b11610064578063f2fde38b146105e5578063f3264a2d14610605578063f5ecbdbc14610625578063f86a4ab31461064557600080fd5b8063df2a5b3b1461056b578063eab45d9c1461058b578063eb8d72b7146105ab578063ed629c5c146105cb57600080fd5b8063baf3292d116100d1578063baf3292d14610502578063c446183414610522578063cbed8b9c14610538578063d1deba1f1461055857600080fd5b80639f38369a14610479578063a6c3d16514610499578063af3fb21c146104b9578063b353aaa7146104ce57600080fd5b80635b8c41e61161017a5780638cfd8f5c116101495780638cfd8f5c146103bf5780638da5cb5b146103f75780638e8f294b14610429578063950c8a741461045957600080fd5b80635b8c41e61461030e57806366ad5c8a1461035d578063715018a61461037d5780637533d7881461039257600080fd5b80633d8b38f6116101b65780633d8b38f6146102695780633f1f4fa41461029e57806342d65a8d146102d957806344770515146102f957600080fd5b80621d3567146101e757806307e0db17146102095780630df374831461022957806310ddb13714610249575b600080fd5b3480156101f357600080fd5b50610207610202366004611e72565b610658565b005b34801561021557600080fd5b50610207610224366004611f07565b610889565b34801561023557600080fd5b50610207610244366004611f24565b610912565b34801561025557600080fd5b50610207610264366004611f07565b610931565b34801561027557600080fd5b50610289610284366004611f50565b610989565b60405190151581526020015b60405180910390f35b3480156102aa57600080fd5b506102cb6102b9366004611f07565b60036020526000908152604090205481565b604051908152602001610295565b3480156102e557600080fd5b506102076102f4366004611f50565b610a56565b34801561030557600080fd5b506102cb600081565b34801561031a57600080fd5b506102cb610329366004612067565b6005602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561036957600080fd5b50610207610378366004611e72565b610adc565b34801561038957600080fd5b50610207610bb8565b34801561039e57600080fd5b506103b26103ad366004611f07565b610bcc565b6040516102959190612122565b3480156103cb57600080fd5b506102cb6103da366004612135565b600260209081526000928352604080842090915290825290205481565b34801561040357600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610295565b34801561043557600080fd5b50610289610444366004612183565b60076020526000908152604090205460ff1681565b34801561046557600080fd5b50600454610411906001600160a01b031681565b34801561048557600080fd5b506103b2610494366004611f07565b610c66565b3480156104a557600080fd5b506102076104b4366004611f50565b610d75565b3480156104c557600080fd5b506102cb600181565b3480156104da57600080fd5b506104117f000000000000000000000000000000000000000000000000000000000000000081565b34801561050e57600080fd5b5061020761051d366004612183565b610dfe565b34801561052e57600080fd5b506102cb61271081565b34801561054457600080fd5b506102076105533660046121a0565b610e5b565b610207610566366004611e72565b610ef0565b34801561057757600080fd5b50610207610586366004612212565b611106565b34801561059757600080fd5b506102076105a6366004612261565b6111b8565b3480156105b757600080fd5b506102076105c6366004611f50565b611201565b3480156105d757600080fd5b506006546102899060ff1681565b3480156105f157600080fd5b50610207610600366004612183565b61125b565b34801561061157600080fd5b5061020761062036600461227e565b6112d4565b34801561063157600080fd5b506103b26106403660046122ac565b61133b565b610207610653366004612320565b6113ec565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106d55760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff8616600090815260016020526040812080546106f39061241a565b80601f016020809104026020016040519081016040528092919081815260200182805461071f9061241a565b801561076c5780601f106107415761010080835404028352916020019161076c565b820191906000526020600020905b81548152906001019060200180831161074f57829003601f168201915b50505050509050805186869050148015610787575060008151115b80156107af5750805160208201206040516107a59088908890612454565b6040518091039020145b61080a5760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b60648201526084016106cc565b6108808787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506114d992505050565b50505050505050565b610891611552565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b1580156108f757600080fd5b505af115801561090b573d6000803e3d6000fd5b5050505050565b61091a611552565b61ffff909116600090815260036020526040902055565b610939611552565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb137906024016108dd565b61ffff8316600090815260016020526040812080548291906109aa9061241a565b80601f01602080910402602001604051908101604052809291908181526020018280546109d69061241a565b8015610a235780601f106109f857610100808354040283529160200191610a23565b820191906000526020600020905b815481529060010190602001808311610a0657829003601f168201915b505050505090508383604051610a3a929190612454565b60405180910390208180519060200120149150505b9392505050565b610a5e611552565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d90610aae9086908690869060040161248d565b600060405180830381600087803b158015610ac857600080fd5b505af1158015610880573d6000803e3d6000fd5b333014610b3a5760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b60648201526084016106cc565b610bb08686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152899350915087908790819084018382808284376000920191909152506115ac92505050565b505050505050565b610bc0611552565b610bca60006116f8565b565b60016020526000908152604090208054610be59061241a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c119061241a565b8015610c5e5780601f10610c3357610100808354040283529160200191610c5e565b820191906000526020600020905b815481529060010190602001808311610c4157829003601f168201915b505050505081565b61ffff8116600090815260016020526040812080546060929190610c899061241a565b80601f0160208091040260200160405190810160405280929190818152602001828054610cb59061241a565b8015610d025780601f10610cd757610100808354040283529160200191610d02565b820191906000526020600020905b815481529060010190602001808311610ce557829003601f168201915b505050505090508051600003610d5a5760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f726400000060448201526064016106cc565b610a4f600060148351610d6d91906124c1565b839190611748565b610d7d611552565b818130604051602001610d92939291906124d8565b60408051601f1981840301815291815261ffff8516600090815260016020522090610dbd9082612544565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051610df19392919061248d565b60405180910390a1505050565b610e06611552565b600480546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b906020015b60405180910390a150565b610e63611552565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90610eb79088908890889088908890600401612603565b600060405180830381600087803b158015610ed157600080fd5b505af1158015610ee5573d6000803e3d6000fd5b505050505050505050565b61ffff86166000908152600560205260408082209051610f139088908890612454565b90815260408051602092819003830190206001600160401b03871660009081529252902054905080610f935760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b60648201526084016106cc565b808383604051610fa4929190612454565b6040518091039020146110035760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b60648201526084016106cc565b61ffff871660009081526005602052604080822090516110269089908990612454565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f880182900482028301820190528682526110be918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506115ac92505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e587878787856040516110f595949392919061263c565b60405180910390a150505050505050565b61110e611552565b600081116111565760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b60448201526064016106cc565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001610df1565b6111c0611552565b6006805460ff19168215159081179091556040519081527f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a490602001610e50565b611209611552565b61ffff83166000908152600160205260409020611227828483612677565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051610df19392919061248d565b611263611552565b6001600160a01b0381166112c85760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106cc565b6112d1816116f8565b50565b6112dc611552565b6001600160a01b038216600081815260076020908152604091829020805460ff191685151590811790915591519182527f1bc0fc0d4d10627d4504555c200a4f8c7c6470c31b305764e9f1372161078a8d910160405180910390a25050565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa1580156113bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113e39190810190612786565b95945050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633408e4706040518163ffffffff1660e01b8152600401602060405180830381865afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147091906127c2565b61ffff1690508461ffff1681036114c95760405162461bcd60e51b815260206004820152601d60248201527f4d61726b65747350726f78793a20636861696e206e6f742076616c696400000060448201526064016106cc565b61090b3386868633600088611855565b60008061153c5a60966366ad5c8a60e01b8989898960405160240161150194939291906127df565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190611981565b9150915081610bb057610bb08686868685611a0b565b6000546001600160a01b03163314610bca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016106cc565b600080828060200190518101906115c3919061281d565b6001600160a01b038216600090815260076020526040902054919450925060ff1690506116325760405162461bcd60e51b815260206004820152601e60248201527f4d61726b65747350726f78793a206d61726b6574206e6f742076616c6964000060448201526064016106cc565b60405163aa7d966560e01b81526001600160a01b0383169063aa7d966590611661908490600190600401612941565b6000604051808303816000875af1158015611680573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116a89190810190612a04565b5050816001600160a01b03168661ffff167fe56f9bcb2a90b3dc97f0814c287246469fc5c7050a6022ad21b2fe9058129c81856040516116e89190612122565b60405180910390a3505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60608161175681601f612ac8565b10156117955760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b60448201526064016106cc565b61179f8284612ac8565b845110156117e35760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b60448201526064016106cc565b606082158015611802576040519150600082526020820160405261184c565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561183b578051835260209283019201611823565b5050858452601f01601f1916604052505b50949350505050565b6040516bffffffffffffffffffffffff193060601b16602082015260009060340160408051601f19818403018152908290526118979188908890602001612ae0565b60408051601f1981840301815291905260065490915060ff16156118c8576118c3876001846000611aa8565b611923565b8151156119235760405162461bcd60e51b8152602060048201526024808201527f4c7a4170703a205f61646170746572506172616d73206d75737420626520656d604482015263383a3c9760e11b60648201526084016106cc565b611931878286868634611b87565b876001600160a01b03168761ffff167fd3b01b57b25c5a506ceef68a2e5ce63cf91fe09d5270a8bb49839a64d5b1b1f78360405161196f9190612122565b60405180910390a35050505050505050565b6000606060008060008661ffff166001600160401b038111156119a6576119a6611fa4565b6040519080825280601f01601f1916602001820160405280156119d0576020820181803683370190505b50905060008087516020890160008d8df191503d9250868311156119f2578692505b828152826000602083013e909890975095505050505050565b8180519060200120600560008761ffff1661ffff16815260200190815260200160002085604051611a3c9190612b1e565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90611a999087908790879087908790612b3a565b60405180910390a15050505050565b6000611ab383611d2c565b61ffff808716600090815260026020908152604080832093891683529290529081205491925090611ae5908490612ac8565b905060008111611b375760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f742073657400000000000060448201526064016106cc565b80821015610bb05760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f77000000000060448201526064016106cc565b61ffff861660009081526001602052604081208054611ba59061241a565b80601f0160208091040260200160405190810160405280929190818152602001828054611bd19061241a565b8015611c1e5780601f10611bf357610100808354040283529160200191611c1e565b820191906000526020600020905b815481529060010190602001808311611c0157829003601f168201915b505050505090508051600003611c8f5760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b60648201526084016106cc565b611c9a878751611d88565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c5803100908490611cf1908b9086908c908c908c908c90600401612b98565b6000604051808303818588803b158015611d0a57600080fd5b505af1158015611d1e573d6000803e3d6000fd5b505050505050505050505050565b6000602282511015611d805760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d730000000060448201526064016106cc565b506022015190565b61ffff821660009081526003602052604081205490819003611da957506127105b80821115611df95760405162461bcd60e51b815260206004820181905260248201527f4c7a4170703a207061796c6f61642073697a6520697320746f6f206c6172676560448201526064016106cc565b505050565b61ffff811681146112d157600080fd5b60008083601f840112611e2057600080fd5b5081356001600160401b03811115611e3757600080fd5b602083019150836020828501011115611e4f57600080fd5b9250929050565b80356001600160401b0381168114611e6d57600080fd5b919050565b60008060008060008060808789031215611e8b57600080fd5b8635611e9681611dfe565b955060208701356001600160401b0380821115611eb257600080fd5b611ebe8a838b01611e0e565b9097509550859150611ed260408a01611e56565b94506060890135915080821115611ee857600080fd5b50611ef589828a01611e0e565b979a9699509497509295939492505050565b600060208284031215611f1957600080fd5b8135610a4f81611dfe565b60008060408385031215611f3757600080fd5b8235611f4281611dfe565b946020939093013593505050565b600080600060408486031215611f6557600080fd5b8335611f7081611dfe565b925060208401356001600160401b03811115611f8b57600080fd5b611f9786828701611e0e565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611fe257611fe2611fa4565b604052919050565b60006001600160401b0382111561200357612003611fa4565b50601f01601f191660200190565b600082601f83011261202257600080fd5b813561203561203082611fea565b611fba565b81815284602083860101111561204a57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561207c57600080fd5b833561208781611dfe565b925060208401356001600160401b038111156120a257600080fd5b6120ae86828701612011565b9250506120bd60408501611e56565b90509250925092565b60005b838110156120e15781810151838201526020016120c9565b838111156120f0576000848401525b50505050565b6000815180845261210e8160208601602086016120c6565b601f01601f19169290920160200192915050565b602081526000610a4f60208301846120f6565b6000806040838503121561214857600080fd5b823561215381611dfe565b9150602083013561216381611dfe565b809150509250929050565b6001600160a01b03811681146112d157600080fd5b60006020828403121561219557600080fd5b8135610a4f8161216e565b6000806000806000608086880312156121b857600080fd5b85356121c381611dfe565b945060208601356121d381611dfe565b93506040860135925060608601356001600160401b038111156121f557600080fd5b61220188828901611e0e565b969995985093965092949392505050565b60008060006060848603121561222757600080fd5b833561223281611dfe565b9250602084013561224281611dfe565b929592945050506040919091013590565b80151581146112d157600080fd5b60006020828403121561227357600080fd5b8135610a4f81612253565b6000806040838503121561229157600080fd5b823561229c8161216e565b9150602083013561216381612253565b600080600080608085870312156122c257600080fd5b84356122cd81611dfe565b935060208501356122dd81611dfe565b925060408501356122ed8161216e565b9396929550929360600135925050565b60006001600160401b0382111561231657612316611fa4565b5060051b60200190565b6000806000806080858703121561233657600080fd5b843561234181611dfe565b93506020858101356123528161216e565b935060408601356001600160401b038082111561236e57600080fd5b818801915088601f83011261238257600080fd5b8135612390612030826122fd565b81815260059190911b8301840190848101908b8311156123af57600080fd5b8585015b838110156123e7578035858111156123cb5760008081fd5b6123d98e89838a0101612011565b8452509186019186016123b3565b5096505050606088013592508083111561240057600080fd5b505061240e87828801612011565b91505092959194509250565b600181811c9082168061242e57607f821691505b60208210810361244e57634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff841681526040602082015260006113e3604083018486612464565b634e487b7160e01b600052601160045260246000fd5b6000828210156124d3576124d36124ab565b500390565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b601f821115611df957600081815260208120601f850160051c810160208610156125255750805b601f850160051c820191505b81811015610bb057828155600101612531565b81516001600160401b0381111561255d5761255d611fa4565b6125718161256b845461241a565b846124fe565b602080601f8311600181146125a6576000841561258e5750858301515b600019600386901b1c1916600185901b178555610bb0565b600085815260208120601f198616915b828110156125d5578886015182559484019460019091019084016125b6565b50858210156125f35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061ffff808816835280871660208401525084604083015260806060830152612631608083018486612464565b979650505050505050565b61ffff8616815260806020820152600061265a608083018688612464565b6001600160401b0394909416604083015250606001529392505050565b6001600160401b0383111561268e5761268e611fa4565b6126a28361269c835461241a565b836124fe565b6000601f8411600181146126d657600085156126be5750838201355b600019600387901b1c1916600186901b17835561090b565b600083815260209020601f19861690835b8281101561270757868501358255602094850194600190920191016126e7565b50868210156127245760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600061274461203084611fea565b905082815283838301111561275857600080fd5b610a4f8360208301846120c6565b600082601f83011261277757600080fd5b610a4f83835160208501612736565b60006020828403121561279857600080fd5b81516001600160401b038111156127ae57600080fd5b6127ba84828501612766565b949350505050565b6000602082840312156127d457600080fd5b8151610a4f81611dfe565b61ffff851681526080602082015260006127fc60808301866120f6565b6001600160401b0385166040840152828103606084015261263181856120f6565b60008060006060848603121561283257600080fd5b835192506020808501516128458161216e565b60408601519093506001600160401b038082111561286257600080fd5b818701915087601f83011261287657600080fd5b8151612884612030826122fd565b81815260059190911b8301840190848101908a8311156128a357600080fd5b8585015b838110156128db578051858111156128bf5760008081fd5b6128cd8d89838a0101612766565b8452509186019186016128a7565b508096505050505050509250925092565b600081518084526020808501808196508360051b8101915082860160005b858110156129345782840389526129228483516120f6565b9885019893509084019060010161290a565b5091979650505050505050565b60408152600061295460408301856128ec565b905082151560208301529392505050565b600082601f83011261297657600080fd5b81516020612986612030836122fd565b82815260059290921b840181019181810190868411156129a557600080fd5b8286015b848110156129f95780516001600160401b038111156129c85760008081fd5b8701603f810189136129da5760008081fd5b6129eb898683015160408401612736565b8452509183019183016129a9565b509695505050505050565b60008060408385031215612a1757600080fd5b82516001600160401b0380821115612a2e57600080fd5b818501915085601f830112612a4257600080fd5b81516020612a52612030836122fd565b82815260059290921b84018101918181019089841115612a7157600080fd5b948201945b83861015612a98578551612a8981612253565b82529482019490820190612a76565b91880151919650909350505080821115612ab157600080fd5b50612abe85828601612965565b9150509250929050565b60008219821115612adb57612adb6124ab565b500190565b606081526000612af360608301866120f6565b6001600160a01b03851660208401528281036040840152612b1481856128ec565b9695505050505050565b60008251612b308184602087016120c6565b9190910192915050565b61ffff8616815260a060208201526000612b5760a08301876120f6565b6001600160401b03861660408401528281036060840152612b7881866120f6565b90508281036080840152612b8c81856120f6565b98975050505050505050565b61ffff8716815260c060208201526000612bb560c08301886120f6565b8281036040840152612bc781886120f6565b6001600160a01b0387811660608601528616608085015283810360a08501529050612bf281856120f6565b999850505050505050505056fea26469706673582212207dc20a4112383f07fa85580e80012933e5c2ac5138c7b80203e8aacce43d5d3264736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_lzEndpoint": "LayerZero endpoint address",
          "_owner": "contract's owner address"
        }
      },
      "executeOnChain(uint16,address,bytes[],bytes)": {
        "params": {
          "_adapterParams": "custom adapters",
          "_dstChainId": "te LayerZero destination chain id",
          "_marketCalls": "Market calls",
          "_marketDstAddress": "destination Market address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setUseCustomAdapterParams(bool)": {
        "params": {
          "_useCustomAdapterParams": "true/false"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMarketStatus(address,bool)": {
        "details": "callable by owner",
        "params": {
          "_market": "the market address",
          "_status": "whitelisted/not"
        }
      }
    },
    "title": "Omnichain proxy for Singularity",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "creates a new SGLProxy contract"
      },
      "executeOnChain(uint16,address,bytes[],bytes)": {
        "notice": "execute Singularity methods on another chain"
      },
      "setUseCustomAdapterParams(bool)": {
        "notice": "set custom adapter usage status"
      },
      "updateMarketStatus(address,bool)": {
        "notice": "set whitelist status for market"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 583,
        "contract": "contracts/MarketsProxy.sol:MarketsProxy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1482,
        "contract": "contracts/MarketsProxy.sol:MarketsProxy",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 1488,
        "contract": "contracts/MarketsProxy.sol:MarketsProxy",
        "label": "minDstGasLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 1492,
        "contract": "contracts/MarketsProxy.sol:MarketsProxy",
        "label": "payloadSizeLimitLookup",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint16,t_uint256)"
      },
      {
        "astId": 1494,
        "contract": "contracts/MarketsProxy.sol:MarketsProxy",
        "label": "precrime",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2031,
        "contract": "contracts/MarketsProxy.sol:MarketsProxy",
        "label": "failedMessages",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 720,
        "contract": "contracts/MarketsProxy.sol:MarketsProxy",
        "label": "useCustomAdapterParams",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 724,
        "contract": "contracts/MarketsProxy.sol:MarketsProxy",
        "label": "markets",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}