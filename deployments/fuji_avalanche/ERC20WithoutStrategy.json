{
  "address": "0xC4007F1A61A76A241d01f141112d805eBF07E640",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IYieldBox",
          "name": "_yieldBox",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "cheapWithdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposited",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenType",
      "outputs": [
        {
          "internalType": "enum TokenType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldBox",
      "outputs": [
        {
          "internalType": "contract IYieldBox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x821f877583f094bc6deca4e8d33d2273ebfafbf8f32cc2493175fed528d603c4",
  "receipt": {
    "to": null,
    "from": "0x40282d3Cf4890D9806BC1853e97a59C93D813653",
    "contractAddress": "0xC4007F1A61A76A241d01f141112d805eBF07E640",
    "transactionIndex": 0,
    "gasUsed": "423991",
    "logsBloom": "0x
    "blockHash": "0xbee508867cf1ec33d74b335f35ed60bf61dca2d7620e827f7a554b14160bc519",
    "transactionHash": "0x821f877583f094bc6deca4e8d33d2273ebfafbf8f32cc2493175fed528d603c4",
    "logs": [],
    "blockNumber": 18815059,
    "cumulativeGasUsed": "423991",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x538c2189ea266069031622e70441bc73A613e9Ed",
    "0xc6B03Ba05Fb5E693D8b3533aa676FB4AFDd7DDc7"
  ],
  "numDeployments": 4,
  "solcInputHash": "45bcf35b4fb3bca7169fc66314197a4a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IYieldBox\",\"name\":\"_yieldBox\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"cheapWithdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenType\",\"outputs\":[{\"internalType\":\"enum TokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldBox\",\"outputs\":[{\"internalType\":\"contract IYieldBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cheapWithdrawable()\":{\"notice\":\"Returns the maximum amount that can be withdrawn for a low gas fee When more than this amount is withdrawn it will trigger divesting from the actual strategy which will incur higher gas costs\"},\"contractAddress()\":{\"notice\":\"Returns the contract address that this strategy works with\"},\"currentBalance()\":{\"notice\":\"Returns the total value the strategy holds (principle + gain) expressed in asset token amount. This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more. The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called.\"},\"deposited(uint256)\":{\"notice\":\"Is called by YieldBox to signal funds have been added, the strategy may choose to act on this When a large enough deposit is made, this should trigger the strategy to invest into the actual strategy. This function should normally NOT be used to invest on each call as that would be costly for small deposits. If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be up to the strategy to wrap it if needed. Only accept this call from the YieldBox\"},\"description()\":{\"notice\":\"Returns a description for this strategy\"},\"name()\":{\"notice\":\"Returns a name for this strategy\"},\"tokenId()\":{\"notice\":\"Returns the tokenId that this strategy works with (for EIP1155) This is always 0 for EIP20 tokens\"},\"tokenType()\":{\"notice\":\"Returns the standard that this strategy works with\"},\"withdraw(address,uint256)\":{\"notice\":\"Is called by the YieldBox to ask the strategy to withdraw to the user When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount, the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve. If the strategy handles native tokens (ETH) it should send this, not a wrapped version. With some strategies it might be hard to withdraw exactly the correct amount. Only accept this call from the YieldBox\"},\"withdrawable()\":{\"notice\":\"Returns the maximum amount that can be withdrawn\"},\"yieldBox()\":{\"notice\":\"Returns the address of the yieldBox that this strategy is for\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"yieldbox/contracts/strategies/ERC20WithoutStrategy.sol\":\"ERC20WithoutStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\\n    // By removing them you can't accidentally use them.\\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IStrictERC20 {\\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3ab46c194bf6ebcb4ae1b094c7e41061ef651ee1150d1a07beaf9db085dee0ee\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\\n    bytes4 private constant SIG_TOTALSUPPLY = 0x18160ddd; // balanceOf(address)\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to The address of the user to check.\\n    /// @return amount The token amount.\\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\\n        require(success && data.length >= 32, \\\"BoringERC20: BalanceOf failed\\\");\\n        amount = abi.decode(data, (uint256));\\n    }\\n\\n    /// @notice Provides a gas-optimized totalSupply to avoid a redundant extcodesize check in addition to the returndatasize check.\\n    /// @param token The address of the ERC-20 token.\\n    /// @return totalSupply The token totalSupply.\\n    function safeTotalSupply(IERC20 token) internal view returns (uint256 totalSupply) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_TOTALSUPPLY));\\n        require(success && data.length >= 32, \\\"BoringERC20: totalSupply failed\\\");\\n        totalSupply = abi.decode(data, (uint256));\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdd38cb2bcfe5facaf9e0d8bbba61454e7eb5dc705366668ffce73a72f57abcad\",\"license\":\"MIT\"},\"yieldbox/contracts/BoringMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\n\\nlibrary BoringMath {\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= type(uint128).max, \\\"BoringMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n\\n    function to64(uint256 a) internal pure returns (uint64 c) {\\n        require(a <= type(uint64).max, \\\"BoringMath: uint64 Overflow\\\");\\n        c = uint64(a);\\n    }\\n\\n    function to32(uint256 a) internal pure returns (uint32 c) {\\n        require(a <= type(uint32).max, \\\"BoringMath: uint32 Overflow\\\");\\n        c = uint32(a);\\n    }\\n\\n    function muldiv(\\n        uint256 value,\\n        uint256 mul,\\n        uint256 div,\\n        bool roundUp\\n    ) internal pure returns (uint256 result) {\\n        result = (value * mul) / div;\\n        if (roundUp && (result * div) / mul < value) {\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x031bf5afc00d8ac3bfa74055ea7039fdf9159591cdbeaca2df6bc933755b4ac2\",\"license\":\"MIT\"},\"yieldbox/contracts/enums/YieldBoxTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/// @title TokenType\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC721,\\n    ERC1155,\\n    None\\n}\\n\",\"keccak256\":\"0xc6adb740ff68d4162214dfa9d406422a066ae2197b7f0c8df5daa7c84b4a10aa\",\"license\":\"MIT\"},\"yieldbox/contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\nimport \\\"./IYieldBox.sol\\\";\\n\\ninterface IStrategy {\\n    /// Each strategy only works with a single asset. This should help make implementations simpler and more readable.\\n    /// To safe gas a proxy pattern (YieldBox factory) could be used to deploy the same strategy for multiple tokens.\\n\\n    /// It is recommended that strategies keep a small amount of funds uninvested (like 5%) to handle small withdrawals\\n    /// and deposits without triggering costly investing/divesting logic.\\n\\n    /// #########################\\n    /// ### Basic Information ###\\n    /// #########################\\n\\n    /// Returns the address of the yieldBox that this strategy is for\\n    function yieldBox() external view returns (IYieldBox yieldBox_);\\n\\n    /// Returns a name for this strategy\\n    function name() external view returns (string memory name_);\\n\\n    /// Returns a description for this strategy\\n    function description() external view returns (string memory description_);\\n\\n    /// #######################\\n    /// ### Supported Token ###\\n    /// #######################\\n\\n    /// Returns the standard that this strategy works with\\n    function tokenType() external view returns (TokenType tokenType_);\\n\\n    /// Returns the contract address that this strategy works with\\n    function contractAddress() external view returns (address contractAddress_);\\n\\n    /// Returns the tokenId that this strategy works with (for EIP1155)\\n    /// This is always 0 for EIP20 tokens\\n    function tokenId() external view returns (uint256 tokenId_);\\n\\n    /// ###########################\\n    /// ### Balance Information ###\\n    /// ###########################\\n\\n    /// Returns the total value the strategy holds (principle + gain) expressed in asset token amount.\\n    /// This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more.\\n    /// The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox\\n    /// that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called.\\n    function currentBalance() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn\\n    function withdrawable() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn for a low gas fee\\n    /// When more than this amount is withdrawn it will trigger divesting from the actual strategy\\n    /// which will incur higher gas costs\\n    function cheapWithdrawable() external view returns (uint256 amount);\\n\\n    /// ##########################\\n    /// ### YieldBox Functions ###\\n    /// ##########################\\n\\n    /// Is called by YieldBox to signal funds have been added, the strategy may choose to act on this\\n    /// When a large enough deposit is made, this should trigger the strategy to invest into the actual\\n    /// strategy. This function should normally NOT be used to invest on each call as that would be costly\\n    /// for small deposits.\\n    /// If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be\\n    /// up to the strategy to wrap it if needed.\\n    /// Only accept this call from the YieldBox\\n    function deposited(uint256 amount) external;\\n\\n    /// Is called by the YieldBox to ask the strategy to withdraw to the user\\n    /// When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount,\\n    /// the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve.\\n    /// If the strategy handles native tokens (ETH) it should send this, not a wrapped version.\\n    /// With some strategies it might be hard to withdraw exactly the correct amount.\\n    /// Only accept this call from the YieldBox\\n    function withdraw(address to, uint256 amount) external;\\n}\\n\\nIStrategy constant NO_STRATEGY = IStrategy(address(0));\\n\",\"keccak256\":\"0xfb1ac346da7d2e866af267af14b76b0813cf2853bea1ab0674a7c202a9536734\",\"license\":\"MIT\"},\"yieldbox/contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            address strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\n\\n    function depositAsset(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function withdraw(\\n        uint256 assetId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 share\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function transfer(\\n        address from,\\n        address to,\\n        uint256 assetId,\\n        uint256 share\\n    ) external;\\n\\n    function batchTransfer(\\n        address from,\\n        address to,\\n        uint256[] calldata assetIds_,\\n        uint256[] calldata shares_\\n    ) external;\\n\\n    function transferMultiple(\\n        address from,\\n        address[] calldata tos,\\n        uint256 assetId,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    function toShare(\\n        uint256 assetId,\\n        uint256 amount,\\n        bool roundUp\\n    ) external view returns (uint256 share);\\n\\n    function toAmount(\\n        uint256 assetId,\\n        uint256 share,\\n        bool roundUp\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x04c6451aab417a3a3eb1e9e0a2e86fc4d62f4d332712cbdea11979e5e516b52f\",\"license\":\"MIT\"},\"yieldbox/contracts/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\n\\n// solhint-disable const-name-snakecase\\n// solhint-disable no-empty-blocks\\n\\nabstract contract BaseStrategy is IStrategy {\\n    IYieldBox public immutable yieldBox;\\n\\n    constructor(IYieldBox _yieldBox) {\\n        yieldBox = _yieldBox;\\n    }\\n\\n    function _currentBalance() internal view virtual returns (uint256 amount);\\n\\n    function currentBalance() public view virtual returns (uint256 amount) {\\n        return _currentBalance();\\n    }\\n\\n    function withdrawable() external view virtual returns (uint256 amount) {\\n        return _currentBalance();\\n    }\\n\\n    function cheapWithdrawable() external view virtual returns (uint256 amount) {\\n        return _currentBalance();\\n    }\\n\\n    function _deposited(uint256 amount) internal virtual;\\n\\n    function deposited(uint256 amount) external {\\n        require(msg.sender == address(yieldBox), \\\"Not YieldBox\\\");\\n        _deposited(amount);\\n    }\\n\\n    function _withdraw(address to, uint256 amount) internal virtual;\\n\\n    function withdraw(address to, uint256 amount) external {\\n        require(msg.sender == address(yieldBox), \\\"Not YieldBox\\\");\\n        _withdraw(to, amount);\\n    }\\n}\\n\\nabstract contract BaseERC20Strategy is BaseStrategy {\\n    TokenType public constant tokenType = TokenType.ERC20;\\n    uint256 public constant tokenId = 0;\\n    address public immutable contractAddress;\\n\\n    constructor(IYieldBox _yieldBox, address _contractAddress) BaseStrategy(_yieldBox) {\\n        contractAddress = _contractAddress;\\n    }\\n}\\n\\nabstract contract BaseERC1155Strategy is BaseStrategy {\\n    TokenType public constant tokenType = TokenType.ERC1155;\\n    uint256 public immutable tokenId;\\n    address public immutable contractAddress;\\n\\n    constructor(\\n        IYieldBox _yieldBox,\\n        address _contractAddress,\\n        uint256 _tokenId\\n    ) BaseStrategy(_yieldBox) {\\n        contractAddress = _contractAddress;\\n        tokenId = _tokenId;\\n    }\\n}\\n\",\"keccak256\":\"0x0d8b9a075b5c351f790d7b312e2abc7229661c7aff12c920dd8efc175e9359d0\",\"license\":\"MIT\"},\"yieldbox/contracts/strategies/ERC20WithoutStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.9;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\\\";\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\nimport \\\"../BoringMath.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\n\\n// solhint-disable const-name-snakecase\\n// solhint-disable no-empty-blocks\\n\\ncontract ERC20WithoutStrategy is BaseERC20Strategy {\\n    using BoringERC20 for IERC20;\\n\\n    constructor(IYieldBox _yieldBox, IERC20 token) BaseERC20Strategy(_yieldBox, address(token)) {}\\n\\n    string public constant override name = \\\"No strategy\\\";\\n    string public constant override description = \\\"No strategy\\\";\\n\\n    function _currentBalance() internal view override returns (uint256 amount) {\\n        return IERC20(contractAddress).safeBalanceOf(address(this));\\n    }\\n\\n    function _deposited(uint256 amount) internal override {}\\n\\n    function _withdraw(address to, uint256 amount) internal override {\\n        IERC20(contractAddress).safeTransfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xd352cc080f358c6b80138b6d07b9356869e571763cf54c22edad8cf4c2262eb1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161078638038061078683398101604081905261002f9161005e565b6001600160a01b039182166080521660a052610098565b6001600160a01b038116811461005b57600080fd5b50565b6000806040838503121561007157600080fd5b825161007c81610046565b602084015190925061008d81610046565b809150509250929050565b60805160a0516106ad6100d96000396000818161018d015281816102b101526102e401526000818161013b015281816101c9015261023801526106ad6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c8063afa91cc611610071578063afa91cc614610121578063ce845d1d14610119578063de40657714610136578063e3575f0514610119578063f3fef3a314610175578063f6b4dfb41461018857600080fd5b806306fdde03146100ae57806317d70f7c146100ee57806330fa738c1461010457806350188301146101195780637284e416146100ae575b600080fd5b6100d86040518060400160405280600b81526020016a4e6f20737472617465677960a81b81525081565b6040516100e5919061056d565b60405180910390f35b6100f6600081565b6040519081526020016100e5565b61010c600181565b6040516100e591906105a0565b6100f66101af565b61013461012f3660046105c8565b6101be565b005b61015d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100e5565b6101346101833660046105e1565b61022d565b61015d7f000000000000000000000000000000000000000000000000000000000000000081565b60006101b96102a2565b905090565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461022a5760405162461bcd60e51b815260206004820152600c60248201526b09cdee840b2d2cad8c884def60a31b60448201526064015b60405180910390fd5b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102945760405162461bcd60e51b815260206004820152600c60248201526b09cdee840b2d2cad8c884def60a31b6044820152606401610221565b61029e82826102d7565b5050565b60006101b96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163061030b565b61029e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610422565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009283928392918716916103659190610619565b600060405180830381855afa9150503d80600081146103a0576040519150601f19603f3d011682016040523d82523d6000602084013e6103a5565b606091505b50915091508180156103b957506020815110155b6104055760405162461bcd60e51b815260206004820152601d60248201527f426f72696e6745524332303a2042616c616e63654f66206661696c65640000006044820152606401610221565b808060200190518101906104199190610635565b95945050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161047e9190610619565b6000604051808303816000865af19150503d80600081146104bb576040519150601f19603f3d011682016040523d82523d6000602084013e6104c0565b606091505b50915091508180156104ea5750805115806104ea5750808060200190518101906104ea919061064e565b6105365760405162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152606401610221565b5050505050565b60005b83811015610558578181015183820152602001610540565b83811115610567576000848401525b50505050565b602081526000825180602084015261058c81604085016020870161053d565b601f01601f19169190910160400192915050565b60208101600583106105c257634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156105da57600080fd5b5035919050565b600080604083850312156105f457600080fd5b82356001600160a01b038116811461060b57600080fd5b946020939093013593505050565b6000825161062b81846020870161053d565b9190910192915050565b60006020828403121561064757600080fd5b5051919050565b60006020828403121561066057600080fd5b8151801515811461067057600080fd5b939250505056fea2646970667358221220c4cc4b4d8db1663546a10fde32886bced7172ccded619adffa1c908e6b8c534a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c8063afa91cc611610071578063afa91cc614610121578063ce845d1d14610119578063de40657714610136578063e3575f0514610119578063f3fef3a314610175578063f6b4dfb41461018857600080fd5b806306fdde03146100ae57806317d70f7c146100ee57806330fa738c1461010457806350188301146101195780637284e416146100ae575b600080fd5b6100d86040518060400160405280600b81526020016a4e6f20737472617465677960a81b81525081565b6040516100e5919061056d565b60405180910390f35b6100f6600081565b6040519081526020016100e5565b61010c600181565b6040516100e591906105a0565b6100f66101af565b61013461012f3660046105c8565b6101be565b005b61015d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100e5565b6101346101833660046105e1565b61022d565b61015d7f000000000000000000000000000000000000000000000000000000000000000081565b60006101b96102a2565b905090565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461022a5760405162461bcd60e51b815260206004820152600c60248201526b09cdee840b2d2cad8c884def60a31b60448201526064015b60405180910390fd5b50565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102945760405162461bcd60e51b815260206004820152600c60248201526b09cdee840b2d2cad8c884def60a31b6044820152606401610221565b61029e82826102d7565b5050565b60006101b96001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163061030b565b61029e6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168383610422565b604080516001600160a01b0383811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b179052915160009283928392918716916103659190610619565b600060405180830381855afa9150503d80600081146103a0576040519150601f19603f3d011682016040523d82523d6000602084013e6103a5565b606091505b50915091508180156103b957506020815110155b6104055760405162461bcd60e51b815260206004820152601d60248201527f426f72696e6745524332303a2042616c616e63654f66206661696c65640000006044820152606401610221565b808060200190518101906104199190610635565b95945050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161047e9190610619565b6000604051808303816000865af19150503d80600081146104bb576040519150601f19603f3d011682016040523d82523d6000602084013e6104c0565b606091505b50915091508180156104ea5750805115806104ea5750808060200190518101906104ea919061064e565b6105365760405162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c6564000000006044820152606401610221565b5050505050565b60005b83811015610558578181015183820152602001610540565b83811115610567576000848401525b50505050565b602081526000825180602084015261058c81604085016020870161053d565b601f01601f19169190910160400192915050565b60208101600583106105c257634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156105da57600080fd5b5035919050565b600080604083850312156105f457600080fd5b82356001600160a01b038116811461060b57600080fd5b946020939093013593505050565b6000825161062b81846020870161053d565b9190910192915050565b60006020828403121561064757600080fd5b5051919050565b60006020828403121561066057600080fd5b8151801515811461067057600080fd5b939250505056fea2646970667358221220c4cc4b4d8db1663546a10fde32886bced7172ccded619adffa1c908e6b8c534a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cheapWithdrawable()": {
        "notice": "Returns the maximum amount that can be withdrawn for a low gas fee When more than this amount is withdrawn it will trigger divesting from the actual strategy which will incur higher gas costs"
      },
      "contractAddress()": {
        "notice": "Returns the contract address that this strategy works with"
      },
      "currentBalance()": {
        "notice": "Returns the total value the strategy holds (principle + gain) expressed in asset token amount. This should be cheap in gas to retrieve. Can return a bit less than the actual, but MUST NOT return more. The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called."
      },
      "deposited(uint256)": {
        "notice": "Is called by YieldBox to signal funds have been added, the strategy may choose to act on this When a large enough deposit is made, this should trigger the strategy to invest into the actual strategy. This function should normally NOT be used to invest on each call as that would be costly for small deposits. If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be up to the strategy to wrap it if needed. Only accept this call from the YieldBox"
      },
      "description()": {
        "notice": "Returns a description for this strategy"
      },
      "name()": {
        "notice": "Returns a name for this strategy"
      },
      "tokenId()": {
        "notice": "Returns the tokenId that this strategy works with (for EIP1155) This is always 0 for EIP20 tokens"
      },
      "tokenType()": {
        "notice": "Returns the standard that this strategy works with"
      },
      "withdraw(address,uint256)": {
        "notice": "Is called by the YieldBox to ask the strategy to withdraw to the user When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount, the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve. If the strategy handles native tokens (ETH) it should send this, not a wrapped version. With some strategies it might be hard to withdraw exactly the correct amount. Only accept this call from the YieldBox"
      },
      "withdrawable()": {
        "notice": "Returns the maximum amount that can be withdrawn"
      },
      "yieldBox()": {
        "notice": "Returns the address of the yieldBox that this strategy is for"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}