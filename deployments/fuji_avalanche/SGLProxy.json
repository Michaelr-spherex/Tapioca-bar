{
  "address": "0x68EcA2cd0d7557e61eaf6B6831B892B842e38D65",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_old",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_new",
          "type": "bool"
        }
      ],
      "name": "LogEnforce",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "singularity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "LogSingularityStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_reason",
          "type": "bytes"
        }
      ],
      "name": "MessageFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_dstSingularity",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_sglPayload",
          "type": "bytes"
        }
      ],
      "name": "ReceiveFromChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_payloadHash",
          "type": "bytes32"
        }
      ],
      "name": "RetryMessageSuccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_srcAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_sglPayload",
          "type": "bytes"
        }
      ],
      "name": "SendToChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_type",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_minDstGas",
          "type": "uint256"
        }
      ],
      "name": "SetMinDstGas",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "precrime",
          "type": "address"
        }
      ],
      "name": "SetPrecrime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemoteAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_useCustomAdapterParams",
          "type": "bool"
        }
      ],
      "name": "SetUseCustomAdapterParams",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FUNCTION_TYPE_SEND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NO_EXTRA_GAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enforceSameAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_mixologistDstAddress",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "_sglCalls",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "executeOnChain",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "failedMessages",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "forceResumeReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        }
      ],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        }
      ],
      "name": "getTrustedRemoteAddress",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "isTrustedRemote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lzEndpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "minDstGasLookup",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "nonblockingLzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "precrime",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "retryMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_configType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_config",
          "type": "bytes"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_val",
          "type": "bool"
        }
      ],
      "name": "setEnforceSameAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_packetType",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_minGas",
          "type": "uint256"
        }
      ],
      "name": "setMinDstGas",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_precrime",
          "type": "address"
        }
      ],
      "name": "setPrecrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setReceiveVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_version",
          "type": "uint16"
        }
      ],
      "name": "setSendVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_path",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_remoteChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_remoteAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemoteAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_useCustomAdapterParams",
          "type": "bool"
        }
      ],
      "name": "setUseCustomAdapterParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "singularities",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mixologist",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateSingularityStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useCustomAdapterParams",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x258785b6bcec7542de3d0eebe47e0063a49e59bcbf4106e5f40ff491ea14c790",
  "receipt": {
    "to": null,
    "from": "0x40282d3Cf4890D9806BC1853e97a59C93D813653",
    "contractAddress": "0x68EcA2cd0d7557e61eaf6B6831B892B842e38D65",
    "transactionIndex": 2,
    "gasUsed": "2553292",
    "logsBloom": "0x
    "blockHash": "0xb63a625685bd755116358dfd9486060092607636f6a7bb33c59d427aca18c301",
    "transactionHash": "0x258785b6bcec7542de3d0eebe47e0063a49e59bcbf4106e5f40ff491ea14c790",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 18090276,
        "transactionHash": "0x258785b6bcec7542de3d0eebe47e0063a49e59bcbf4106e5f40ff491ea14c790",
        "address": "0x68EcA2cd0d7557e61eaf6B6831B892B842e38D65",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000040282d3cf4890d9806bc1853e97a59c93d813653"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb63a625685bd755116358dfd9486060092607636f6a7bb33c59d427aca18c301"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 18090276,
        "transactionHash": "0x258785b6bcec7542de3d0eebe47e0063a49e59bcbf4106e5f40ff491ea14c790",
        "address": "0x68EcA2cd0d7557e61eaf6B6831B892B842e38D65",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000040282d3cf4890d9806bc1853e97a59c93d813653",
          "0x00000000000000000000000040282d3cf4890d9806bc1853e97a59c93d813653"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xb63a625685bd755116358dfd9486060092607636f6a7bb33c59d427aca18c301"
      }
    ],
    "blockNumber": 18090276,
    "cumulativeGasUsed": "2633827",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x93f54D755A063cE7bB9e6Ac47Eccc8e33411d706",
    "0x40282d3Cf4890D9806BC1853e97a59C93D813653"
  ],
  "numDeployments": 1,
  "solcInputHash": "f1584bf828118577c55a8972c79a09f8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_old\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_new\",\"type\":\"bool\"}],\"name\":\"LogEnforce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"singularity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"LogSingularityStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_dstSingularity\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_sglPayload\",\"type\":\"bytes\"}],\"name\":\"ReceiveFromChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_payloadHash\",\"type\":\"bytes32\"}],\"name\":\"RetryMessageSuccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_srcAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_sglPayload\",\"type\":\"bytes\"}],\"name\":\"SendToChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_type\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_minDstGas\",\"type\":\"uint256\"}],\"name\":\"SetMinDstGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"precrime\",\"type\":\"address\"}],\"name\":\"SetPrecrime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemoteAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_useCustomAdapterParams\",\"type\":\"bool\"}],\"name\":\"SetUseCustomAdapterParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FUNCTION_TYPE_SEND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_EXTRA_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enforceSameAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_mixologistDstAddress\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"_sglCalls\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"executeOnChain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"failedMessages\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"forceResumeReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"}],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"}],\"name\":\"getTrustedRemoteAddress\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"isTrustedRemote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lzEndpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"minDstGasLookup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonblockingLzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"precrime\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"retryMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_configType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_config\",\"type\":\"bytes\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_val\",\"type\":\"bool\"}],\"name\":\"setEnforceSameAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_packetType\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_minGas\",\"type\":\"uint256\"}],\"name\":\"setMinDstGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_precrime\",\"type\":\"address\"}],\"name\":\"setPrecrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setReceiveVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_version\",\"type\":\"uint16\"}],\"name\":\"setSendVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_path\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_remoteChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_remoteAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemoteAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useCustomAdapterParams\",\"type\":\"bool\"}],\"name\":\"setUseCustomAdapterParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"singularities\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mixologist\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateSingularityStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useCustomAdapterParams\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_lzEndpoint\":\"LayerZero endpoint address\",\"_owner\":\"contract's owner address\"}},\"executeOnChain(uint16,bytes,bytes[],bytes)\":{\"params\":{\"_adapterParams\":\"custom adapters\",\"_dstChainId\":\"te LayerZero destination chain id\",\"_mixologistDstAddress\":\"destination Singularity address\",\"_sglCalls\":\"Singularity calls\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setEnforceSameAddress(bool)\":{\"params\":{\"_val\":\"true/false\"}},\"setUseCustomAdapterParams(bool)\":{\"params\":{\"_useCustomAdapterParams\":\"true/false\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateSingularityStatus(address,bool)\":{\"details\":\"callable by owner\",\"params\":{\"_mixologist\":\"the Singularity address\",\"_status\":\"whitelisted/not\"}}},\"title\":\"Omnichain proxy for Singularity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"creates a new SGLProxy contract\"},\"executeOnChain(uint16,bytes,bytes[],bytes)\":{\"notice\":\"execute Singularity methods on another chain\"},\"setEnforceSameAddress(bool)\":{\"notice\":\"enforces CREATE2 proxies\"},\"setUseCustomAdapterParams(bool)\":{\"notice\":\"set custom adapter usage status\"},\"updateSingularityStatus(address,bool)\":{\"notice\":\"set whitelist status for Singularity\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/singularity/SGLProxy.sol\":\"SGLProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\\n    // By removing them you can't accidentally use them.\\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IStrictERC20 {\\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3ab46c194bf6ebcb4ae1b094c7e41061ef651ee1150d1a07beaf9db085dee0ee\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\\n    bytes4 private constant SIG_TOTALSUPPLY = 0x18160ddd; // balanceOf(address)\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to The address of the user to check.\\n    /// @return amount The token amount.\\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\\n        require(success && data.length >= 32, \\\"BoringERC20: BalanceOf failed\\\");\\n        amount = abi.decode(data, (uint256));\\n    }\\n\\n    /// @notice Provides a gas-optimized totalSupply to avoid a redundant extcodesize check in addition to the returndatasize check.\\n    /// @param token The address of the ERC-20 token.\\n    /// @return totalSupply The token totalSupply.\\n    function safeTotalSupply(IERC20 token) internal view returns (uint256 totalSupply) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_TOTALSUPPLY));\\n        require(success && data.length >= 32, \\\"BoringERC20: totalSupply failed\\\");\\n        totalSupply = abi.decode(data, (uint256));\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdd38cb2bcfe5facaf9e0d8bbba61454e7eb5dc705366668ffce73a72f57abcad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/interfaces/IFee.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './IPenrose.sol';\\r\\nimport '../swappers/ISwapper.sol';\\r\\n\\r\\ninterface IFee {\\r\\n    function depositFeesToYieldBox(ISwapper, IPenrose.SwapData calldata)\\r\\n        external;\\r\\n}\\r\\n\",\"keccak256\":\"0xea940a7d79fc1c4e9858fbd577b005a7acdd9b708e3a1c13e4a869de38c60689\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './IOracle.sol';\\r\\n\\r\\ninterface IMarket {\\r\\n    function asset() external view returns (address);\\r\\n\\r\\n    function assetId() external view returns (uint256);\\r\\n\\r\\n    function collateral() external view returns (address);\\r\\n\\r\\n    function collateralId() external view returns (uint256);\\r\\n\\r\\n    function totalCollateralShare() external view returns (uint256);\\r\\n\\r\\n    function userBorrowPart(address) external view returns (uint256);\\r\\n\\r\\n    function userCollateralShare(address) external view returns (uint256);\\r\\n\\r\\n    function totalBorrow()\\r\\n        external\\r\\n        view\\r\\n        returns (uint128 elastic, uint128 base);\\r\\n\\r\\n    function oracle() external view returns (IOracle);\\r\\n\\r\\n    function oracleData() external view returns (bytes memory);\\r\\n\\r\\n    function exchangeRate() external view returns (uint256);\\r\\n\\r\\n    function yieldBox() external view returns (address payable);\\r\\n\\r\\n    function liquidationMultiplier() external view returns (uint256);\\r\\n\\r\\n    function addCollateral(\\r\\n        address from,\\r\\n        address to,\\r\\n        bool skim,\\r\\n        uint256 share\\r\\n    ) external;\\r\\n\\r\\n    function removeCollateral(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 share\\r\\n    ) external;\\r\\n\\r\\n    function repay(\\r\\n        address from,\\r\\n        address to,\\r\\n        bool skim,\\r\\n        uint256 part\\r\\n    ) external returns (uint256 amount);\\r\\n\\r\\n    function withdrawTo(\\r\\n        uint16 dstChainId,\\r\\n        bytes memory receiver,\\r\\n        uint256 amount,\\r\\n        bytes calldata adapterParams,\\r\\n        address payable refundAddress\\r\\n    ) external payable;\\r\\n\\r\\n    function borrow(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (uint256 part, uint256 share);\\r\\n}\\r\\n\",\"keccak256\":\"0x5771fcefd707a286e4db9e9290451d87ab1f0c64978db968e4bdf2fba97c9fb9\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IOracle {\\r\\n    /// @notice Get the latest exchange rate.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return success if no valid (recent) rate is available, return false else true.\\r\\n    /// @return rate The rate of the requested asset / pair / pool.\\r\\n    function get(bytes calldata data)\\r\\n        external\\r\\n        returns (bool success, uint256 rate);\\r\\n\\r\\n    /// @notice Check the last exchange rate without any state changes.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return success if no valid (recent) rate is available, return false else true.\\r\\n    /// @return rate The rate of the requested asset / pair / pool.\\r\\n    function peek(bytes calldata data)\\r\\n        external\\r\\n        view\\r\\n        returns (bool success, uint256 rate);\\r\\n\\r\\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return rate The rate of the requested asset / pair / pool.\\r\\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\\r\\n\\r\\n    /// @notice Returns a human readable (short) name about this oracle.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return (string) A human readable symbol name about this oracle.\\r\\n    function symbol(bytes calldata data) external view returns (string memory);\\r\\n\\r\\n    /// @notice Returns a human readable name about this oracle.\\r\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\r\\n    /// For example:\\r\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\r\\n    /// @return (string) A human readable name about this oracle.\\r\\n    function name(bytes calldata data) external view returns (string memory);\\r\\n}\\r\\n\",\"keccak256\":\"0xf2fa35d3a39c5e99a46fc5ffe6ec42922060beb4cba101aaa37f2ff7f621409d\",\"license\":\"MIT\"},\"contracts/interfaces/IPenrose.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '../usd0/IUSD0.sol';\\r\\nimport '../swappers/ISwapper.sol';\\r\\n\\r\\ninterface IPenrose {\\r\\n    /// @notice swap extra data\\r\\n    struct SwapData {\\r\\n        uint256 minAssetAmount;\\r\\n    }\\r\\n\\r\\n    /// @notice Used to define the MasterContract's type\\r\\n    enum ContractType {\\r\\n        lowRisk,\\r\\n        mediumRisk,\\r\\n        highRisk\\r\\n    }\\r\\n\\r\\n    /// @notice MasterContract address and type\\r\\n    struct MasterContract {\\r\\n        address location;\\r\\n        ContractType risk;\\r\\n    }\\r\\n\\r\\n    function bigBangEthMarket() external view returns (address);\\r\\n\\r\\n    function bigBangEthDebtRate() external view returns (uint256);\\r\\n\\r\\n    function swappers(ISwapper swapper) external view returns (bool);\\r\\n\\r\\n    function yieldBox() external view returns (address payable);\\r\\n\\r\\n    function tapToken() external view returns (address);\\r\\n\\r\\n    function tapAssetId() external view returns (uint256);\\r\\n\\r\\n    function usdoToken() external view returns (address);\\r\\n\\r\\n    function usdoAssetId() external view returns (uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function wethToken() external view returns (address);\\r\\n\\r\\n    function wethAssetId() external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc1a63290e1251b26741d1e5773205cfb59bb0ad3dc9d0dcad7ed06f2b87c581f\",\"license\":\"UNLICENSED\"},\"contracts/singularity/SGLProxy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport '@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol';\\r\\nimport 'tapioca-sdk/dist/contracts/lzApp/NonblockingLzApp.sol';\\r\\nimport './interfaces/ISingularity.sol';\\r\\n\\r\\n/*\\r\\n\\r\\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____        \\r\\n _\\\\///////\\\\\\\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/////\\\\\\\\\\\\///______/\\\\\\\\\\\\///\\\\\\\\\\\\________/\\\\\\\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__       \\r\\n  _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_      \\r\\n   _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\/\\\\\\\\\\\\______/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_     \\r\\n    _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\/////////________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \\r\\n     _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_   \\r\\n      _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\______\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\_____\\\\///\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\///\\\\\\\\\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_ \\r\\n        _______\\\\///________\\\\///________\\\\///__\\\\///______________\\\\///////////_______\\\\/////_____________\\\\/////////__\\\\///________\\\\///__\\r\\n\\r\\n*/\\r\\n/// @title Omnichain proxy for Singularity\\r\\ncontract SGLProxy is NonblockingLzApp {\\r\\n    // ************ //\\r\\n    // *** VARS *** //\\r\\n    // ************ //\\r\\n    bool public useCustomAdapterParams;\\r\\n    bool public enforceSameAddress;\\r\\n\\r\\n    // Address of the whitelisted Singularity contracts\\r\\n    mapping(address => bool) public singularities;\\r\\n\\r\\n    // ***************** //\\r\\n    // *** CONSTANTS *** //\\r\\n    // ***************** //\\r\\n    uint256 public constant NO_EXTRA_GAS = 0;\\r\\n    uint256 public constant FUNCTION_TYPE_SEND = 1;\\r\\n\\r\\n    // ************** //\\r\\n    // *** EVENTS *** //\\r\\n    // ************** //\\r\\n\\r\\n    event ReceiveFromChain(\\r\\n        uint16 indexed _srcChainId,\\r\\n        address indexed _dstSingularity,\\r\\n        bytes _sglPayload\\r\\n    );\\r\\n    event SendToChain(\\r\\n        uint16 indexed _srcChainId,\\r\\n        address indexed _srcAddress,\\r\\n        bytes _sglPayload\\r\\n    );\\r\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\r\\n    event LogSingularityStatus(address indexed singularity, bool status);\\r\\n    event LogEnforce(bool _old, bool _new);\\r\\n\\r\\n    /// @notice creates a new SGLProxy contract\\r\\n    /// @param _lzEndpoint LayerZero endpoint address\\r\\n    /// @param _owner contract's owner address\\r\\n    constructor(address _lzEndpoint, address _owner)\\r\\n        NonblockingLzApp(_lzEndpoint)\\r\\n    {\\r\\n        _transferOwnership(_owner);\\r\\n        enforceSameAddress = true;\\r\\n    }\\r\\n\\r\\n    // ************************ //\\r\\n    // *** PUBLIC FUNCTIONS *** //\\r\\n    // ************************ //\\r\\n\\r\\n    /// @notice execute Singularity methods on another chain\\r\\n    /// @param _dstChainId te LayerZero destination chain id\\r\\n    /// @param _mixologistDstAddress destination Singularity address\\r\\n    /// @param _sglCalls Singularity calls\\r\\n    /// @param _adapterParams custom adapters\\r\\n    function executeOnChain(\\r\\n        uint16 _dstChainId,\\r\\n        bytes memory _mixologistDstAddress,\\r\\n        bytes[] memory _sglCalls,\\r\\n        bytes memory _adapterParams\\r\\n    ) external payable {\\r\\n        uint256 chainId = lzEndpoint.getChainId();\\r\\n        require(chainId != _dstChainId, 'SGLProxy: Chain not valid');\\r\\n\\r\\n        _send(\\r\\n            msg.sender,\\r\\n            _dstChainId,\\r\\n            _mixologistDstAddress,\\r\\n            _sglCalls,\\r\\n            payable(msg.sender),\\r\\n            address(0),\\r\\n            _adapterParams\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // *********************** //\\r\\n    // *** OWNER FUNCTIONS *** //\\r\\n    // *********************** //\\r\\n    /// @notice set whitelist status for Singularity\\r\\n    /// @dev callable by owner\\r\\n    /// @param _mixologist the Singularity address\\r\\n    /// @param _status whitelisted/not\\r\\n    function updateSingularityStatus(address _mixologist, bool _status)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        singularities[_mixologist] = _status;\\r\\n        emit LogSingularityStatus(_mixologist, _status);\\r\\n    }\\r\\n\\r\\n    /// @notice set custom adapter usage status\\r\\n    /// @param _useCustomAdapterParams true/false\\r\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        useCustomAdapterParams = _useCustomAdapterParams;\\r\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\r\\n    }\\r\\n\\r\\n    //TODO: TBD; remove as we already have trustedRemotes\\r\\n    /// @notice enforces CREATE2 proxies\\r\\n    /// @param _val true/false\\r\\n    function setEnforceSameAddress(bool _val) external onlyOwner {\\r\\n        emit LogEnforce(enforceSameAddress, _val);\\r\\n        enforceSameAddress = _val;\\r\\n    }\\r\\n\\r\\n    // ************************* //\\r\\n    // *** PRIVATE FUNCTIONS *** //\\r\\n    // ************************* //\\r\\n    /// @notice override of the '_nonblockingLzReceive' method\\r\\n    function _nonblockingLzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory, /*_srcAddress*/\\r\\n        uint64, /*_nonce*/\\r\\n        bytes memory _sglPayload\\r\\n    ) internal override {\\r\\n        // decode and load the toAddress\\r\\n        (\\r\\n            bytes memory fromAddressBytes,\\r\\n            bytes memory toAddressBytes,\\r\\n            bytes[] memory sglCalls\\r\\n        ) = abi.decode(_sglPayload, (bytes, bytes, bytes[]));\\r\\n\\r\\n        address fromAddress;\\r\\n        assembly {\\r\\n            fromAddress := mload(add(fromAddressBytes, 20))\\r\\n        }\\r\\n        if (enforceSameAddress) {\\r\\n            require(fromAddress == address(this), 'SGLProxy: not proxy'); //should have the same address\\r\\n        }\\r\\n\\r\\n        address toAddress;\\r\\n        assembly {\\r\\n            toAddress := mload(add(toAddressBytes, 20))\\r\\n        }\\r\\n        require(singularities[toAddress], 'SGLProxy: Invalid Singularity');\\r\\n\\r\\n        ISingularity(toAddress).execute(sglCalls, true);\\r\\n\\r\\n        emit ReceiveFromChain(_srcChainId, toAddress, _sglPayload);\\r\\n    }\\r\\n\\r\\n    /// @notice override of the '_send' method\\r\\n    function _send(\\r\\n        address _from,\\r\\n        uint16 _dstChainId,\\r\\n        bytes memory _toAddress,\\r\\n        bytes[] memory _sglCalls,\\r\\n        address payable _refundAddress,\\r\\n        address _zroPaymentAddress,\\r\\n        bytes memory _adapterParams\\r\\n    ) internal {\\r\\n        bytes memory sglPayload = abi.encode(\\r\\n            abi.encodePacked(address(this)),\\r\\n            _toAddress,\\r\\n            _sglCalls\\r\\n        );\\r\\n        if (useCustomAdapterParams) {\\r\\n            _checkGasLimit(\\r\\n                _dstChainId,\\r\\n                uint16(FUNCTION_TYPE_SEND),\\r\\n                _adapterParams,\\r\\n                NO_EXTRA_GAS\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _adapterParams.length == 0,\\r\\n                'LzApp: _adapterParams must be empty.'\\r\\n            );\\r\\n        }\\r\\n        _lzSend(\\r\\n            _dstChainId,\\r\\n            sglPayload,\\r\\n            _refundAddress,\\r\\n            _zroPaymentAddress,\\r\\n            _adapterParams,\\r\\n            msg.value\\r\\n        );\\r\\n\\r\\n        emit SendToChain(_dstChainId, _from, sglPayload);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x735c705ac7907b32dd96643e74db342d261153fcb8cb3f2a4825f915a44596bd\",\"license\":\"UNLICENSED\"},\"contracts/singularity/interfaces/ISingularity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport '../../interfaces/IOracle.sol';\\r\\nimport '../../interfaces/IFee.sol';\\r\\nimport '../../interfaces/IMarket.sol';\\r\\n\\r\\ninterface ISingularity is IMarket, IFee {\\r\\n    struct AccrueInfo {\\r\\n        uint64 interestPerSecond;\\r\\n        uint64 lastAccrued;\\r\\n        uint128 feesEarnedFraction;\\r\\n    }\\r\\n\\r\\n    event Approval(\\r\\n        address indexed _owner,\\r\\n        address indexed _spender,\\r\\n        uint256 _value\\r\\n    );\\r\\n    event LogAccrue(\\r\\n        uint256 accruedAmount,\\r\\n        uint256 feeFraction,\\r\\n        uint64 rate,\\r\\n        uint256 utilization\\r\\n    );\\r\\n    event LogAddAsset(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 share,\\r\\n        uint256 fraction\\r\\n    );\\r\\n    event LogAddCollateral(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 share\\r\\n    );\\r\\n    event LogBorrow(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 amount,\\r\\n        uint256 feeAmount,\\r\\n        uint256 part\\r\\n    );\\r\\n    event LogExchangeRate(uint256 rate);\\r\\n    event LogFeeTo(address indexed newFeeTo);\\r\\n    event LogRemoveAsset(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 share,\\r\\n        uint256 fraction\\r\\n    );\\r\\n    event LogRemoveCollateral(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 share\\r\\n    );\\r\\n    event LogRepay(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 amount,\\r\\n        uint256 part\\r\\n    );\\r\\n    event LogWithdrawFees(address indexed feeTo, uint256 feesEarnedFraction);\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event LogFlashLoan(\\r\\n        address indexed borrower,\\r\\n        uint256 amount,\\r\\n        uint256 feeAmount,\\r\\n        address indexed receiver\\r\\n    );\\r\\n    event LogYieldBoxFeesDeposit(uint256 feeShares, uint256 tapAmount);\\r\\n    event LogApprovalForAll(\\r\\n        address indexed _from,\\r\\n        address indexed _operator,\\r\\n        bool _approved\\r\\n    );\\r\\n    error NotApproved(address _from, address _operator);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function accrue() external;\\r\\n\\r\\n    function accrueInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint64 interestPerSecond,\\r\\n            uint64 lastBlockAccrued,\\r\\n            uint128 feesEarnedFraction\\r\\n        );\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function addAsset(\\r\\n        address from,\\r\\n        address to,\\r\\n        bool skim,\\r\\n        uint256 share\\r\\n    ) external returns (uint256 fraction);\\r\\n\\r\\n   \\r\\n    function allowance(address, address) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function balanceOf(address) external view returns (uint256);\\r\\n\\r\\n    function penrose() external view returns (address);\\r\\n\\r\\n    function claimOwnership() external;\\r\\n\\r\\n    /// @notice Allows batched call to Singularity.\\r\\n    /// @param calls An array encoded call data.\\r\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\r\\n    function execute(bytes[] calldata calls, bool revertOnFail)\\r\\n        external\\r\\n        returns (bool[] memory successes, string[] memory results);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function exchangeRate() external view returns (uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function getInitData(\\r\\n        address collateral_,\\r\\n        address asset_,\\r\\n        IOracle oracle_,\\r\\n        bytes calldata oracleData_\\r\\n    ) external pure returns (bytes memory data);\\r\\n\\r\\n    function init(bytes calldata data) external payable;\\r\\n\\r\\n    function isSolvent(address user, bool open) external view returns (bool);\\r\\n\\r\\n    function liquidate(\\r\\n        address[] calldata users,\\r\\n        uint256[] calldata borrowParts,\\r\\n        address to,\\r\\n        ISwapper swapper,\\r\\n        bool open\\r\\n    ) external;\\r\\n\\r\\n    function masterContract() external view returns (address);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function nonces(address) external view returns (uint256);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function pendingOwner() external view returns (address);\\r\\n\\r\\n    function permit(\\r\\n        address owner_,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function removeAsset(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 fraction\\r\\n    ) external returns (uint256 share);\\r\\n\\r\\n    function setFeeTo(address newFeeTo) external;\\r\\n\\r\\n    function setSwapper(ISwapper swapper, bool enable) external;\\r\\n\\r\\n    function swappers(ISwapper) external view returns (bool);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function totalAsset() external view returns (uint128 elastic, uint128 base);\\r\\n\\r\\n    function callerFee() external view returns (uint256);\\r\\n\\r\\n    function protocolFee() external view returns (uint256);\\r\\n\\r\\n    function borrowOpeningFee() external view returns (uint256);\\r\\n\\r\\n    function orderBookLiquidationMultiplier() external view returns (uint256);\\r\\n\\r\\n    function closedCollateralizationRate() external view returns (uint256);\\r\\n\\r\\n    function lqCollateralizationRate() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) external;\\r\\n\\r\\n    function updateExchangeRate() external returns (bool updated, uint256 rate);\\r\\n\\r\\n    function withdrawFees() external;\\r\\n\\r\\n    function liquidationQueue() external view returns (address payable);\\r\\n}\\r\\n\",\"keccak256\":\"0xde178f586629eff91911e643c53268b5f6af165c611857cb42c661f718c50486\",\"license\":\"MIT\"},\"contracts/swappers/ISwapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ISwapper {\\r\\n    /// @notice returns the possible output amount for input share\\r\\n    /// @param tokenInId YieldBox asset id\\r\\n    /// @param shareIn Shares to get the amount for\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    ///     - for Curve, it should contain uint256[] tokenIndexes\\r\\n    function getOutputAmount(\\r\\n        uint256 tokenInId,\\r\\n        uint256 shareIn,\\r\\n        bytes calldata dexData\\r\\n    ) external view returns (uint256 amountOut);\\r\\n\\r\\n    /// @notice returns necessary input amount for a fixed output amount\\r\\n    /// @param tokenOutId YieldBox asset id\\r\\n    /// @param shareOut Shares out to compute the amount for\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    function getInputAmount(\\r\\n        uint256 tokenOutId,\\r\\n        uint256 shareOut,\\r\\n        bytes calldata dexData\\r\\n    ) external view returns (uint256 amountIn);\\r\\n\\r\\n    /// @notice swaps token in with token out\\r\\n    /// @dev returns both amount and shares\\r\\n    /// @param tokenInId YieldBox asset id\\r\\n    /// @param tokenOutId YieldBox asset id\\r\\n    /// @param shareIn Shares to be swapped\\r\\n    /// @param to Receiver address\\r\\n    /// @param amountOutMin Minimum amount to be received\\r\\n    /// @param dexData Custom DEX data for query execution\\r\\n    /// @dev dexData examples:\\r\\n    ///     - for UniV2, it should contain address[] swapPath\\r\\n    ///     - for Curve, it should contain uint256[] tokenIndexes\\r\\n    function swap(\\r\\n        uint256 tokenInId,\\r\\n        uint256 tokenOutId,\\r\\n        uint256 shareIn,\\r\\n        address to,\\r\\n        uint256 amountOutMin,\\r\\n        bytes calldata dexData\\r\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\r\\n}\\r\\n\",\"keccak256\":\"0xfa7fcbdb9750abe304364d91d5dfe32dfa6be399ba3b250f7221109d86a21a24\",\"license\":\"UNLICENSED\"},\"contracts/usd0/IUSD0.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\nimport '@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol';\\n\\ninterface IUSD0 is IStrictERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb76f289e1db4d015f491c1a30ad3ac9a2ee34e7dd9b1128c77b162d835c066df\",\"license\":\"UNLICENSED\"},\"tapioca-sdk/dist/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\r\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\r\\n    // @param _payload - a custom bytes payload to send to the destination contract\\r\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\r\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\r\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\r\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    // @notice used by the messaging library to publish verified payload\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\r\\n    // @param _dstAddress - the address on destination chain\\r\\n    // @param _nonce - the unbound message ordering nonce\\r\\n    // @param _gasLimit - the gas limit for external contract execution\\r\\n    // @param _payload - verified payload to send to the destination contract\\r\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    // @param _payload - the custom message to send over LayerZero\\r\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\r\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\r\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    // @notice get this Endpoint's immutable source identifier\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    // @notice the interface to retry failed message on this Endpoint destination\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    // @param _payload - the payload to be retried\\r\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for send() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isSendingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for receive() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isReceivingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\r\\n\\r\\n    // @notice get the send() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\r\\n\\r\\n    // @notice get the lzReceive() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\r\\n}\\r\\n\",\"keccak256\":\"0xb0f5dd5442f7f6dc3cba510c3170e5304de918b082ac658a2935433e80fefb66\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroReceiver {\\r\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\r\\n    // @param _srcChainId - the source endpoint identifier\\r\\n    // @param _srcAddress - the source sending contract address from the source chain\\r\\n    // @param _nonce - the ordered message nonce\\r\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe377e661a587f855100ae6bbc9159e9aa279a99b632b445b3b9fb45a347da63a\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\ninterface ILayerZeroUserApplicationConfig {\\r\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\r\\n\\r\\n    // @notice set the send() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setSendVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setReceiveVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\r\\n    // @param _srcChainId - the chainId of the source chain\\r\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x42d10415d035529fcdff738d6542844ad58124b4e1da5a8ff92d6ddd8bf96513\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\r\\nimport \\\"../util/BytesLib.sol\\\";\\r\\n\\r\\n/*\\r\\n * a generic LzReceiver implementation\\r\\n */\\r\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\r\\n    using BytesLib for bytes;\\r\\n\\r\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\r\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\r\\n    mapping(uint16 => mapping(uint16 => uint)) public minDstGasLookup;\\r\\n    address public precrime;\\r\\n\\r\\n    event SetPrecrime(address precrime);\\r\\n    event SetTrustedRemote(uint16 _remoteChainId, bytes _path);\\r\\n    event SetTrustedRemoteAddress(uint16 _remoteChainId, bytes _remoteAddress);\\r\\n    event SetMinDstGas(uint16 _dstChainId, uint16 _type, uint _minDstGas);\\r\\n\\r\\n    constructor(address _endpoint) {\\r\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\r\\n    }\\r\\n\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual override {\\r\\n        // lzReceive must be called by the endpoint for security\\r\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\r\\n\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\r\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\r\\n        require(_srcAddress.length == trustedRemote.length && trustedRemote.length > 0 && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\r\\n\\r\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\r\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\r\\n\\r\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams, uint _nativeFee) internal virtual {\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\r\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\r\\n        lzEndpoint.send{value: _nativeFee}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\r\\n    }\\r\\n\\r\\n    function _checkGasLimit(uint16 _dstChainId, uint16 _type, bytes memory _adapterParams, uint _extraGas) internal view virtual {\\r\\n        uint providedGasLimit = _getGasLimit(_adapterParams);\\r\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\r\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\r\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\r\\n    }\\r\\n\\r\\n    function _getGasLimit(bytes memory _adapterParams) internal pure virtual returns (uint gasLimit) {\\r\\n        require(_adapterParams.length >= 34, \\\"LzApp: invalid adapterParams\\\");\\r\\n        assembly {\\r\\n            gasLimit := mload(add(_adapterParams, 34))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //---------------------------UserApplication config----------------------------------------\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\r\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\r\\n    }\\r\\n\\r\\n    // generic config for LayerZero user Application\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\r\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\r\\n    }\\r\\n\\r\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setSendVersion(_version);\\r\\n    }\\r\\n\\r\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setReceiveVersion(_version);\\r\\n    }\\r\\n\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\r\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    // _path = abi.encodePacked(remoteAddress, localAddress)\\r\\n    // this function set the trusted path for the cross-chain communication\\r\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _path) external onlyOwner {\\r\\n        trustedRemoteLookup[_srcChainId] = _path;\\r\\n        emit SetTrustedRemote(_srcChainId, _path);\\r\\n    }\\r\\n\\r\\n    function setTrustedRemoteAddress(uint16 _remoteChainId, bytes calldata _remoteAddress) external onlyOwner {\\r\\n        trustedRemoteLookup[_remoteChainId] = abi.encodePacked(_remoteAddress, address(this));\\r\\n        emit SetTrustedRemoteAddress(_remoteChainId, _remoteAddress);\\r\\n    }\\r\\n\\r\\n    function getTrustedRemoteAddress(uint16 _remoteChainId) external view returns (bytes memory) {\\r\\n        bytes memory path = trustedRemoteLookup[_remoteChainId];\\r\\n        require(path.length != 0, \\\"LzApp: no trusted path record\\\");\\r\\n        return path.slice(0, path.length - 20); // the last 20 bytes should be address(this)\\r\\n    }\\r\\n\\r\\n    function setPrecrime(address _precrime) external onlyOwner {\\r\\n        precrime = _precrime;\\r\\n        emit SetPrecrime(_precrime);\\r\\n    }\\r\\n\\r\\n    function setMinDstGas(uint16 _dstChainId, uint16 _packetType, uint _minGas) external onlyOwner {\\r\\n        require(_minGas > 0, \\\"LzApp: invalid minGas\\\");\\r\\n        minDstGasLookup[_dstChainId][_packetType] = _minGas;\\r\\n        emit SetMinDstGas(_dstChainId, _packetType, _minGas);\\r\\n    }\\r\\n\\r\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\r\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\r\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\r\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1a0e6fda04384621ecabd287f3ccd00be6e30e364f5e059dbbe17504a4450529\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./LzApp.sol\\\";\\r\\nimport \\\"../util/ExcessivelySafeCall.sol\\\";\\r\\n\\r\\n/*\\r\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\r\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\r\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\r\\n */\\r\\nabstract contract NonblockingLzApp is LzApp {\\r\\n    using ExcessivelySafeCall for address;\\r\\n\\r\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\r\\n\\r\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\r\\n\\r\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload, bytes _reason);\\r\\n    event RetryMessageSuccess(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes32 _payloadHash);\\r\\n\\r\\n    // overriding the virtual function in LzReceiver\\r\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\r\\n        (bool success, bytes memory reason) = address(this).excessivelySafeCall(gasleft(), 150, abi.encodeWithSelector(this.nonblockingLzReceive.selector, _srcChainId, _srcAddress, _nonce, _payload));\\r\\n        // try-catch all errors/exceptions\\r\\n        if (!success) {\\r\\n            _storeFailedMessage(_srcChainId, _srcAddress, _nonce, _payload, reason);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _storeFailedMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload, bytes memory _reason) internal virtual {\\r\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\r\\n        emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload, _reason);\\r\\n    }\\r\\n\\r\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public virtual {\\r\\n        // only internal transaction\\r\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    //@notice override this function\\r\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\r\\n\\r\\n    function retryMessage(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) public payable virtual {\\r\\n        // assert there is message to retry\\r\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\r\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\r\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\r\\n        // clear the stored message\\r\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\r\\n        // execute the message. revert if it fails again\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n        emit RetryMessageSuccess(_srcChainId, _srcAddress, _nonce, payloadHash);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdb658dec1849313ea4abe5a790d349cee322208eb48478a610f328f2652f8d6b\",\"license\":\"MIT\"},\"tapioca-sdk/dist/contracts/util/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\r\\n/*\\r\\n * @title Solidity Bytes Arrays Utils\\r\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\r\\n *\\r\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\r\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\r\\n */\\r\\npragma solidity >=0.8.0 <0.9.0;\\r\\n\\r\\n\\r\\nlibrary BytesLib {\\r\\n    function concat(\\r\\n        bytes memory _preBytes,\\r\\n        bytes memory _postBytes\\r\\n    )\\r\\n    internal\\r\\n    pure\\r\\n    returns (bytes memory)\\r\\n    {\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n        // Get a location of some free memory and store it in tempBytes as\\r\\n        // Solidity does for memory variables.\\r\\n            tempBytes := mload(0x40)\\r\\n\\r\\n        // Store the length of the first bytes array at the beginning of\\r\\n        // the memory for tempBytes.\\r\\n            let length := mload(_preBytes)\\r\\n            mstore(tempBytes, length)\\r\\n\\r\\n        // Maintain a memory counter for the current write location in the\\r\\n        // temp bytes array by adding the 32 bytes for the array length to\\r\\n        // the starting location.\\r\\n            let mc := add(tempBytes, 0x20)\\r\\n        // Stop copying when the memory counter reaches the length of the\\r\\n        // first bytes array.\\r\\n            let end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n            // Initialize a copy counter to the start of the _preBytes data,\\r\\n            // 32 bytes into its memory.\\r\\n                let cc := add(_preBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n            // Increase both counters by 32 bytes each iteration.\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n            // Write the _preBytes data into the tempBytes memory 32 bytes\\r\\n            // at a time.\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n        // Add the length of _postBytes to the current length of tempBytes\\r\\n        // and store it as the new length in the first 32 bytes of the\\r\\n        // tempBytes memory.\\r\\n            length := mload(_postBytes)\\r\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\r\\n\\r\\n        // Move the memory counter back from a multiple of 0x20 to the\\r\\n        // actual end of the _preBytes data.\\r\\n            mc := end\\r\\n        // Stop copying when the memory counter reaches the new combined\\r\\n        // length of the arrays.\\r\\n            end := add(mc, length)\\r\\n\\r\\n            for {\\r\\n                let cc := add(_postBytes, 0x20)\\r\\n            } lt(mc, end) {\\r\\n                mc := add(mc, 0x20)\\r\\n                cc := add(cc, 0x20)\\r\\n            } {\\r\\n                mstore(mc, mload(cc))\\r\\n            }\\r\\n\\r\\n        // Update the free-memory pointer by padding our last write location\\r\\n        // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\r\\n        // next 32 byte block, then round down to the nearest multiple of\\r\\n        // 32. If the sum of the length of the two arrays is zero then add\\r\\n        // one before rounding down to leave a blank 32 bytes (the length block with 0).\\r\\n            mstore(0x40, and(\\r\\n            add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\r\\n            not(31) // Round down to the nearest 32 bytes.\\r\\n            ))\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\r\\n        assembly {\\r\\n        // Read the first 32 bytes of _preBytes storage, which is the length\\r\\n        // of the array. (We don't need to use the offset into the slot\\r\\n        // because arrays use the entire slot.)\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n        // Arrays of 31 bytes or less have an even value in their slot,\\r\\n        // while longer arrays have an odd value. The actual length is\\r\\n        // the slot divided by two for odd values, and the lowest order\\r\\n        // byte divided by two for even values.\\r\\n        // If the slot is even, bitwise and the slot with 255 and divide by\\r\\n        // two to get the length. If the slot is odd, bitwise and the slot\\r\\n        // with -1 and divide by two.\\r\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n            let mlength := mload(_postBytes)\\r\\n            let newlength := add(slength, mlength)\\r\\n        // slength can contain both the length and contents of the array\\r\\n        // if length < 32 bytes so let's prepare for that\\r\\n        // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n            switch add(lt(slength, 32), lt(newlength, 32))\\r\\n            case 2 {\\r\\n            // Since the new array still fits in the slot, we just need to\\r\\n            // update the contents of the slot.\\r\\n            // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\r\\n                sstore(\\r\\n                _preBytes.slot,\\r\\n                // all the modifications to the slot are inside this\\r\\n                // next block\\r\\n                add(\\r\\n                // we can just add to the slot contents because the\\r\\n                // bytes we want to change are the LSBs\\r\\n                fslot,\\r\\n                add(\\r\\n                mul(\\r\\n                div(\\r\\n                // load the bytes from memory\\r\\n                mload(add(_postBytes, 0x20)),\\r\\n                // zero all bytes to the right\\r\\n                exp(0x100, sub(32, mlength))\\r\\n                ),\\r\\n                // and now shift left the number of bytes to\\r\\n                // leave space for the length in the slot\\r\\n                exp(0x100, sub(32, newlength))\\r\\n                ),\\r\\n                // increase length by the double of the memory\\r\\n                // bytes length\\r\\n                mul(mlength, 2)\\r\\n                )\\r\\n                )\\r\\n                )\\r\\n            }\\r\\n            case 1 {\\r\\n            // The stored value fits in the slot, but the combined value\\r\\n            // will exceed it.\\r\\n            // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n            // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n            // The contents of the _postBytes array start 32 bytes into\\r\\n            // the structure. Our first read should obtain the `submod`\\r\\n            // bytes that can fit into the unused space in the last word\\r\\n            // of the stored array. To get this, we read 32 bytes starting\\r\\n            // from `submod`, so the data we read overlaps with the array\\r\\n            // contents by `submod` bytes. Masking the lowest-order\\r\\n            // `submod` bytes allows us to add that value directly to the\\r\\n            // stored value.\\r\\n\\r\\n                let submod := sub(32, slength)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(\\r\\n                sc,\\r\\n                add(\\r\\n                and(\\r\\n                fslot,\\r\\n                0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\r\\n                ),\\r\\n                and(mload(mc), mask)\\r\\n                )\\r\\n                )\\r\\n\\r\\n                for {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    sc := add(sc, 1)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n            default {\\r\\n            // get the keccak hash to get the contents of the array\\r\\n                mstore(0x0, _preBytes.slot)\\r\\n            // Start copying to the last used word of the stored array.\\r\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\r\\n\\r\\n            // save new length\\r\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\r\\n\\r\\n            // Copy over the first `submod` bytes of the new data as in\\r\\n            // case 1 above.\\r\\n                let slengthmod := mod(slength, 32)\\r\\n                let mlengthmod := mod(mlength, 32)\\r\\n                let submod := sub(32, slengthmod)\\r\\n                let mc := add(_postBytes, submod)\\r\\n                let end := add(_postBytes, mlength)\\r\\n                let mask := sub(exp(0x100, submod), 1)\\r\\n\\r\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\r\\n\\r\\n                for {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } lt(mc, end) {\\r\\n                    sc := add(sc, 1)\\r\\n                    mc := add(mc, 0x20)\\r\\n                } {\\r\\n                    sstore(sc, mload(mc))\\r\\n                }\\r\\n\\r\\n                mask := exp(0x100, sub(mc, end))\\r\\n\\r\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function slice(\\r\\n        bytes memory _bytes,\\r\\n        uint256 _start,\\r\\n        uint256 _length\\r\\n    )\\r\\n    internal\\r\\n    pure\\r\\n    returns (bytes memory)\\r\\n    {\\r\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\r\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\r\\n\\r\\n        bytes memory tempBytes;\\r\\n\\r\\n        assembly {\\r\\n            switch iszero(_length)\\r\\n            case 0 {\\r\\n            // Get a location of some free memory and store it in tempBytes as\\r\\n            // Solidity does for memory variables.\\r\\n                tempBytes := mload(0x40)\\r\\n\\r\\n            // The first word of the slice result is potentially a partial\\r\\n            // word read from the original array. To read it, we calculate\\r\\n            // the length of that partial word and start copying that many\\r\\n            // bytes into the array. The first word we copy will start with\\r\\n            // data we don't care about, but the last `lengthmod` bytes will\\r\\n            // land at the beginning of the contents of the new array. When\\r\\n            // we're done copying, we overwrite the full first word with\\r\\n            // the actual length of the slice.\\r\\n                let lengthmod := and(_length, 31)\\r\\n\\r\\n            // The multiplication in the next line is necessary\\r\\n            // because when slicing multiples of 32 bytes (lengthmod == 0)\\r\\n            // the following copy loop was copying the origin's length\\r\\n            // and then ending prematurely not copying everything it should.\\r\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\r\\n                let end := add(mc, _length)\\r\\n\\r\\n                for {\\r\\n                // The multiplication in the next line has the same exact purpose\\r\\n                // as the one above.\\r\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\r\\n                } lt(mc, end) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                    mstore(mc, mload(cc))\\r\\n                }\\r\\n\\r\\n                mstore(tempBytes, _length)\\r\\n\\r\\n            //update free-memory pointer\\r\\n            //allocating the array padded to 32 bytes like the compiler does now\\r\\n                mstore(0x40, and(add(mc, 31), not(31)))\\r\\n            }\\r\\n            //if we want a zero-length slice let's just return a zero-length array\\r\\n            default {\\r\\n                tempBytes := mload(0x40)\\r\\n            //zero out the 32 bytes slice we are about to return\\r\\n            //we need to do it because Solidity does not garbage collect\\r\\n                mstore(tempBytes, 0)\\r\\n\\r\\n                mstore(0x40, add(tempBytes, 0x20))\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return tempBytes;\\r\\n    }\\r\\n\\r\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\r\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\r\\n        address tempAddress;\\r\\n\\r\\n        assembly {\\r\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\r\\n        }\\r\\n\\r\\n        return tempAddress;\\r\\n    }\\r\\n\\r\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\r\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\r\\n        uint8 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\r\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\r\\n        uint16 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\r\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\r\\n        uint32 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\r\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\r\\n        uint64 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\r\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\r\\n        uint96 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\r\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\r\\n        uint128 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\r\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\r\\n        uint256 tempUint;\\r\\n\\r\\n        assembly {\\r\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempUint;\\r\\n    }\\r\\n\\r\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\r\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\r\\n        bytes32 tempBytes32;\\r\\n\\r\\n        assembly {\\r\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\r\\n        }\\r\\n\\r\\n        return tempBytes32;\\r\\n    }\\r\\n\\r\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n            let length := mload(_preBytes)\\r\\n\\r\\n        // if lengths don't match the arrays are not equal\\r\\n            switch eq(length, mload(_postBytes))\\r\\n            case 1 {\\r\\n            // cb is a circuit breaker in the for loop since there's\\r\\n            //  no said feature for inline assembly loops\\r\\n            // cb = 1 - don't breaker\\r\\n            // cb = 0 - break\\r\\n                let cb := 1\\r\\n\\r\\n                let mc := add(_preBytes, 0x20)\\r\\n                let end := add(mc, length)\\r\\n\\r\\n                for {\\r\\n                    let cc := add(_postBytes, 0x20)\\r\\n                // the next line is the loop condition:\\r\\n                // while(uint256(mc < end) + cb == 2)\\r\\n                } eq(add(lt(mc, end), cb), 2) {\\r\\n                    mc := add(mc, 0x20)\\r\\n                    cc := add(cc, 0x20)\\r\\n                } {\\r\\n                // if any of these checks fails then arrays are not equal\\r\\n                    if iszero(eq(mload(mc), mload(cc))) {\\r\\n                    // unsuccess:\\r\\n                        success := 0\\r\\n                        cb := 0\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n            // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    function equalStorage(\\r\\n        bytes storage _preBytes,\\r\\n        bytes memory _postBytes\\r\\n    )\\r\\n    internal\\r\\n    view\\r\\n    returns (bool)\\r\\n    {\\r\\n        bool success = true;\\r\\n\\r\\n        assembly {\\r\\n        // we know _preBytes_offset is 0\\r\\n            let fslot := sload(_preBytes.slot)\\r\\n        // Decode the length of the stored array like in concatStorage().\\r\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\r\\n            let mlength := mload(_postBytes)\\r\\n\\r\\n        // if lengths don't match the arrays are not equal\\r\\n            switch eq(slength, mlength)\\r\\n            case 1 {\\r\\n            // slength can contain both the length and contents of the array\\r\\n            // if length < 32 bytes so let's prepare for that\\r\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\r\\n                if iszero(iszero(slength)) {\\r\\n                    switch lt(slength, 32)\\r\\n                    case 1 {\\r\\n                    // blank the last byte which is the length\\r\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\r\\n\\r\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\r\\n                        // unsuccess:\\r\\n                            success := 0\\r\\n                        }\\r\\n                    }\\r\\n                    default {\\r\\n                    // cb is a circuit breaker in the for loop since there's\\r\\n                    //  no said feature for inline assembly loops\\r\\n                    // cb = 1 - don't breaker\\r\\n                    // cb = 0 - break\\r\\n                        let cb := 1\\r\\n\\r\\n                    // get the keccak hash to get the contents of the array\\r\\n                        mstore(0x0, _preBytes.slot)\\r\\n                        let sc := keccak256(0x0, 0x20)\\r\\n\\r\\n                        let mc := add(_postBytes, 0x20)\\r\\n                        let end := add(mc, mlength)\\r\\n\\r\\n                    // the next line is the loop condition:\\r\\n                    // while(uint256(mc < end) + cb == 2)\\r\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\r\\n                            sc := add(sc, 1)\\r\\n                            mc := add(mc, 0x20)\\r\\n                        } {\\r\\n                            if iszero(eq(sload(sc), mload(mc))) {\\r\\n                            // unsuccess:\\r\\n                                success := 0\\r\\n                                cb := 0\\r\\n                            }\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n            default {\\r\\n            // unsuccess:\\r\\n                success := 0\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return success;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x31ec222b26bcf66817cb409f0128d16c632b28729ad3a694f47b10e8ad0cb984\",\"license\":\"Unlicense\"},\"tapioca-sdk/dist/contracts/util/ExcessivelySafeCall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\r\\npragma solidity >=0.7.6;\\r\\n\\r\\nlibrary ExcessivelySafeCall {\\r\\n    uint256 constant LOW_28_MASK =\\r\\n    0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\r\\n\\r\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\r\\n    /// contract. This prevents the called contract from causing reversion of\\r\\n    /// the caller in as many ways as we can.\\r\\n    /// @dev The main difference between this and a solidity low-level call is\\r\\n    /// that we limit the number of bytes that the callee can cause to be\\r\\n    /// copied to caller memory. This prevents stupid things like malicious\\r\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\r\\n    /// to memory.\\r\\n    /// @param _target The address to call\\r\\n    /// @param _gas The amount of gas to forward to the remote contract\\r\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\r\\n    /// to memory.\\r\\n    /// @param _calldata The data to send to the remote contract\\r\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\r\\n    /// `_maxCopy` bytes.\\r\\n    function excessivelySafeCall(\\r\\n        address _target,\\r\\n        uint256 _gas,\\r\\n        uint16 _maxCopy,\\r\\n        bytes memory _calldata\\r\\n    ) internal returns (bool, bytes memory) {\\r\\n        // set up for assembly call\\r\\n        uint256 _toCopy;\\r\\n        bool _success;\\r\\n        bytes memory _returnData = new bytes(_maxCopy);\\r\\n        // dispatch message to recipient\\r\\n        // by assembly calling \\\"handle\\\" function\\r\\n        // we call via assembly to avoid memcopying a very large returndata\\r\\n        // returned by a malicious contract\\r\\n        assembly {\\r\\n            _success := call(\\r\\n            _gas, // gas\\r\\n            _target, // recipient\\r\\n            0, // ether value\\r\\n            add(_calldata, 0x20), // inloc\\r\\n            mload(_calldata), // inlen\\r\\n            0, // outloc\\r\\n            0 // outlen\\r\\n            )\\r\\n        // limit our copy to 256 bytes\\r\\n            _toCopy := returndatasize()\\r\\n            if gt(_toCopy, _maxCopy) {\\r\\n                _toCopy := _maxCopy\\r\\n            }\\r\\n        // Store the length of the copied bytes\\r\\n            mstore(_returnData, _toCopy)\\r\\n        // copy the bytes from returndata[0:_toCopy]\\r\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\r\\n        }\\r\\n        return (_success, _returnData);\\r\\n    }\\r\\n\\r\\n    /// @notice Use when you _really_ really _really_ don't trust the called\\r\\n    /// contract. This prevents the called contract from causing reversion of\\r\\n    /// the caller in as many ways as we can.\\r\\n    /// @dev The main difference between this and a solidity low-level call is\\r\\n    /// that we limit the number of bytes that the callee can cause to be\\r\\n    /// copied to caller memory. This prevents stupid things like malicious\\r\\n    /// contracts returning 10,000,000 bytes causing a local OOG when copying\\r\\n    /// to memory.\\r\\n    /// @param _target The address to call\\r\\n    /// @param _gas The amount of gas to forward to the remote contract\\r\\n    /// @param _maxCopy The maximum number of bytes of returndata to copy\\r\\n    /// to memory.\\r\\n    /// @param _calldata The data to send to the remote contract\\r\\n    /// @return success and returndata, as `.call()`. Returndata is capped to\\r\\n    /// `_maxCopy` bytes.\\r\\n    function excessivelySafeStaticCall(\\r\\n        address _target,\\r\\n        uint256 _gas,\\r\\n        uint16 _maxCopy,\\r\\n        bytes memory _calldata\\r\\n    ) internal view returns (bool, bytes memory) {\\r\\n        // set up for assembly call\\r\\n        uint256 _toCopy;\\r\\n        bool _success;\\r\\n        bytes memory _returnData = new bytes(_maxCopy);\\r\\n        // dispatch message to recipient\\r\\n        // by assembly calling \\\"handle\\\" function\\r\\n        // we call via assembly to avoid memcopying a very large returndata\\r\\n        // returned by a malicious contract\\r\\n        assembly {\\r\\n            _success := staticcall(\\r\\n            _gas, // gas\\r\\n            _target, // recipient\\r\\n            add(_calldata, 0x20), // inloc\\r\\n            mload(_calldata), // inlen\\r\\n            0, // outloc\\r\\n            0 // outlen\\r\\n            )\\r\\n        // limit our copy to 256 bytes\\r\\n            _toCopy := returndatasize()\\r\\n            if gt(_toCopy, _maxCopy) {\\r\\n                _toCopy := _maxCopy\\r\\n            }\\r\\n        // Store the length of the copied bytes\\r\\n            mstore(_returnData, _toCopy)\\r\\n        // copy the bytes from returndata[0:_toCopy]\\r\\n            returndatacopy(add(_returnData, 0x20), 0, _toCopy)\\r\\n        }\\r\\n        return (_success, _returnData);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Swaps function selectors in encoded contract calls\\r\\n     * @dev Allows reuse of encoded calldata for functions with identical\\r\\n     * argument types but different names. It simply swaps out the first 4 bytes\\r\\n     * for the new selector. This function modifies memory in place, and should\\r\\n     * only be used with caution.\\r\\n     * @param _newSelector The new 4-byte selector\\r\\n     * @param _buf The encoded contract args\\r\\n     */\\r\\n    function swapSelector(bytes4 _newSelector, bytes memory _buf)\\r\\n    internal\\r\\n    pure\\r\\n    {\\r\\n        require(_buf.length >= 4);\\r\\n        uint256 _mask = LOW_28_MASK;\\r\\n        assembly {\\r\\n        // load the first word of\\r\\n            let _word := mload(add(_buf, 0x20))\\r\\n        // mask out the top 4 bytes\\r\\n        // /x\\r\\n            _word := and(_word, _mask)\\r\\n            _word := or(_newSelector, _word)\\r\\n            mstore(add(_buf, 0x20), _word)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7255c64d2c753f4c52c9654fa052744cd9ee368ac9bd41334d43f1ab83c9d01d\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002dbb38038062002dbb8339810160408190526200003491620000dd565b8180620000413362000070565b6001600160a01b031660805250620000598162000070565b50506005805461ff00191661010017905562000115565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000d857600080fd5b919050565b60008060408385031215620000f157600080fd5b620000fc83620000c0565b91506200010c60208401620000c0565b90509250929050565b608051612c5262000169600039600081816104ca0152818161062c0152818161087b0152818161096b01528181610a8e01528181610dfb01528181610fe9015281816114740152611d2f0152612c526000f3fe6080604052600436106101d75760003560e01c8063950c8a7411610102578063cbed8b9c11610095578063eb8d72b711610064578063eb8d72b7146105af578063ed629c5c146105cf578063f2fde38b146105e9578063f5ecbdbc1461060957600080fd5b8063cbed8b9c1461053c578063d1deba1f1461055c578063df2a5b3b1461056f578063eab45d9c1461058f57600080fd5b8063af3fb21c116100d1578063af3fb21c146104a3578063b353aaa7146104b8578063baf3292d146104ec578063c0d4e3241461050c57600080fd5b8063950c8a74146104305780639f38369a146104505780639f980b8014610470578063a6c3d1651461048357600080fd5b80635b8c41e61161017a5780637533d788116101495780637533d788146103795780637f377aed146103a65780638cfd8f5c146103c65780638da5cb5b146103fe57600080fd5b80635b8c41e6146102d657806366ad5c8a146103255780636e9cbc8614610345578063715018a61461036457600080fd5b806310ddb137116101b657806310ddb1371461023e5780633d8b38f61461025e57806342d65a8d1461029357806344770515146102b357600080fd5b80621d3567146101dc57806307e0db17146101fe578063097847821461021e575b600080fd5b3480156101e857600080fd5b506101fc6101f7366004611e7b565b610629565b005b34801561020a57600080fd5b506101fc610219366004611f10565b61085a565b34801561022a57600080fd5b506101fc610239366004611f52565b6108e3565b34801561024a57600080fd5b506101fc610259366004611f10565b61094a565b34801561026a57600080fd5b5061027e610279366004611f89565b6109a2565b60405190151581526020015b60405180910390f35b34801561029f57600080fd5b506101fc6102ae366004611f89565b610a6f565b3480156102bf57600080fd5b506102c8600081565b60405190815260200161028a565b3480156102e257600080fd5b506102c86102f13660046120a0565b6004602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561033157600080fd5b506101fc610340366004611e7b565b610af5565b34801561035157600080fd5b5060055461027e90610100900460ff1681565b34801561037057600080fd5b506101fc610bd1565b34801561038557600080fd5b50610399610394366004611f10565b610be5565b60405161028a919061215b565b3480156103b257600080fd5b506101fc6103c136600461216e565b610c7f565b3480156103d257600080fd5b506102c86103e136600461218b565b600260209081526000928352604080842090915290825290205481565b34801561040a57600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161028a565b34801561043c57600080fd5b50600354610418906001600160a01b031681565b34801561045c57600080fd5b5061039961046b366004611f10565b610ce8565b6101fc61047e3660046121dc565b610df7565b34801561048f57600080fd5b506101fc61049e366004611f89565b610ee4565b3480156104af57600080fd5b506102c8600181565b3480156104c457600080fd5b506104187f000000000000000000000000000000000000000000000000000000000000000081565b3480156104f857600080fd5b506101fc6105073660046122e8565b610f6d565b34801561051857600080fd5b5061027e6105273660046122e8565b60066020526000908152604090205460ff1681565b34801561054857600080fd5b506101fc610557366004612303565b610fca565b6101fc61056a366004611e7b565b61105f565b34801561057b57600080fd5b506101fc61058a366004612375565b611275565b34801561059b57600080fd5b506101fc6105aa36600461216e565b611327565b3480156105bb57600080fd5b506101fc6105ca366004611f89565b611370565b3480156105db57600080fd5b5060055461027e9060ff1681565b3480156105f557600080fd5b506101fc6106043660046122e8565b6113ca565b34801561061557600080fd5b506103996106243660046123b6565b611443565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106a65760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff8616600090815260016020526040812080546106c490612405565b80601f01602080910402602001604051908101604052809291908181526020018280546106f090612405565b801561073d5780601f106107125761010080835404028352916020019161073d565b820191906000526020600020905b81548152906001019060200180831161072057829003601f168201915b50505050509050805186869050148015610758575060008151115b8015610780575080516020820120604051610776908890889061243f565b6040518091039020145b6107db5760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b606482015260840161069d565b6108518787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506114f492505050565b50505050505050565b61086261156d565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b1580156108c857600080fd5b505af11580156108dc573d6000803e3d6000fd5b5050505050565b6108eb61156d565b6001600160a01b038216600081815260066020908152604091829020805460ff191685151590811790915591519182527fd27d7d1acad2036ae6abd569d0fe50a81b4675a1d12a9b181018760f49476c24910160405180910390a25050565b61095261156d565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb137906024016108ae565b61ffff8316600090815260016020526040812080548291906109c390612405565b80601f01602080910402602001604051908101604052809291908181526020018280546109ef90612405565b8015610a3c5780601f10610a1157610100808354040283529160200191610a3c565b820191906000526020600020905b815481529060010190602001808311610a1f57829003601f168201915b505050505090508383604051610a5392919061243f565b60405180910390208180519060200120149150505b9392505050565b610a7761156d565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d90610ac790869086908690600401612478565b600060405180830381600087803b158015610ae157600080fd5b505af1158015610851573d6000803e3d6000fd5b333014610b535760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b606482015260840161069d565b610bc98686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152899350915087908790819084018382808284376000920191909152506115c792505050565b505050505050565b610bd961156d565b610be36000611782565b565b60016020526000908152604090208054610bfe90612405565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2a90612405565b8015610c775780601f10610c4c57610100808354040283529160200191610c77565b820191906000526020600020905b815481529060010190602001808311610c5a57829003601f168201915b505050505081565b610c8761156d565b6005546040805161010090920460ff161515825282151560208301527f93cc0321a0bc88c6711b0c3cbbd280643823d12208bc958e2deafbbebc8f4ee2910160405180910390a1600580549115156101000261ff0019909216919091179055565b61ffff8116600090815260016020526040812080546060929190610d0b90612405565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3790612405565b8015610d845780601f10610d5957610100808354040283529160200191610d84565b820191906000526020600020905b815481529060010190602001808311610d6757829003601f168201915b505050505090508051600003610ddc5760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f7264000000604482015260640161069d565b610a68600060148351610def91906124ac565b8391906117d2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633408e4706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7b91906124c3565b61ffff1690508461ffff168103610ed45760405162461bcd60e51b815260206004820152601960248201527f53474c50726f78793a20436861696e206e6f742076616c696400000000000000604482015260640161069d565b6108dc33868686336000886118df565b610eec61156d565b818130604051602001610f01939291906124e0565b60408051601f1981840301815291815261ffff8516600090815260016020522090610f2c9082612551565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051610f6093929190612478565b60405180910390a1505050565b610f7561156d565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b906020015b60405180910390a150565b610fd261156d565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c906110269088908890889088908890600401612610565b600060405180830381600087803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b505050505050505050565b61ffff86166000908152600460205260408082209051611082908890889061243f565b90815260408051602092819003830190206001600160401b038716600090815292529020549050806111025760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b606482015260840161069d565b80838360405161111392919061243f565b6040518091039020146111725760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b606482015260840161069d565b61ffff87166000908152600460205260408082209051611195908990899061243f565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f8801829004820283018201905286825261122d918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506115c792505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e58787878785604051611264959493929190612649565b60405180910390a150505050505050565b61127d61156d565b600081116112c55760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b604482015260640161069d565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001610f60565b61132f61156d565b6005805460ff19168215159081179091556040519081527f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a490602001610fbf565b61137861156d565b61ffff83166000908152600160205260409020611396828483612684565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051610f6093929190612478565b6113d261156d565b6001600160a01b0381166114375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161069d565b61144081611782565b50565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa1580156114c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114eb9190810190612793565b95945050505050565b6000806115575a60966366ad5c8a60e01b8989898960405160240161151c94939291906127cf565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190611a0b565b9150915081610bc957610bc98686868685611a95565b6000546001600160a01b03163314610be35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161069d565b6000806000838060200190518101906115e0919061280d565b6014830151600554939650919450925090610100900460ff161561164c576001600160a01b038116301461164c5760405162461bcd60e51b815260206004820152601360248201527253474c50726f78793a206e6f742070726f787960681b604482015260640161069d565b60148301516001600160a01b03811660009081526006602052604090205460ff166116b95760405162461bcd60e51b815260206004820152601d60248201527f53474c50726f78793a20496e76616c69642053696e67756c6172697479000000604482015260640161069d565b60405163aa7d966560e01b81526001600160a01b0382169063aa7d9665906116e8908690600190600401612959565b6000604051808303816000875af1158015611707573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261172f9190810190612a1c565b5050806001600160a01b03168961ffff167fe56f9bcb2a90b3dc97f0814c287246469fc5c7050a6022ad21b2fe9058129c818860405161176f919061215b565b60405180910390a3505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060816117e081601f612ae0565b101561181f5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015260640161069d565b6118298284612ae0565b8451101561186d5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015260640161069d565b60608215801561188c57604051915060008252602082016040526118d6565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156118c55780518352602092830192016118ad565b5050858452601f01601f1916604052505b50949350505050565b6040516bffffffffffffffffffffffff193060601b16602082015260009060340160408051601f19818403018152908290526119219188908890602001612af8565b60408051601f1981840301815291905260055490915060ff16156119525761194d876001846000611b32565b6119ad565b8151156119ad5760405162461bcd60e51b8152602060048201526024808201527f4c7a4170703a205f61646170746572506172616d73206d75737420626520656d604482015263383a3c9760e11b606482015260840161069d565b6119bb878286868634611c11565b876001600160a01b03168761ffff167fd3b01b57b25c5a506ceef68a2e5ce63cf91fe09d5270a8bb49839a64d5b1b1f7836040516119f9919061215b565b60405180910390a35050505050505050565b6000606060008060008661ffff166001600160401b03811115611a3057611a30611fdd565b6040519080825280601f01601f191660200182016040528015611a5a576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115611a7c578692505b828152826000602083013e909890975095505050505050565b8180519060200120600460008761ffff1661ffff16815260200190815260200160002085604051611ac69190612b3b565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90611b239087908790879087908790612b57565b60405180910390a15050505050565b6000611b3d83611dab565b61ffff808716600090815260026020908152604080832093891683529290529081205491925090611b6f908490612ae0565b905060008111611bc15760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f7420736574000000000000604482015260640161069d565b80821015610bc95760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f770000000000604482015260640161069d565b61ffff861660009081526001602052604081208054611c2f90612405565b80601f0160208091040260200160405190810160405280929190818152602001828054611c5b90612405565b8015611ca85780601f10611c7d57610100808354040283529160200191611ca8565b820191906000526020600020905b815481529060010190602001808311611c8b57829003601f168201915b505050505090508051600003611d195760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b606482015260840161069d565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c5803100908490611d70908b9086908c908c908c908c90600401612bb5565b6000604051808303818588803b158015611d8957600080fd5b505af1158015611d9d573d6000803e3d6000fd5b505050505050505050505050565b6000602282511015611dff5760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d7300000000604482015260640161069d565b506022015190565b61ffff8116811461144057600080fd5b60008083601f840112611e2957600080fd5b5081356001600160401b03811115611e4057600080fd5b602083019150836020828501011115611e5857600080fd5b9250929050565b80356001600160401b0381168114611e7657600080fd5b919050565b60008060008060008060808789031215611e9457600080fd5b8635611e9f81611e07565b955060208701356001600160401b0380821115611ebb57600080fd5b611ec78a838b01611e17565b9097509550859150611edb60408a01611e5f565b94506060890135915080821115611ef157600080fd5b50611efe89828a01611e17565b979a9699509497509295939492505050565b600060208284031215611f2257600080fd5b8135610a6881611e07565b80356001600160a01b0381168114611e7657600080fd5b801515811461144057600080fd5b60008060408385031215611f6557600080fd5b611f6e83611f2d565b91506020830135611f7e81611f44565b809150509250929050565b600080600060408486031215611f9e57600080fd5b8335611fa981611e07565b925060208401356001600160401b03811115611fc457600080fd5b611fd086828701611e17565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561201b5761201b611fdd565b604052919050565b60006001600160401b0382111561203c5761203c611fdd565b50601f01601f191660200190565b600082601f83011261205b57600080fd5b813561206e61206982612023565b611ff3565b81815284602083860101111561208357600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156120b557600080fd5b83356120c081611e07565b925060208401356001600160401b038111156120db57600080fd5b6120e78682870161204a565b9250506120f660408501611e5f565b90509250925092565b60005b8381101561211a578181015183820152602001612102565b83811115612129576000848401525b50505050565b600081518084526121478160208601602086016120ff565b601f01601f19169290920160200192915050565b602081526000610a68602083018461212f565b60006020828403121561218057600080fd5b8135610a6881611f44565b6000806040838503121561219e57600080fd5b82356121a981611e07565b91506020830135611f7e81611e07565b60006001600160401b038211156121d2576121d2611fdd565b5060051b60200190565b600080600080608085870312156121f257600080fd5b84356121fd81611e07565b93506020858101356001600160401b038082111561221a57600080fd5b61222689838a0161204a565b9550604088013591508082111561223c57600080fd5b818801915088601f83011261225057600080fd5b813561225e612069826121b9565b81815260059190911b8301840190848101908b83111561227d57600080fd5b8585015b838110156122b5578035858111156122995760008081fd5b6122a78e89838a010161204a565b845250918601918601612281565b509650505060608801359250808311156122ce57600080fd5b50506122dc8782880161204a565b91505092959194509250565b6000602082840312156122fa57600080fd5b610a6882611f2d565b60008060008060006080868803121561231b57600080fd5b853561232681611e07565b9450602086013561233681611e07565b93506040860135925060608601356001600160401b0381111561235857600080fd5b61236488828901611e17565b969995985093965092949392505050565b60008060006060848603121561238a57600080fd5b833561239581611e07565b925060208401356123a581611e07565b929592945050506040919091013590565b600080600080608085870312156123cc57600080fd5b84356123d781611e07565b935060208501356123e781611e07565b92506123f560408601611f2d565b9396929550929360600135925050565b600181811c9082168061241957607f821691505b60208210810361243957634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff841681526040602082015260006114eb60408301848661244f565b634e487b7160e01b600052601160045260246000fd5b6000828210156124be576124be612496565b500390565b6000602082840312156124d557600080fd5b8151610a6881611e07565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b601f82111561254c57600081815260208120601f850160051c8101602086101561252d5750805b601f850160051c820191505b81811015610bc957828155600101612539565b505050565b81516001600160401b0381111561256a5761256a611fdd565b61257e816125788454612405565b84612506565b602080601f8311600181146125b3576000841561259b5750858301515b600019600386901b1c1916600185901b178555610bc9565b600085815260208120601f198616915b828110156125e2578886015182559484019460019091019084016125c3565b50858210156126005787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061ffff80881683528087166020840152508460408301526080606083015261263e60808301848661244f565b979650505050505050565b61ffff8616815260806020820152600061266760808301868861244f565b6001600160401b0394909416604083015250606001529392505050565b6001600160401b0383111561269b5761269b611fdd565b6126af836126a98354612405565b83612506565b6000601f8411600181146126e357600085156126cb5750838201355b600019600387901b1c1916600186901b1783556108dc565b600083815260209020601f19861690835b8281101561271457868501358255602094850194600190920191016126f4565b50868210156127315760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600061275161206984612023565b905082815283838301111561276557600080fd5b610a688360208301846120ff565b600082601f83011261278457600080fd5b610a6883835160208501612743565b6000602082840312156127a557600080fd5b81516001600160401b038111156127bb57600080fd5b6127c784828501612773565b949350505050565b61ffff851681526080602082015260006127ec608083018661212f565b6001600160401b0385166040840152828103606084015261263e818561212f565b60008060006060848603121561282257600080fd5b83516001600160401b038082111561283957600080fd5b61284587838801612773565b945060209150818601518181111561285c57600080fd5b61286888828901612773565b94505060408601518181111561287d57600080fd5b8601601f8101881361288e57600080fd5b805161289c612069826121b9565b81815260059190911b8201840190848101908a8311156128bb57600080fd5b8584015b838110156128f3578051868111156128d75760008081fd5b6128e58d8983890101612773565b8452509186019186016128bf565b508096505050505050509250925092565b600081518084526020808501808196508360051b8101915082860160005b8581101561294c57828403895261293a84835161212f565b98850198935090840190600101612922565b5091979650505050505050565b60408152600061296c6040830185612904565b905082151560208301529392505050565b600082601f83011261298e57600080fd5b8151602061299e612069836121b9565b82815260059290921b840181019181810190868411156129bd57600080fd5b8286015b84811015612a115780516001600160401b038111156129e05760008081fd5b8701603f810189136129f25760008081fd5b612a03898683015160408401612743565b8452509183019183016129c1565b509695505050505050565b60008060408385031215612a2f57600080fd5b82516001600160401b0380821115612a4657600080fd5b818501915085601f830112612a5a57600080fd5b81516020612a6a612069836121b9565b82815260059290921b84018101918181019089841115612a8957600080fd5b948201945b83861015612ab0578551612aa181611f44565b82529482019490820190612a8e565b91880151919650909350505080821115612ac957600080fd5b50612ad68582860161297d565b9150509250929050565b60008219821115612af357612af3612496565b500190565b606081526000612b0b606083018661212f565b8281036020840152612b1d818661212f565b90508281036040840152612b318185612904565b9695505050505050565b60008251612b4d8184602087016120ff565b9190910192915050565b61ffff8616815260a060208201526000612b7460a083018761212f565b6001600160401b03861660408401528281036060840152612b95818661212f565b90508281036080840152612ba9818561212f565b98975050505050505050565b61ffff8716815260c060208201526000612bd260c083018861212f565b8281036040840152612be4818861212f565b6001600160a01b0387811660608601528616608085015283810360a08501529050612c0f818561212f565b999850505050505050505056fea264697066735822122028f65928572f5fe3c670c82f620c0b25f12cf5388a288efab33e3860d40c956f64736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106101d75760003560e01c8063950c8a7411610102578063cbed8b9c11610095578063eb8d72b711610064578063eb8d72b7146105af578063ed629c5c146105cf578063f2fde38b146105e9578063f5ecbdbc1461060957600080fd5b8063cbed8b9c1461053c578063d1deba1f1461055c578063df2a5b3b1461056f578063eab45d9c1461058f57600080fd5b8063af3fb21c116100d1578063af3fb21c146104a3578063b353aaa7146104b8578063baf3292d146104ec578063c0d4e3241461050c57600080fd5b8063950c8a74146104305780639f38369a146104505780639f980b8014610470578063a6c3d1651461048357600080fd5b80635b8c41e61161017a5780637533d788116101495780637533d788146103795780637f377aed146103a65780638cfd8f5c146103c65780638da5cb5b146103fe57600080fd5b80635b8c41e6146102d657806366ad5c8a146103255780636e9cbc8614610345578063715018a61461036457600080fd5b806310ddb137116101b657806310ddb1371461023e5780633d8b38f61461025e57806342d65a8d1461029357806344770515146102b357600080fd5b80621d3567146101dc57806307e0db17146101fe578063097847821461021e575b600080fd5b3480156101e857600080fd5b506101fc6101f7366004611e7b565b610629565b005b34801561020a57600080fd5b506101fc610219366004611f10565b61085a565b34801561022a57600080fd5b506101fc610239366004611f52565b6108e3565b34801561024a57600080fd5b506101fc610259366004611f10565b61094a565b34801561026a57600080fd5b5061027e610279366004611f89565b6109a2565b60405190151581526020015b60405180910390f35b34801561029f57600080fd5b506101fc6102ae366004611f89565b610a6f565b3480156102bf57600080fd5b506102c8600081565b60405190815260200161028a565b3480156102e257600080fd5b506102c86102f13660046120a0565b6004602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561033157600080fd5b506101fc610340366004611e7b565b610af5565b34801561035157600080fd5b5060055461027e90610100900460ff1681565b34801561037057600080fd5b506101fc610bd1565b34801561038557600080fd5b50610399610394366004611f10565b610be5565b60405161028a919061215b565b3480156103b257600080fd5b506101fc6103c136600461216e565b610c7f565b3480156103d257600080fd5b506102c86103e136600461218b565b600260209081526000928352604080842090915290825290205481565b34801561040a57600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161028a565b34801561043c57600080fd5b50600354610418906001600160a01b031681565b34801561045c57600080fd5b5061039961046b366004611f10565b610ce8565b6101fc61047e3660046121dc565b610df7565b34801561048f57600080fd5b506101fc61049e366004611f89565b610ee4565b3480156104af57600080fd5b506102c8600181565b3480156104c457600080fd5b506104187f000000000000000000000000000000000000000000000000000000000000000081565b3480156104f857600080fd5b506101fc6105073660046122e8565b610f6d565b34801561051857600080fd5b5061027e6105273660046122e8565b60066020526000908152604090205460ff1681565b34801561054857600080fd5b506101fc610557366004612303565b610fca565b6101fc61056a366004611e7b565b61105f565b34801561057b57600080fd5b506101fc61058a366004612375565b611275565b34801561059b57600080fd5b506101fc6105aa36600461216e565b611327565b3480156105bb57600080fd5b506101fc6105ca366004611f89565b611370565b3480156105db57600080fd5b5060055461027e9060ff1681565b3480156105f557600080fd5b506101fc6106043660046122e8565b6113ca565b34801561061557600080fd5b506103996106243660046123b6565b611443565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106a65760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff8616600090815260016020526040812080546106c490612405565b80601f01602080910402602001604051908101604052809291908181526020018280546106f090612405565b801561073d5780601f106107125761010080835404028352916020019161073d565b820191906000526020600020905b81548152906001019060200180831161072057829003601f168201915b50505050509050805186869050148015610758575060008151115b8015610780575080516020820120604051610776908890889061243f565b6040518091039020145b6107db5760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f6044820152651b9d1c9858dd60d21b606482015260840161069d565b6108518787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506114f492505050565b50505050505050565b61086261156d565b6040516307e0db1760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b1580156108c857600080fd5b505af11580156108dc573d6000803e3d6000fd5b5050505050565b6108eb61156d565b6001600160a01b038216600081815260066020908152604091829020805460ff191685151590811790915591519182527fd27d7d1acad2036ae6abd569d0fe50a81b4675a1d12a9b181018760f49476c24910160405180910390a25050565b61095261156d565b6040516310ddb13760e01b815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb137906024016108ae565b61ffff8316600090815260016020526040812080548291906109c390612405565b80601f01602080910402602001604051908101604052809291908181526020018280546109ef90612405565b8015610a3c5780601f10610a1157610100808354040283529160200191610a3c565b820191906000526020600020905b815481529060010190602001808311610a1f57829003601f168201915b505050505090508383604051610a5392919061243f565b60405180910390208180519060200120149150505b9392505050565b610a7761156d565b6040516342d65a8d60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d90610ac790869086908690600401612478565b600060405180830381600087803b158015610ae157600080fd5b505af1158015610851573d6000803e3d6000fd5b333014610b535760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d7573742062656044820152650204c7a4170760d41b606482015260840161069d565b610bc98686868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152899350915087908790819084018382808284376000920191909152506115c792505050565b505050505050565b610bd961156d565b610be36000611782565b565b60016020526000908152604090208054610bfe90612405565b80601f0160208091040260200160405190810160405280929190818152602001828054610c2a90612405565b8015610c775780601f10610c4c57610100808354040283529160200191610c77565b820191906000526020600020905b815481529060010190602001808311610c5a57829003601f168201915b505050505081565b610c8761156d565b6005546040805161010090920460ff161515825282151560208301527f93cc0321a0bc88c6711b0c3cbbd280643823d12208bc958e2deafbbebc8f4ee2910160405180910390a1600580549115156101000261ff0019909216919091179055565b61ffff8116600090815260016020526040812080546060929190610d0b90612405565b80601f0160208091040260200160405190810160405280929190818152602001828054610d3790612405565b8015610d845780601f10610d5957610100808354040283529160200191610d84565b820191906000526020600020905b815481529060010190602001808311610d6757829003601f168201915b505050505090508051600003610ddc5760405162461bcd60e51b815260206004820152601d60248201527f4c7a4170703a206e6f20747275737465642070617468207265636f7264000000604482015260640161069d565b610a68600060148351610def91906124ac565b8391906117d2565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633408e4706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7b91906124c3565b61ffff1690508461ffff168103610ed45760405162461bcd60e51b815260206004820152601960248201527f53474c50726f78793a20436861696e206e6f742076616c696400000000000000604482015260640161069d565b6108dc33868686336000886118df565b610eec61156d565b818130604051602001610f01939291906124e0565b60408051601f1981840301815291815261ffff8516600090815260016020522090610f2c9082612551565b507f8c0400cfe2d1199b1a725c78960bcc2a344d869b80590d0f2bd005db15a572ce838383604051610f6093929190612478565b60405180910390a1505050565b610f7561156d565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527f5db758e995a17ec1ad84bdef7e8c3293a0bd6179bcce400dff5d4c3d87db726b906020015b60405180910390a150565b610fd261156d565b6040516332fb62e760e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c906110269088908890889088908890600401612610565b600060405180830381600087803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b505050505050505050565b61ffff86166000908152600460205260408082209051611082908890889061243f565b90815260408051602092819003830190206001600160401b038716600090815292529020549050806111025760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201526261676560e81b606482015260840161069d565b80838360405161111392919061243f565b6040518091039020146111725760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f616044820152601960fa1b606482015260840161069d565b61ffff87166000908152600460205260408082209051611195908990899061243f565b90815260408051602092819003830181206001600160401b038916600090815290845282902093909355601f8801829004820283018201905286825261122d918991899089908190840183828082843760009201919091525050604080516020601f8a018190048102820181019092528881528a9350915088908890819084018382808284376000920191909152506115c792505050565b7fc264d91f3adc5588250e1551f547752ca0cfa8f6b530d243b9f9f4cab10ea8e58787878785604051611264959493929190612649565b60405180910390a150505050505050565b61127d61156d565b600081116112c55760405162461bcd60e51b81526020600482015260156024820152744c7a4170703a20696e76616c6964206d696e47617360581b604482015260640161069d565b61ffff83811660008181526002602090815260408083209487168084529482529182902085905581519283528201929092529081018290527f9d5c7c0b934da8fefa9c7760c98383778a12dfbfc0c3b3106518f43fb9508ac090606001610f60565b61132f61156d565b6005805460ff19168215159081179091556040519081527f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a490602001610fbf565b61137861156d565b61ffff83166000908152600160205260409020611396828483612684565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051610f6093929190612478565b6113d261156d565b6001600160a01b0381166114375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161069d565b61144081611782565b50565b604051633d7b2f6f60e21b815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa1580156114c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114eb9190810190612793565b95945050505050565b6000806115575a60966366ad5c8a60e01b8989898960405160240161151c94939291906127cf565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915230929190611a0b565b9150915081610bc957610bc98686868685611a95565b6000546001600160a01b03163314610be35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161069d565b6000806000838060200190518101906115e0919061280d565b6014830151600554939650919450925090610100900460ff161561164c576001600160a01b038116301461164c5760405162461bcd60e51b815260206004820152601360248201527253474c50726f78793a206e6f742070726f787960681b604482015260640161069d565b60148301516001600160a01b03811660009081526006602052604090205460ff166116b95760405162461bcd60e51b815260206004820152601d60248201527f53474c50726f78793a20496e76616c69642053696e67756c6172697479000000604482015260640161069d565b60405163aa7d966560e01b81526001600160a01b0382169063aa7d9665906116e8908690600190600401612959565b6000604051808303816000875af1158015611707573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261172f9190810190612a1c565b5050806001600160a01b03168961ffff167fe56f9bcb2a90b3dc97f0814c287246469fc5c7050a6022ad21b2fe9058129c818860405161176f919061215b565b60405180910390a3505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6060816117e081601f612ae0565b101561181f5760405162461bcd60e51b815260206004820152600e60248201526d736c6963655f6f766572666c6f7760901b604482015260640161069d565b6118298284612ae0565b8451101561186d5760405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b604482015260640161069d565b60608215801561188c57604051915060008252602082016040526118d6565b6040519150601f8416801560200281840101858101878315602002848b0101015b818310156118c55780518352602092830192016118ad565b5050858452601f01601f1916604052505b50949350505050565b6040516bffffffffffffffffffffffff193060601b16602082015260009060340160408051601f19818403018152908290526119219188908890602001612af8565b60408051601f1981840301815291905260055490915060ff16156119525761194d876001846000611b32565b6119ad565b8151156119ad5760405162461bcd60e51b8152602060048201526024808201527f4c7a4170703a205f61646170746572506172616d73206d75737420626520656d604482015263383a3c9760e11b606482015260840161069d565b6119bb878286868634611c11565b876001600160a01b03168761ffff167fd3b01b57b25c5a506ceef68a2e5ce63cf91fe09d5270a8bb49839a64d5b1b1f7836040516119f9919061215b565b60405180910390a35050505050505050565b6000606060008060008661ffff166001600160401b03811115611a3057611a30611fdd565b6040519080825280601f01601f191660200182016040528015611a5a576020820181803683370190505b50905060008087516020890160008d8df191503d925086831115611a7c578692505b828152826000602083013e909890975095505050505050565b8180519060200120600460008761ffff1661ffff16815260200190815260200160002085604051611ac69190612b3b565b9081526040805191829003602090810183206001600160401b0388166000908152915220919091557fe183f33de2837795525b4792ca4cd60535bd77c53b7e7030060bfcf5734d6b0c90611b239087908790879087908790612b57565b60405180910390a15050505050565b6000611b3d83611dab565b61ffff808716600090815260026020908152604080832093891683529290529081205491925090611b6f908490612ae0565b905060008111611bc15760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f7420736574000000000000604482015260640161069d565b80821015610bc95760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f770000000000604482015260640161069d565b61ffff861660009081526001602052604081208054611c2f90612405565b80601f0160208091040260200160405190810160405280929190818152602001828054611c5b90612405565b8015611ca85780601f10611c7d57610100808354040283529160200191611ca8565b820191906000526020600020905b815481529060010190602001808311611c8b57829003601f168201915b505050505090508051600003611d195760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201526f61207472757374656420736f7572636560801b606482015260840161069d565b60405162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c5803100908490611d70908b9086908c908c908c908c90600401612bb5565b6000604051808303818588803b158015611d8957600080fd5b505af1158015611d9d573d6000803e3d6000fd5b505050505050505050505050565b6000602282511015611dff5760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c69642061646170746572506172616d7300000000604482015260640161069d565b506022015190565b61ffff8116811461144057600080fd5b60008083601f840112611e2957600080fd5b5081356001600160401b03811115611e4057600080fd5b602083019150836020828501011115611e5857600080fd5b9250929050565b80356001600160401b0381168114611e7657600080fd5b919050565b60008060008060008060808789031215611e9457600080fd5b8635611e9f81611e07565b955060208701356001600160401b0380821115611ebb57600080fd5b611ec78a838b01611e17565b9097509550859150611edb60408a01611e5f565b94506060890135915080821115611ef157600080fd5b50611efe89828a01611e17565b979a9699509497509295939492505050565b600060208284031215611f2257600080fd5b8135610a6881611e07565b80356001600160a01b0381168114611e7657600080fd5b801515811461144057600080fd5b60008060408385031215611f6557600080fd5b611f6e83611f2d565b91506020830135611f7e81611f44565b809150509250929050565b600080600060408486031215611f9e57600080fd5b8335611fa981611e07565b925060208401356001600160401b03811115611fc457600080fd5b611fd086828701611e17565b9497909650939450505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561201b5761201b611fdd565b604052919050565b60006001600160401b0382111561203c5761203c611fdd565b50601f01601f191660200190565b600082601f83011261205b57600080fd5b813561206e61206982612023565b611ff3565b81815284602083860101111561208357600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156120b557600080fd5b83356120c081611e07565b925060208401356001600160401b038111156120db57600080fd5b6120e78682870161204a565b9250506120f660408501611e5f565b90509250925092565b60005b8381101561211a578181015183820152602001612102565b83811115612129576000848401525b50505050565b600081518084526121478160208601602086016120ff565b601f01601f19169290920160200192915050565b602081526000610a68602083018461212f565b60006020828403121561218057600080fd5b8135610a6881611f44565b6000806040838503121561219e57600080fd5b82356121a981611e07565b91506020830135611f7e81611e07565b60006001600160401b038211156121d2576121d2611fdd565b5060051b60200190565b600080600080608085870312156121f257600080fd5b84356121fd81611e07565b93506020858101356001600160401b038082111561221a57600080fd5b61222689838a0161204a565b9550604088013591508082111561223c57600080fd5b818801915088601f83011261225057600080fd5b813561225e612069826121b9565b81815260059190911b8301840190848101908b83111561227d57600080fd5b8585015b838110156122b5578035858111156122995760008081fd5b6122a78e89838a010161204a565b845250918601918601612281565b509650505060608801359250808311156122ce57600080fd5b50506122dc8782880161204a565b91505092959194509250565b6000602082840312156122fa57600080fd5b610a6882611f2d565b60008060008060006080868803121561231b57600080fd5b853561232681611e07565b9450602086013561233681611e07565b93506040860135925060608601356001600160401b0381111561235857600080fd5b61236488828901611e17565b969995985093965092949392505050565b60008060006060848603121561238a57600080fd5b833561239581611e07565b925060208401356123a581611e07565b929592945050506040919091013590565b600080600080608085870312156123cc57600080fd5b84356123d781611e07565b935060208501356123e781611e07565b92506123f560408601611f2d565b9396929550929360600135925050565b600181811c9082168061241957607f821691505b60208210810361243957634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff841681526040602082015260006114eb60408301848661244f565b634e487b7160e01b600052601160045260246000fd5b6000828210156124be576124be612496565b500390565b6000602082840312156124d557600080fd5b8151610a6881611e07565b8284823760609190911b6bffffffffffffffffffffffff19169101908152601401919050565b601f82111561254c57600081815260208120601f850160051c8101602086101561252d5750805b601f850160051c820191505b81811015610bc957828155600101612539565b505050565b81516001600160401b0381111561256a5761256a611fdd565b61257e816125788454612405565b84612506565b602080601f8311600181146125b3576000841561259b5750858301515b600019600386901b1c1916600185901b178555610bc9565b600085815260208120601f198616915b828110156125e2578886015182559484019460019091019084016125c3565b50858210156126005787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600061ffff80881683528087166020840152508460408301526080606083015261263e60808301848661244f565b979650505050505050565b61ffff8616815260806020820152600061266760808301868861244f565b6001600160401b0394909416604083015250606001529392505050565b6001600160401b0383111561269b5761269b611fdd565b6126af836126a98354612405565b83612506565b6000601f8411600181146126e357600085156126cb5750838201355b600019600387901b1c1916600186901b1783556108dc565b600083815260209020601f19861690835b8281101561271457868501358255602094850194600190920191016126f4565b50868210156127315760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600061275161206984612023565b905082815283838301111561276557600080fd5b610a688360208301846120ff565b600082601f83011261278457600080fd5b610a6883835160208501612743565b6000602082840312156127a557600080fd5b81516001600160401b038111156127bb57600080fd5b6127c784828501612773565b949350505050565b61ffff851681526080602082015260006127ec608083018661212f565b6001600160401b0385166040840152828103606084015261263e818561212f565b60008060006060848603121561282257600080fd5b83516001600160401b038082111561283957600080fd5b61284587838801612773565b945060209150818601518181111561285c57600080fd5b61286888828901612773565b94505060408601518181111561287d57600080fd5b8601601f8101881361288e57600080fd5b805161289c612069826121b9565b81815260059190911b8201840190848101908a8311156128bb57600080fd5b8584015b838110156128f3578051868111156128d75760008081fd5b6128e58d8983890101612773565b8452509186019186016128bf565b508096505050505050509250925092565b600081518084526020808501808196508360051b8101915082860160005b8581101561294c57828403895261293a84835161212f565b98850198935090840190600101612922565b5091979650505050505050565b60408152600061296c6040830185612904565b905082151560208301529392505050565b600082601f83011261298e57600080fd5b8151602061299e612069836121b9565b82815260059290921b840181019181810190868411156129bd57600080fd5b8286015b84811015612a115780516001600160401b038111156129e05760008081fd5b8701603f810189136129f25760008081fd5b612a03898683015160408401612743565b8452509183019183016129c1565b509695505050505050565b60008060408385031215612a2f57600080fd5b82516001600160401b0380821115612a4657600080fd5b818501915085601f830112612a5a57600080fd5b81516020612a6a612069836121b9565b82815260059290921b84018101918181019089841115612a8957600080fd5b948201945b83861015612ab0578551612aa181611f44565b82529482019490820190612a8e565b91880151919650909350505080821115612ac957600080fd5b50612ad68582860161297d565b9150509250929050565b60008219821115612af357612af3612496565b500190565b606081526000612b0b606083018661212f565b8281036020840152612b1d818661212f565b90508281036040840152612b318185612904565b9695505050505050565b60008251612b4d8184602087016120ff565b9190910192915050565b61ffff8616815260a060208201526000612b7460a083018761212f565b6001600160401b03861660408401528281036060840152612b95818661212f565b90508281036080840152612ba9818561212f565b98975050505050505050565b61ffff8716815260c060208201526000612bd260c083018861212f565b8281036040840152612be4818861212f565b6001600160a01b0387811660608601528616608085015283810360a08501529050612c0f818561212f565b999850505050505050505056fea264697066735822122028f65928572f5fe3c670c82f620c0b25f12cf5388a288efab33e3860d40c956f64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_lzEndpoint": "LayerZero endpoint address",
          "_owner": "contract's owner address"
        }
      },
      "executeOnChain(uint16,bytes,bytes[],bytes)": {
        "params": {
          "_adapterParams": "custom adapters",
          "_dstChainId": "te LayerZero destination chain id",
          "_mixologistDstAddress": "destination Singularity address",
          "_sglCalls": "Singularity calls"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setEnforceSameAddress(bool)": {
        "params": {
          "_val": "true/false"
        }
      },
      "setUseCustomAdapterParams(bool)": {
        "params": {
          "_useCustomAdapterParams": "true/false"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateSingularityStatus(address,bool)": {
        "details": "callable by owner",
        "params": {
          "_mixologist": "the Singularity address",
          "_status": "whitelisted/not"
        }
      }
    },
    "title": "Omnichain proxy for Singularity",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "creates a new SGLProxy contract"
      },
      "executeOnChain(uint16,bytes,bytes[],bytes)": {
        "notice": "execute Singularity methods on another chain"
      },
      "setEnforceSameAddress(bool)": {
        "notice": "enforces CREATE2 proxies"
      },
      "setUseCustomAdapterParams(bool)": {
        "notice": "set custom adapter usage status"
      },
      "updateSingularityStatus(address,bool)": {
        "notice": "set whitelist status for Singularity"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2198,
        "contract": "contracts/singularity/SGLProxy.sol:SGLProxy",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 21631,
        "contract": "contracts/singularity/SGLProxy.sol:SGLProxy",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 21637,
        "contract": "contracts/singularity/SGLProxy.sol:SGLProxy",
        "label": "minDstGasLookup",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 21639,
        "contract": "contracts/singularity/SGLProxy.sol:SGLProxy",
        "label": "precrime",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 22124,
        "contract": "contracts/singularity/SGLProxy.sol:SGLProxy",
        "label": "failedMessages",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))"
      },
      {
        "astId": 7528,
        "contract": "contracts/singularity/SGLProxy.sol:SGLProxy",
        "label": "useCustomAdapterParams",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 7530,
        "contract": "contracts/singularity/SGLProxy.sol:SGLProxy",
        "label": "enforceSameAddress",
        "offset": 1,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 7534,
        "contract": "contracts/singularity/SGLProxy.sol:SGLProxy",
        "label": "singularities",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_memory_ptr": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_bytes_memory_ptr",
        "label": "mapping(bytes => mapping(uint64 => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_bytes32)"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32)))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes_memory_ptr,t_mapping(t_uint64,t_bytes32))"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint64,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}