{
  "address": "0xa769093763745a76C7EC8E7B5E7D1FDdc11Fc8ce",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lzEndpoint",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "cloneAddress",
          "type": "address"
        }
      ],
      "name": "LogDeploy",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lzEndpoint",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_salt",
          "type": "bytes32"
        }
      ],
      "name": "deployWithCreate2",
      "outputs": [
        {
          "internalType": "address",
          "name": "cloneAddress",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proxies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcd161e719b526958d3daaf0ad8df999d77634466db85185fac0064368fc90d72",
  "receipt": {
    "to": null,
    "from": "0x40282d3Cf4890D9806BC1853e97a59C93D813653",
    "contractAddress": "0xa769093763745a76C7EC8E7B5E7D1FDdc11Fc8ce",
    "transactionIndex": 23,
    "gasUsed": "2417731",
    "logsBloom": "0x
    "blockHash": "0x3eb13a13e64a17b192c1cd58f8b62a5babf59360a8c2170195632e2865b75f71",
    "transactionHash": "0xcd161e719b526958d3daaf0ad8df999d77634466db85185fac0064368fc90d72",
    "logs": [],
    "blockNumber": 7964128,
    "cumulativeGasUsed": "5112933",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2dd7811012a9b7226eed28d6d4ecf4a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lzEndpoint\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cloneAddress\",\"type\":\"address\"}],\"name\":\"LogDeploy\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lzEndpoint\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_salt\",\"type\":\"bytes32\"}],\"name\":\"deployWithCreate2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"cloneAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proxies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deployWithCreate2(address,bytes32)\":{\"params\":{\"_lzEndpoint\":\"the LayerZero endpoint SGLProxy will be associated with\",\"_salt\":\"CREATE2 salt used to compute the new address\"}}},\"title\":\"SGLProxy factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"creates a new ProxyDeployer contract\"},\"deployWithCreate2(address,bytes32)\":{\"notice\":\"creates a new SGLProxy contract using CREATE2 opcode\"},\"proxiesCount()\":{\"notice\":\"returns proxies count\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/singularity/ProxyDeployer.sol\":\"ProxyDeployer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\\n    // By removing them you can't accidentally use them.\\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IStrictERC20 {\\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3ab46c194bf6ebcb4ae1b094c7e41061ef651ee1150d1a07beaf9db085dee0ee\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\\n    bytes4 private constant SIG_TOTALSUPPLY = 0x18160ddd; // balanceOf(address)\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to The address of the user to check.\\n    /// @return amount The token amount.\\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\\n        require(success && data.length >= 32, \\\"BoringERC20: BalanceOf failed\\\");\\n        amount = abi.decode(data, (uint256));\\n    }\\n\\n    /// @notice Provides a gas-optimized totalSupply to avoid a redundant extcodesize check in addition to the returndatasize check.\\n    /// @param token The address of the ERC-20 token.\\n    /// @return totalSupply The token totalSupply.\\n    function safeTotalSupply(IERC20 token) internal view returns (uint256 totalSupply) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_TOTALSUPPLY));\\n        require(success && data.length >= 32, \\\"BoringERC20: totalSupply failed\\\");\\n        totalSupply = abi.decode(data, (uint256));\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xdd38cb2bcfe5facaf9e0d8bbba61454e7eb5dc705366668ffce73a72f57abcad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IBeachBar.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport './usd0/IUSD0.sol';\\nimport './swappers/IMultiSwapper.sol';\\n\\ninterface IBeachBar {\\n    /// @notice swap extra data\\n    struct SwapData {\\n        uint256 minAssetAmount;\\n    }\\n\\n    /// @notice Used to define the MasterContract's type\\n    enum ContractType {\\n        lowRisk,\\n        mediumRisk,\\n        highRisk\\n    }\\n\\n    /// @notice MasterContract address and type\\n    struct MasterContract {\\n        address location;\\n        ContractType risk;\\n    }\\n\\n    function swappers(IMultiSwapper swapper) external view returns (bool);\\n\\n    function yieldBox() external view returns (address payable);\\n\\n    function tapToken() external view returns (address);\\n\\n    function tapAssetId() external view returns (uint256);\\n\\n    function usdoToken() external view returns (address);\\n\\n    function usdoAssetId() external view returns (uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeVeTap() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5381ab8f101295e4b260ae74ec45253cae6afbc8d36ca9d5acc001ae327806b9\",\"license\":\"UNLICENSED\"},\"contracts/singularity/ProxyDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport './SGLProxy.sol';\\n\\n/*\\n\\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____        \\n _\\\\///////\\\\\\\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/////\\\\\\\\\\\\///______/\\\\\\\\\\\\///\\\\\\\\\\\\________/\\\\\\\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__       \\n  _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_      \\n   _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\/\\\\\\\\\\\\______/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_     \\n    _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\/////////________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \\n     _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_   \\n      _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\______\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\_____\\\\///\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_  \\n       _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\///\\\\\\\\\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_ \\n        _______\\\\///________\\\\///________\\\\///__\\\\///______________\\\\///////////_______\\\\/////_____________\\\\/////////__\\\\///________\\\\///__\\n\\n*/\\n\\n/// @title SGLProxy factory\\ncontract ProxyDeployer {\\n    // ************ //\\n    // *** VARS *** //\\n    // ************ //\\n    address public owner;\\n    address[] public proxies;\\n\\n    // ************ //\\n    // *** EVENTS *** //\\n    // ************ //\\n    event LogDeploy(address indexed lzEndpoint, address indexed cloneAddress);\\n\\n    // ************ //\\n    // *** METHODS *** //\\n    // ************ //\\n    /// @notice creates a new ProxyDeployer contract\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    // ********************** //\\n    // *** VIEW FUNCTIONS *** //\\n    // ********************** //\\n    /// @notice returns proxies count\\n    function proxiesCount() external view returns (uint256) {\\n        return proxies.length;\\n    }\\n\\n    // *********************** //\\n    // *** OWNER FUNCTIONS *** //\\n    // *********************** //\\n    /// @notice creates a new SGLProxy contract using CREATE2 opcode\\n    /// @param _lzEndpoint the LayerZero endpoint SGLProxy will be associated with\\n    /// @param _salt CREATE2 salt used to compute the new address\\n    function deployWithCreate2(address _lzEndpoint, bytes32 _salt)\\n        public\\n        payable\\n        returns (address cloneAddress)\\n    {\\n        require(msg.sender == owner, 'ProxyDeployer: unauthorized');\\n        // https://docs.soliditylang.org/en/latest/control-structures.html#salted-contract-creations-create2\\n        cloneAddress = address(new SGLProxy{salt: _salt}(_lzEndpoint, owner));\\n        proxies.push(cloneAddress);\\n        emit LogDeploy(_lzEndpoint, cloneAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xa5fc3e100d884cd1f134f6832b47e6bf3c082c622228c9b3a7dd5f22fdfb2d6e\",\"license\":\"UNLICENSED\"},\"contracts/singularity/SGLProxy.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport '@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol';\\r\\nimport 'tapioca-sdk/src/contracts/lzApp/NonblockingLzApp.sol';\\r\\nimport './interfaces/ISingularity.sol';\\r\\n\\r\\n/*\\r\\n\\r\\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____        \\r\\n _\\\\///////\\\\\\\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/////\\\\\\\\\\\\///______/\\\\\\\\\\\\///\\\\\\\\\\\\________/\\\\\\\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__       \\r\\n  _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_      \\r\\n   _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\/\\\\\\\\\\\\______/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_     \\r\\n    _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\/////////________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \\r\\n     _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_   \\r\\n      _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\______\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\_____\\\\///\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_  \\r\\n       _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\///\\\\\\\\\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_ \\r\\n        _______\\\\///________\\\\///________\\\\///__\\\\///______________\\\\///////////_______\\\\/////_____________\\\\/////////__\\\\///________\\\\///__\\r\\n\\r\\n*/\\r\\n\\r\\n/// @title Omnichain proxy for Singularity\\r\\ncontract SGLProxy is NonblockingLzApp {\\r\\n    // ************ //\\r\\n    // *** VARS *** //\\r\\n    // ************ //\\r\\n    bool public useCustomAdapterParams;\\r\\n    bool public enforceSameAddress;\\r\\n\\r\\n    // Address of the whitelisted Singularity contracts\\r\\n    mapping(address => bool) public singularities;\\r\\n\\r\\n    // ***************** //\\r\\n    // *** CONSTANTS *** //\\r\\n    // ***************** //\\r\\n    uint256 public constant NO_EXTRA_GAS = 0;\\r\\n    uint256 public constant FUNCTION_TYPE_SEND = 1;\\r\\n\\r\\n    // ************** //\\r\\n    // *** EVENTS *** //\\r\\n    // ************** //\\r\\n\\r\\n    event ReceiveFromChain(\\r\\n        uint16 indexed _srcChainId,\\r\\n        address indexed _dstMixologist,\\r\\n        bytes _sglPayload\\r\\n    );\\r\\n    event SendToChain(\\r\\n        uint16 indexed _srcChainId,\\r\\n        address indexed _srcAddress,\\r\\n        bytes _sglPayload\\r\\n    );\\r\\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\\r\\n    event LogSingularityStatus(address indexed mixologist, bool status);\\r\\n    event LogEnforce(bool _old, bool _new);\\r\\n\\r\\n    /// @notice creates a new SGLProxy contract\\r\\n    /// @param _lzEndpoint LayerZero endpoint address\\r\\n    /// @param _owner contract's owner address\\r\\n    constructor(address _lzEndpoint, address _owner)\\r\\n        NonblockingLzApp(_lzEndpoint)\\r\\n    {\\r\\n        _transferOwnership(_owner);\\r\\n        enforceSameAddress = true;\\r\\n    }\\r\\n\\r\\n    // ************************ //\\r\\n    // *** PUBLIC FUNCTIONS *** //\\r\\n    // ************************ //\\r\\n\\r\\n    /// @notice execute Singularity methods on another chain\\r\\n    /// @param _dstChainId te LayerZero destination chain id\\r\\n    /// @param _mixologistDstAddress destination Singularity address\\r\\n    /// @param _sglCalls Singularity calls\\r\\n    /// @param _adapterParams custom adapters\\r\\n    function executeOnChain(\\r\\n        uint16 _dstChainId,\\r\\n        bytes memory _mixologistDstAddress,\\r\\n        bytes[] memory _sglCalls,\\r\\n        bytes memory _adapterParams\\r\\n    ) external payable {\\r\\n        uint256 chainId = lzEndpoint.getChainId();\\r\\n        require(chainId != _dstChainId, 'SGLProxy: Chain not valid');\\r\\n\\r\\n        _send(\\r\\n            msg.sender,\\r\\n            _dstChainId,\\r\\n            _mixologistDstAddress,\\r\\n            _sglCalls,\\r\\n            payable(msg.sender),\\r\\n            address(0),\\r\\n            _adapterParams\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // *********************** //\\r\\n    // *** OWNER FUNCTIONS *** //\\r\\n    // *********************** //\\r\\n    /// @notice set whitelist status for Singularity\\r\\n    /// @dev callable by owner\\r\\n    /// @param _mixologist the Singularity address\\r\\n    /// @param _status whitelisted/not\\r\\n    function updateSingularityStatus(address _mixologist, bool _status)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        singularities[_mixologist] = _status;\\r\\n        emit LogSingularityStatus(_mixologist, _status);\\r\\n    }\\r\\n\\r\\n    /// @notice set custom adapter usage status\\r\\n    /// @param _useCustomAdapterParams true/false\\r\\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams)\\r\\n        external\\r\\n        onlyOwner\\r\\n    {\\r\\n        useCustomAdapterParams = _useCustomAdapterParams;\\r\\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\\r\\n    }\\r\\n\\r\\n    //TODO: TBD; remove as we already have trustedRemotes\\r\\n    /// @notice enforces CREATE2 proxies\\r\\n    /// @param _val true/false\\r\\n    function setEnforceSameAddress(bool _val) external onlyOwner {\\r\\n        emit LogEnforce(enforceSameAddress, _val);\\r\\n        enforceSameAddress = _val;\\r\\n    }\\r\\n\\r\\n    // ************************* //\\r\\n    // *** PRIVATE FUNCTIONS *** //\\r\\n    // ************************* //\\r\\n    /// @notice override of the '_nonblockingLzReceive' method\\r\\n    function _nonblockingLzReceive(\\r\\n        uint16 _srcChainId,\\r\\n        bytes memory, /*_srcAddress*/\\r\\n        uint64, /*_nonce*/\\r\\n        bytes memory _sglPayload\\r\\n    ) internal override {\\r\\n        // decode and load the toAddress\\r\\n        (\\r\\n            bytes memory fromAddressBytes,\\r\\n            bytes memory toAddressBytes,\\r\\n            bytes[] memory sglCalls\\r\\n        ) = abi.decode(_sglPayload, (bytes, bytes, bytes[]));\\r\\n\\r\\n        address fromAddress;\\r\\n        assembly {\\r\\n            fromAddress := mload(add(fromAddressBytes, 20))\\r\\n        }\\r\\n        if (enforceSameAddress) {\\r\\n            require(fromAddress == address(this), 'SGLProxy: not proxy'); //should have the same address\\r\\n        }\\r\\n\\r\\n        address toAddress;\\r\\n        assembly {\\r\\n            toAddress := mload(add(toAddressBytes, 20))\\r\\n        }\\r\\n        require(singularities[toAddress], 'SGLProxy: Invalid Singularity');\\r\\n\\r\\n        ISingularity(toAddress).execute(sglCalls, true);\\r\\n\\r\\n        emit ReceiveFromChain(_srcChainId, toAddress, _sglPayload);\\r\\n    }\\r\\n\\r\\n    /// @notice override of the '_send' method\\r\\n    function _send(\\r\\n        address _from,\\r\\n        uint16 _dstChainId,\\r\\n        bytes memory _toAddress,\\r\\n        bytes[] memory _sglCalls,\\r\\n        address payable _refundAddress,\\r\\n        address _zroPaymentAddress,\\r\\n        bytes memory _adapterParams\\r\\n    ) internal {\\r\\n        bytes memory sglPayload = abi.encode(\\r\\n            abi.encodePacked(address(this)),\\r\\n            _toAddress,\\r\\n            _sglCalls\\r\\n        );\\r\\n        if (useCustomAdapterParams) {\\r\\n            _checkGasLimit(\\r\\n                _dstChainId,\\r\\n                uint16(FUNCTION_TYPE_SEND),\\r\\n                _adapterParams,\\r\\n                NO_EXTRA_GAS\\r\\n            );\\r\\n        } else {\\r\\n            require(\\r\\n                _adapterParams.length == 0,\\r\\n                'LzApp: _adapterParams must be empty.'\\r\\n            );\\r\\n        }\\r\\n        _lzSend(\\r\\n            _dstChainId,\\r\\n            sglPayload,\\r\\n            _refundAddress,\\r\\n            _zroPaymentAddress,\\r\\n            _adapterParams\\r\\n        );\\r\\n\\r\\n        emit SendToChain(_dstChainId, _from, sglPayload);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x38635750f02d2dfa0fdcbf66ec9a88196ee65d1b4c9690a9241fe8d12ed50b9d\",\"license\":\"UNLICENSED\"},\"contracts/singularity/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /// @notice Get the latest exchange rate.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function get(bytes calldata data)\\n        external\\n        returns (bool success, uint256 rate);\\n\\n    /// @notice Check the last exchange rate without any state changes.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peek(bytes calldata data)\\n        external\\n        view\\n        returns (bool success, uint256 rate);\\n\\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\\n\\n    /// @notice Returns a human readable (short) name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable symbol name about this oracle.\\n    function symbol(bytes calldata data) external view returns (string memory);\\n\\n    /// @notice Returns a human readable name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable name about this oracle.\\n    function name(bytes calldata data) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb763ed5015f106886475ef7354636556d3bb4bfdc43ee1ef1458ccc5f86f92ea\",\"license\":\"MIT\"},\"contracts/singularity/interfaces/ISingularity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './IOracle.sol';\\r\\nimport '../../IBeachBar.sol';\\r\\nimport '../../swappers/IMultiSwapper.sol';\\r\\n\\r\\ninterface ISingularity {\\r\\n    struct AccrueInfo {\\r\\n        uint64 interestPerSecond;\\r\\n        uint64 lastAccrued;\\r\\n        uint128 feesEarnedFraction;\\r\\n    }\\r\\n\\r\\n    event Approval(\\r\\n        address indexed _owner,\\r\\n        address indexed _spender,\\r\\n        uint256 _value\\r\\n    );\\r\\n    event LogAccrue(\\r\\n        uint256 accruedAmount,\\r\\n        uint256 feeFraction,\\r\\n        uint64 rate,\\r\\n        uint256 utilization\\r\\n    );\\r\\n    event LogAddAsset(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 share,\\r\\n        uint256 fraction\\r\\n    );\\r\\n    event LogAddCollateral(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 share\\r\\n    );\\r\\n    event LogBorrow(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 amount,\\r\\n        uint256 feeAmount,\\r\\n        uint256 part\\r\\n    );\\r\\n    event LogExchangeRate(uint256 rate);\\r\\n    event LogFeeTo(address indexed newFeeTo);\\r\\n    event LogRemoveAsset(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 share,\\r\\n        uint256 fraction\\r\\n    );\\r\\n    event LogRemoveCollateral(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 share\\r\\n    );\\r\\n    event LogRepay(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 amount,\\r\\n        uint256 part\\r\\n    );\\r\\n    event LogWithdrawFees(address indexed feeTo, uint256 feesEarnedFraction);\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event LogFlashLoan(\\r\\n        address indexed borrower,\\r\\n        uint256 amount,\\r\\n        uint256 feeAmount,\\r\\n        address indexed receiver\\r\\n    );\\r\\n    event LogYieldBoxFeesDeposit(uint256 feeShares, uint256 tapAmount);\\r\\n    event LogApprovalForAll(\\r\\n        address indexed _from,\\r\\n        address indexed _operator,\\r\\n        bool _approved\\r\\n    );\\r\\n    error NotApproved(address _from, address _operator);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function accrue() external;\\r\\n\\r\\n    function accrueInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint64 interestPerSecond,\\r\\n            uint64 lastBlockAccrued,\\r\\n            uint128 feesEarnedFraction\\r\\n        );\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function addAsset(\\r\\n        address from,\\r\\n        address to,\\r\\n        bool skim,\\r\\n        uint256 share\\r\\n    ) external returns (uint256 fraction);\\r\\n\\r\\n    function addCollateral(\\r\\n        address from,\\r\\n        address to,\\r\\n        bool skim,\\r\\n        uint256 share\\r\\n    ) external;\\r\\n\\r\\n    function allowance(address, address) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function asset() external view returns (address);\\r\\n\\r\\n    function assetId() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address) external view returns (uint256);\\r\\n\\r\\n    function beachBar() external view returns (address);\\r\\n\\r\\n    function borrow(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (uint256 part, uint256 share);\\r\\n\\r\\n    function claimOwnership() external;\\r\\n\\r\\n    function collateral() external view returns (address);\\r\\n\\r\\n    function collateralId() external view returns (uint256);\\r\\n\\r\\n    /// @notice Allows batched call to Singularity.\\r\\n    /// @param calls An array encoded call data.\\r\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\r\\n    function execute(bytes[] calldata calls, bool revertOnFail)\\r\\n        external\\r\\n        returns (bool[] memory successes, string[] memory results);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function exchangeRate() external view returns (uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function getInitData(\\r\\n        address collateral_,\\r\\n        address asset_,\\r\\n        IOracle oracle_,\\r\\n        bytes calldata oracleData_\\r\\n    ) external pure returns (bytes memory data);\\r\\n\\r\\n    function init(bytes calldata data) external payable;\\r\\n\\r\\n    function isSolvent(address user, bool open) external view returns (bool);\\r\\n\\r\\n    function liquidate(\\r\\n        address[] calldata users,\\r\\n        uint256[] calldata borrowParts,\\r\\n        address to,\\r\\n        IMultiSwapper swapper,\\r\\n        bool open\\r\\n    ) external;\\r\\n\\r\\n    function masterContract() external view returns (address);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function nonces(address) external view returns (uint256);\\r\\n\\r\\n    function oracle() external view returns (IOracle);\\r\\n\\r\\n    function oracleData() external view returns (bytes memory);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function pendingOwner() external view returns (address);\\r\\n\\r\\n    function permit(\\r\\n        address owner_,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function removeAsset(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 fraction\\r\\n    ) external returns (uint256 share);\\r\\n\\r\\n    function removeCollateral(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 share\\r\\n    ) external;\\r\\n\\r\\n    function repay(\\r\\n        address from,\\r\\n        address to,\\r\\n        bool skim,\\r\\n        uint256 part\\r\\n    ) external returns (uint256 amount);\\r\\n\\r\\n    function setFeeTo(address newFeeTo) external;\\r\\n\\r\\n    function setSwapper(IMultiSwapper swapper, bool enable) external;\\r\\n\\r\\n    function swappers(IMultiSwapper) external view returns (bool);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function totalAsset() external view returns (uint128 elastic, uint128 base);\\r\\n\\r\\n    function totalBorrow()\\r\\n        external\\r\\n        view\\r\\n        returns (uint128 elastic, uint128 base);\\r\\n\\r\\n    function totalCollateralShare() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) external;\\r\\n\\r\\n    function updateExchangeRate() external returns (bool updated, uint256 rate);\\r\\n\\r\\n    function userBorrowPart(address) external view returns (uint256);\\r\\n\\r\\n    function userCollateralShare(address) external view returns (uint256);\\r\\n\\r\\n    function withdrawFees() external;\\r\\n\\r\\n    function depositFeesToYieldBox(IMultiSwapper, IBeachBar.SwapData calldata)\\r\\n        external;\\r\\n\\r\\n    function yieldBox() external view returns (address payable);\\r\\n\\r\\n    function liquidationQueue() external view returns (address payable);\\r\\n\\r\\n    function withdrawTo(\\r\\n        uint16 dstChainId,\\r\\n        bytes memory receiver,\\r\\n        uint256 amount,\\r\\n        bytes calldata adapterParams,\\r\\n        address payable refundAddress\\r\\n    ) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0xe4771e90be0de458e2fe189255bca07c5caf1993b7fd4fcb4e4e656ac3de6434\",\"license\":\"MIT\"},\"contracts/swappers/IMultiSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IMultiSwapper {\\n    function swap(\\n        uint256 tokenInId,\\n        uint256 tokenOutId,\\n        uint256 amountMinOut,\\n        address to,\\n        address[] calldata path,\\n        uint256 shareIn\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function getOutputAmount(\\n        uint256 tokenInId,\\n        address[] calldata path,\\n        uint256 shareIn\\n    ) external view returns (uint256 amountOut);\\n\\n    function getInputAmount(\\n        uint256 tokenOutId,\\n        address[] calldata path,\\n        uint256 shareOut\\n    ) external view returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x8cdf4e7a55a7d9e3a0375cce4861fb869541d172e9e63888345faac6326fd411\",\"license\":\"UNLICENSED\"},\"contracts/usd0/IUSD0.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\nimport '@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol';\\n\\ninterface IUSD0 is IStrictERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb76f289e1db4d015f491c1a30ad3ac9a2ee34e7dd9b1128c77b162d835c066df\",\"license\":\"UNLICENSED\"},\"tapioca-sdk/src/contracts/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\r\\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\r\\n    // @param _payload - a custom bytes payload to send to the destination contract\\r\\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\r\\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\r\\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\r\\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\\r\\n\\r\\n    // @notice used by the messaging library to publish verified payload\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source contract (as bytes) at the source chain\\r\\n    // @param _dstAddress - the address on destination chain\\r\\n    // @param _nonce - the unbound message ordering nonce\\r\\n    // @param _gasLimit - the gas limit for external contract execution\\r\\n    // @param _payload - verified payload to send to the destination contract\\r\\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\r\\n\\r\\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\r\\n    // @param _dstChainId - the destination chain identifier\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    // @param _payload - the custom message to send over LayerZero\\r\\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\\r\\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\r\\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n    // @notice get this Endpoint's immutable source identifier\\r\\n    function getChainId() external view returns (uint16);\\r\\n\\r\\n    // @notice the interface to retry failed message on this Endpoint destination\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    // @param _payload - the payload to be retried\\r\\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\\r\\n\\r\\n    // @notice query if any STORED payload (message blocking) at the endpoint.\\r\\n    // @param _srcChainId - the source chain identifier\\r\\n    // @param _srcAddress - the source chain contract address\\r\\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for sending msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the _libraryAddress is valid for receiving msgs.\\r\\n    // @param _userApplication - the user app address on this EVM chain\\r\\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for send() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isSendingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice query if the non-reentrancy guard for receive() is on\\r\\n    // @return true if the guard is on. false otherwise\\r\\n    function isReceivingPayload() external view returns (bool);\\r\\n\\r\\n    // @notice get the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\\r\\n\\r\\n    // @notice get the send() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getSendVersion(address _userApplication) external view returns (uint16);\\r\\n\\r\\n    // @notice get the lzReceive() LayerZero messaging library version\\r\\n    // @param _userApplication - the contract address of the user application\\r\\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\\r\\n}\\r\\n\",\"keccak256\":\"0xfbf0a630590b3a90501f81518631b32fcf0aa6ca3ff560d103589085e9f57cbc\",\"license\":\"MIT\"},\"tapioca-sdk/src/contracts/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface ILayerZeroReceiver {\\r\\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\r\\n    // @param _srcChainId - the source endpoint identifier\\r\\n    // @param _srcAddress - the source sending contract address from the source chain\\r\\n    // @param _nonce - the ordered message nonce\\r\\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\\r\\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x500987972bef18b3ee7ee1afa4a2e88af3c6cd284b7356ddb66e3547ecb887cd\",\"license\":\"MIT\"},\"tapioca-sdk/src/contracts/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\ninterface ILayerZeroUserApplicationConfig {\\r\\n    // @notice set the configuration of the LayerZero messaging library of the specified version\\r\\n    // @param _version - messaging library version\\r\\n    // @param _chainId - the chainId for the pending config change\\r\\n    // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n    // @param _config - configuration in the bytes. can encode arbitrary content.\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\\r\\n\\r\\n    // @notice set the send() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setSendVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice set the lzReceive() LayerZero messaging library version to _version\\r\\n    // @param _version - new messaging library version\\r\\n    function setReceiveVersion(uint16 _version) external;\\r\\n\\r\\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\r\\n    // @param _srcChainId - the chainId of the source chain\\r\\n    // @param _srcAddress - the contract address of the source contract at the source chain\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x8d1d961270abe758c08488e8452a77c7e6ca8550385749ff93f3b5ff29335fac\",\"license\":\"MIT\"},\"tapioca-sdk/src/contracts/lzApp/LzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroUserApplicationConfig.sol\\\";\\r\\nimport \\\"../interfaces/ILayerZeroEndpoint.sol\\\";\\r\\n\\r\\n/*\\r\\n * a generic LzReceiver implementation\\r\\n */\\r\\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\\r\\n    ILayerZeroEndpoint public immutable lzEndpoint;\\r\\n    mapping(uint16 => bytes) public trustedRemoteLookup;\\r\\n    mapping(uint16 => mapping(uint => uint)) public minDstGasLookup;\\r\\n\\r\\n    event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\\r\\n    event SetMinDstGasLookup(uint16 _dstChainId, uint _type, uint _dstGasAmount);\\r\\n\\r\\n    constructor(address _endpoint) {\\r\\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\\r\\n    }\\r\\n\\r\\n    function lzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual override {\\r\\n        // lzReceive must be called by the endpoint for security\\r\\n        require(_msgSender() == address(lzEndpoint), \\\"LzApp: invalid endpoint caller\\\");\\r\\n\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\\r\\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\\r\\n        require(_srcAddress.length == trustedRemote.length && keccak256(_srcAddress) == keccak256(trustedRemote), \\\"LzApp: invalid source sending contract\\\");\\r\\n\\r\\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\\r\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\r\\n\\r\\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\\r\\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\\r\\n        require(trustedRemote.length != 0, \\\"LzApp: destination chain is not a trusted source\\\");\\r\\n        lzEndpoint.send{value: msg.value}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\\r\\n    }\\r\\n\\r\\n    function _checkGasLimit(uint16 _dstChainId, uint _type, bytes memory _adapterParams, uint _extraGas) internal view {\\r\\n        uint providedGasLimit = getGasLimit(_adapterParams);\\r\\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\\r\\n        require(minGasLimit > 0, \\\"LzApp: minGasLimit not set\\\");\\r\\n        require(providedGasLimit >= minGasLimit, \\\"LzApp: gas limit is too low\\\");\\r\\n    }\\r\\n\\r\\n    function getGasLimit(bytes memory _adapterParams) public pure returns (uint gasLimit) {\\r\\n        assembly {\\r\\n            gasLimit := mload(add(_adapterParams, 34))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //---------------------------UserApplication config----------------------------------------\\r\\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\\r\\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\\r\\n    }\\r\\n\\r\\n    // generic config for LayerZero user Application\\r\\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\\r\\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\\r\\n    }\\r\\n\\r\\n    function setSendVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setSendVersion(_version);\\r\\n    }\\r\\n\\r\\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\\r\\n        lzEndpoint.setReceiveVersion(_version);\\r\\n    }\\r\\n\\r\\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\\r\\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    // allow owner to set it multiple times.\\r\\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external onlyOwner {\\r\\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\\r\\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\\r\\n    }\\r\\n\\r\\n    function setMinDstGasLookup(uint16 _dstChainId, uint _type, uint _dstGasAmount) external onlyOwner {\\r\\n        require(_dstGasAmount > 0, \\\"LzApp: invalid _dstGasAmount\\\");\\r\\n        minDstGasLookup[_dstChainId][_type] = _dstGasAmount;\\r\\n        emit SetMinDstGasLookup(_dstChainId, _type, _dstGasAmount);\\r\\n    }\\r\\n\\r\\n    //--------------------------- VIEW FUNCTION ----------------------------------------\\r\\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\\r\\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\\r\\n        return keccak256(trustedSource) == keccak256(_srcAddress);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xcd108ad49c4332dcee700a21bec428d27b5f660b9e818820a7bc7475deac8c24\",\"license\":\"MIT\"},\"tapioca-sdk/src/contracts/lzApp/NonblockingLzApp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"./LzApp.sol\\\";\\r\\n\\r\\n/*\\r\\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\\r\\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\\r\\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\\r\\n */\\r\\nabstract contract NonblockingLzApp is LzApp {\\r\\n    constructor(address _endpoint) LzApp(_endpoint) {}\\r\\n\\r\\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\\r\\n\\r\\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\\r\\n\\r\\n    // overriding the virtual function in LzReceiver\\r\\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\\r\\n        // try-catch all errors/exceptions\\r\\n        try this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\\r\\n            // do nothing\\r\\n        } catch {\\r\\n            // error / exception\\r\\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\\r\\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual {\\r\\n        // only internal transaction\\r\\n        require(_msgSender() == address(this), \\\"NonblockingLzApp: caller must be LzApp\\\");\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n\\r\\n    //@notice override this function\\r\\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\\r\\n\\r\\n    function retryMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public payable virtual {\\r\\n        // assert there is message to retry\\r\\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\\r\\n        require(payloadHash != bytes32(0), \\\"NonblockingLzApp: no stored message\\\");\\r\\n        require(keccak256(_payload) == payloadHash, \\\"NonblockingLzApp: invalid payload\\\");\\r\\n        // clear the stored message\\r\\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\\r\\n        // execute the message. revert if it fails again\\r\\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2267635570b2d00f05add9f00126e966019e207c87111999ec824a37afbd8511\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055612a8e806100326000396000f3fe60806040526004361061003f5760003560e01c80638da5cb5b14610044578063abd90f8514610081578063aec3c2ac146100a1578063dbb65cf7146100b4575b600080fd5b34801561005057600080fd5b50600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561008d57600080fd5b5061006461009c366004610272565b6100d2565b6100646100af36600461028b565b6100fc565b3480156100c057600080fd5b50600154604051908152602001610078565b600181815481106100e257600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546001600160a01b03163314610175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f50726f78794465706c6f7965723a20756e617574686f72697a65640000000000604482015260640160405180910390fd5b600054604051839185916001600160a01b039091169061019490610265565b6001600160a01b039283168152911660208201526040018190604051809103906000f59050801580156101cb573d6000803e3d6000fd5b5060018054808201825560009182527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384811691821790925560405193945092908616917f3e92124ed434899798905270ec2eec729cc0faa83fbb940ff6ab9c132369e43b91a392915050565b612795806102c483390190565b60006020828403121561028457600080fd5b5035919050565b6000806040838503121561029e57600080fd5b82356001600160a01b03811681146102b557600080fd5b94602093909301359350505056fe60a06040523480156200001157600080fd5b5060405162002795380380620027958339810160408190526200003491620000dd565b8180620000413362000070565b6001600160a01b031660805250620000598162000070565b50506004805461ff00191661010017905562000115565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000d857600080fd5b919050565b60008060408385031215620000f157600080fd5b620000fc83620000c0565b91506200010c60208401620000c0565b90509250929050565b60805161262c620001696000396000818161048b015281816105ad015281816107a2015281816108a4015281816109e001528181610cae01528181610dcf0152818161115201526118eb015261262c6000f3fe6080604052600436106101b65760003560e01c80638da5cb5b116100ec578063cbed8b9c1161008a578063eb8d72b711610064578063eb8d72b714610530578063ed629c5c14610550578063f2fde38b1461056a578063f5ecbdbc1461058a57600080fd5b8063cbed8b9c146104dd578063d1deba1f146104fd578063eab45d9c1461051057600080fd5b8063a2ca14ec116100c6578063a2ca14ec14610442578063af3fb21c14610464578063b353aaa714610479578063c0d4e324146104ad57600080fd5b80638da5cb5b146103dd5780639b57db5f1461040f5780639f980b801461042f57600080fd5b806344770515116101595780636e9cbc86116101335780636e9cbc861461035c578063715018a61461037b5780637533d788146103905780637f377aed146103bd57600080fd5b806344770515146102d85780635b8c41e6146102ed57806366ad5c8a1461033c57600080fd5b80630978478211610195578063097847821461024857806310ddb137146102685780633d8b38f61461028857806342d65a8d146102b857600080fd5b80621d3567146101bb57806307810867146101dd57806307e0db1714610228575b600080fd5b3480156101c757600080fd5b506101db6101d6366004611a58565b6105aa565b005b3480156101e957600080fd5b506102156101f8366004611adf565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561023457600080fd5b506101db610243366004611b0b565b610768565b34801561025457600080fd5b506101db610263366004611b4d565b610803565b34801561027457600080fd5b506101db610283366004611b0b565b61086a565b34801561029457600080fd5b506102a86102a3366004611bcd565b6108db565b604051901515815260200161021f565b3480156102c457600080fd5b506101db6102d3366004611bcd565b6109a8565b3480156102e457600080fd5b50610215600081565b3480156102f957600080fd5b50610215610308366004611c22565b6003602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561034857600080fd5b506101db610357366004611a58565b610a50565b34801561036857600080fd5b506004546102a890610100900460ff1681565b34801561038757600080fd5b506101db610ad7565b34801561039c57600080fd5b506103b06103ab366004611b0b565b610aeb565b60405161021f9190611cda565b3480156103c957600080fd5b506101db6103d8366004611ced565b610b85565b3480156103e957600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161021f565b34801561041b57600080fd5b506101db61042a366004611d0a565b610bee565b6101db61043d366004611d63565b610caa565b34801561044e57600080fd5b5061021561045d366004611e64565b6022015190565b34801561047057600080fd5b50610215600181565b34801561048557600080fd5b506103f77f000000000000000000000000000000000000000000000000000000000000000081565b3480156104b957600080fd5b506102a86104c8366004611ea1565b60056020526000908152604090205460ff1681565b3480156104e957600080fd5b506101db6104f8366004611ebc565b610d97565b6101db61050b366004611a58565b610e45565b34801561051c57600080fd5b506101db61052b366004611ced565b610fcf565b34801561053c57600080fd5b506101db61054b366004611bcd565b61101e565b34801561055c57600080fd5b506004546102a89060ff1681565b34801561057657600080fd5b506101db610585366004611ea1565b611078565b34801561059657600080fd5b506103b06105a5366004611f2f565b611108565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106275760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff84166000908152600160205260408120805461064590611f7e565b80601f016020809104026020016040519081016040528092919081815260200182805461067190611f7e565b80156106be5780601f10610693576101008083540402835291602001916106be565b820191906000526020600020905b8154815290600101906020018083116106a157829003601f168201915b50505050509050805184511480156106e3575080805190602001208480519060200120145b6107555760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161061e565b610761858585856111d2565b5050505050565b6107706112dd565b6040517f07e0db1700000000000000000000000000000000000000000000000000000000815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b1580156107ef57600080fd5b505af1158015610761573d6000803e3d6000fd5b61080b6112dd565b6001600160a01b038216600081815260056020908152604091829020805460ff191685151590811790915591519182527fd27d7d1acad2036ae6abd569d0fe50a81b4675a1d12a9b181018760f49476c24910160405180910390a25050565b6108726112dd565b6040517f10ddb13700000000000000000000000000000000000000000000000000000000815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb137906024016107d5565b61ffff8316600090815260016020526040812080548291906108fc90611f7e565b80601f016020809104026020016040519081016040528092919081815260200182805461092890611f7e565b80156109755780601f1061094a57610100808354040283529160200191610975565b820191906000526020600020905b81548152906001019060200180831161095857829003601f168201915b50505050509050838360405161098c929190611fb8565b60405180910390208180519060200120149150505b9392505050565b6109b06112dd565b6040517f42d65a8d0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d90610a1990869086908690600401611ff1565b600060405180830381600087803b158015610a3357600080fd5b505af1158015610a47573d6000803e3d6000fd5b50505050505050565b333014610ac55760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d75737420626560448201527f204c7a4170700000000000000000000000000000000000000000000000000000606482015260840161061e565b610ad184848484611337565b50505050565b610adf6112dd565b610ae96000611515565b565b60016020526000908152604090208054610b0490611f7e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3090611f7e565b8015610b7d5780601f10610b5257610100808354040283529160200191610b7d565b820191906000526020600020905b815481529060010190602001808311610b6057829003601f168201915b505050505081565b610b8d6112dd565b6004546040805161010090920460ff161515825282151560208301527f93cc0321a0bc88c6711b0c3cbbd280643823d12208bc958e2deafbbebc8f4ee2910160405180910390a1600480549115156101000261ff0019909216919091179055565b610bf66112dd565b60008111610c465760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c6964205f647374476173416d6f756e7400000000604482015260640161061e565b61ffff831660008181526002602090815260408083208684528252918290208490558151928352820184905281018290527f15ceea62cfa597b29eb911525932c57500d97da953485d24260680ae56903b68906060015b60405180910390a1505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633408e4706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e919061200f565b61ffff1690508461ffff168103610d875760405162461bcd60e51b815260206004820152601960248201527f53474c50726f78793a20436861696e206e6f742076616c696400000000000000604482015260640161061e565b610761338686863360008861157d565b610d9f6112dd565b6040517fcbed8b9c0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90610e0c908890889088908890889060040161202c565b600060405180830381600087803b158015610e2657600080fd5b505af1158015610e3a573d6000803e3d6000fd5b505050505050505050565b61ffff84166000908152600360205260408082209051610e66908690612065565b908152604080516020928190038301902067ffffffffffffffff861660009081529252902054905080610f015760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201527f6167650000000000000000000000000000000000000000000000000000000000606482015260840161061e565b815160208301208114610f7c5760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f6160448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161061e565b61ffff85166000908152600360205260408082209051610f9d908790612065565b908152604080516020928190038301902067ffffffffffffffff87166000908152925290205561076185858585611337565b610fd76112dd565b6004805460ff19168215159081179091556040519081527f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a49060200160405180910390a150565b6110266112dd565b61ffff831660009081526001602052604090206110448284836120cc565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051610c9d93929190611ff1565b6110806112dd565b6001600160a01b0381166110fc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161061e565b61110581611515565b50565b6040517ff5ecbdbc00000000000000000000000000000000000000000000000000000000815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa1580156111a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111c991908101906121dc565b95945050505050565b6040517f66ad5c8a00000000000000000000000000000000000000000000000000000000815230906366ad5c8a90611214908790879087908790600401612211565b600060405180830381600087803b15801561122e57600080fd5b505af192505050801561123f575060015b610ad1578080519060200120600360008661ffff1661ffff168152602001908152602001600020846040516112749190612065565b90815260408051918290036020908101832067ffffffffffffffff87166000908152915220919091557fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d906112d0908690869086908690612211565b60405180910390a1610ad1565b6000546001600160a01b03163314610ae95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161061e565b6000806000838060200190518101906113509190612250565b6014830151600454939650919450925090610100900460ff16156113c6576001600160a01b03811630146113c65760405162461bcd60e51b815260206004820152601360248201527f53474c50726f78793a206e6f742070726f787900000000000000000000000000604482015260640161061e565b60148301516001600160a01b03811660009081526005602052604090205460ff166114335760405162461bcd60e51b815260206004820152601d60248201527f53474c50726f78793a20496e76616c69642053696e67756c6172697479000000604482015260640161061e565b6040517faa7d96650000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063aa7d96659061147b90869060019060040161239d565b6000604051808303816000875af115801561149a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114c29190810190612461565b5050806001600160a01b03168961ffff167fe56f9bcb2a90b3dc97f0814c287246469fc5c7050a6022ad21b2fe9058129c81886040516115029190611cda565b60405180910390a3505050505050505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516bffffffffffffffffffffffff193060601b16602082015260009060340160408051601f19818403018152908290526115bf9188908890602001612526565b60408051601f1981840301815291905260045490915060ff16156115f0576115eb8760018460006116c1565b611664565b8151156116645760405162461bcd60e51b8152602060048201526024808201527f4c7a4170703a205f61646170746572506172616d73206d75737420626520656d60448201527f7074792e00000000000000000000000000000000000000000000000000000000606482015260840161061e565b61167187828686866117a6565b876001600160a01b03168761ffff167fd3b01b57b25c5a506ceef68a2e5ce63cf91fe09d5270a8bb49839a64d5b1b1f7836040516116af9190611cda565b60405180910390a35050505050505050565b60006116ce836022015190565b61ffff86166000908152600260209081526040808320888452909152812054919250906116fc908490612569565b90506000811161174e5760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f7420736574000000000000604482015260640161061e565b8082101561179e5760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f770000000000604482015260640161061e565b505050505050565b61ffff8516600090815260016020526040812080546117c490611f7e565b80601f01602080910402602001604051908101604052809291908181526020018280546117f090611f7e565b801561183d5780601f106118125761010080835404028352916020019161183d565b820191906000526020600020905b81548152906001019060200180831161182057829003601f168201915b5050505050905080516000036118bb5760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201527f61207472757374656420736f7572636500000000000000000000000000000000606482015260840161061e565b6040517fc58031000000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c580310090349061192c908a9086908b908b908b908b9060040161258f565b6000604051808303818588803b15801561194557600080fd5b505af1158015611959573d6000803e3d6000fd5b5050505050505050505050565b61ffff8116811461110557600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119b5576119b5611976565b604052919050565b600067ffffffffffffffff8211156119d7576119d7611976565b50601f01601f191660200190565b600082601f8301126119f657600080fd5b8135611a09611a04826119bd565b61198c565b818152846020838601011115611a1e57600080fd5b816020850160208301376000918101602001919091529392505050565b803567ffffffffffffffff81168114611a5357600080fd5b919050565b60008060008060808587031215611a6e57600080fd5b8435611a7981611966565b9350602085013567ffffffffffffffff80821115611a9657600080fd5b611aa2888389016119e5565b9450611ab060408801611a3b565b93506060870135915080821115611ac657600080fd5b50611ad3878288016119e5565b91505092959194509250565b60008060408385031215611af257600080fd5b8235611afd81611966565b946020939093013593505050565b600060208284031215611b1d57600080fd5b81356109a181611966565b80356001600160a01b0381168114611a5357600080fd5b801515811461110557600080fd5b60008060408385031215611b6057600080fd5b611b6983611b28565b91506020830135611b7981611b3f565b809150509250929050565b60008083601f840112611b9657600080fd5b50813567ffffffffffffffff811115611bae57600080fd5b602083019150836020828501011115611bc657600080fd5b9250929050565b600080600060408486031215611be257600080fd5b8335611bed81611966565b9250602084013567ffffffffffffffff811115611c0957600080fd5b611c1586828701611b84565b9497909650939450505050565b600080600060608486031215611c3757600080fd5b8335611c4281611966565b9250602084013567ffffffffffffffff811115611c5e57600080fd5b611c6a868287016119e5565b925050611c7960408501611a3b565b90509250925092565b60005b83811015611c9d578181015183820152602001611c85565b83811115610ad15750506000910152565b60008151808452611cc6816020860160208601611c82565b601f01601f19169290920160200192915050565b6020815260006109a16020830184611cae565b600060208284031215611cff57600080fd5b81356109a181611b3f565b600080600060608486031215611d1f57600080fd5b8335611d2a81611966565b95602085013595506040909401359392505050565b600067ffffffffffffffff821115611d5957611d59611976565b5060051b60200190565b60008060008060808587031215611d7957600080fd5b8435611d8481611966565b935060208581013567ffffffffffffffff80821115611da257600080fd5b611dae89838a016119e5565b95506040880135915080821115611dc457600080fd5b818801915088601f830112611dd857600080fd5b8135611de6611a0482611d3f565b81815260059190911b8301840190848101908b831115611e0557600080fd5b8585015b83811015611e3d57803585811115611e215760008081fd5b611e2f8e89838a01016119e5565b845250918601918601611e09565b50965050506060880135925080831115611e5657600080fd5b5050611ad3878288016119e5565b600060208284031215611e7657600080fd5b813567ffffffffffffffff811115611e8d57600080fd5b611e99848285016119e5565b949350505050565b600060208284031215611eb357600080fd5b6109a182611b28565b600080600080600060808688031215611ed457600080fd5b8535611edf81611966565b94506020860135611eef81611966565b935060408601359250606086013567ffffffffffffffff811115611f1257600080fd5b611f1e88828901611b84565b969995985093965092949392505050565b60008060008060808587031215611f4557600080fd5b8435611f5081611966565b93506020850135611f6081611966565b9250611f6e60408601611b28565b9396929550929360600135925050565b600181811c90821680611f9257607f821691505b602082108103611fb257634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff841681526040602082015260006111c9604083018486611fc8565b60006020828403121561202157600080fd5b81516109a181611966565b600061ffff80881683528087166020840152508460408301526080606083015261205a608083018486611fc8565b979650505050505050565b60008251612077818460208701611c82565b9190910192915050565b601f8211156120c757600081815260208120601f850160051c810160208610156120a85750805b601f850160051c820191505b8181101561179e578281556001016120b4565b505050565b67ffffffffffffffff8311156120e4576120e4611976565b6120f8836120f28354611f7e565b83612081565b6000601f84116001811461212c57600085156121145750838201355b600019600387901b1c1916600186901b178355610761565b600083815260209020601f19861690835b8281101561215d578685013582556020948501946001909201910161213d565b508682101561217a5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600061219a611a04846119bd565b90508281528383830111156121ae57600080fd5b6109a1836020830184611c82565b600082601f8301126121cd57600080fd5b6109a18383516020850161218c565b6000602082840312156121ee57600080fd5b815167ffffffffffffffff81111561220557600080fd5b611e99848285016121bc565b61ffff8516815260806020820152600061222e6080830186611cae565b67ffffffffffffffff85166040840152828103606084015261205a8185611cae565b60008060006060848603121561226557600080fd5b835167ffffffffffffffff8082111561227d57600080fd5b612289878388016121bc565b94506020915081860151818111156122a057600080fd5b6122ac888289016121bc565b9450506040860151818111156122c157600080fd5b8601601f810188136122d257600080fd5b80516122e0611a0482611d3f565b81815260059190911b8201840190848101908a8311156122ff57600080fd5b8584015b838110156123375780518681111561231b5760008081fd5b6123298d89838901016121bc565b845250918601918601612303565b508096505050505050509250925092565b600081518084526020808501808196508360051b8101915082860160005b8581101561239057828403895261237e848351611cae565b98850198935090840190600101612366565b5091979650505050505050565b6040815260006123b06040830185612348565b905082151560208301529392505050565b600082601f8301126123d257600080fd5b815160206123e2611a0483611d3f565b82815260059290921b8401810191818101908684111561240157600080fd5b8286015b8481101561245657805167ffffffffffffffff8111156124255760008081fd5b8701603f810189136124375760008081fd5b61244889868301516040840161218c565b845250918301918301612405565b509695505050505050565b6000806040838503121561247457600080fd5b825167ffffffffffffffff8082111561248c57600080fd5b818501915085601f8301126124a057600080fd5b815160206124b0611a0483611d3f565b82815260059290921b840181019181810190898411156124cf57600080fd5b948201945b838610156124f65785516124e781611b3f565b825294820194908201906124d4565b9188015191965090935050508082111561250f57600080fd5b5061251c858286016123c1565b9150509250929050565b6060815260006125396060830186611cae565b828103602084015261254b8186611cae565b9050828103604084015261255f8185612348565b9695505050505050565b6000821982111561258a57634e487b7160e01b600052601160045260246000fd5b500190565b61ffff8716815260c0602082015260006125ac60c0830188611cae565b82810360408401526125be8188611cae565b6001600160a01b0387811660608601528616608085015283810360a085015290506125e98185611cae565b999850505050505050505056fea2646970667358221220d0c3b223dd8dc016e562de352b77bf7666178b4cfc07c0c33d9178a7e95f285764736f6c634300080f0033a264697066735822122023d17d18fcba2c62548e99e2b4b7fe70edd7b41c97a4a3a0ef1b15dd871670d264736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80638da5cb5b14610044578063abd90f8514610081578063aec3c2ac146100a1578063dbb65cf7146100b4575b600080fd5b34801561005057600080fd5b50600054610064906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561008d57600080fd5b5061006461009c366004610272565b6100d2565b6100646100af36600461028b565b6100fc565b3480156100c057600080fd5b50600154604051908152602001610078565b600181815481106100e257600080fd5b6000918252602090912001546001600160a01b0316905081565b600080546001600160a01b03163314610175576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f50726f78794465706c6f7965723a20756e617574686f72697a65640000000000604482015260640160405180910390fd5b600054604051839185916001600160a01b039091169061019490610265565b6001600160a01b039283168152911660208201526040018190604051809103906000f59050801580156101cb573d6000803e3d6000fd5b5060018054808201825560009182527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0384811691821790925560405193945092908616917f3e92124ed434899798905270ec2eec729cc0faa83fbb940ff6ab9c132369e43b91a392915050565b612795806102c483390190565b60006020828403121561028457600080fd5b5035919050565b6000806040838503121561029e57600080fd5b82356001600160a01b03811681146102b557600080fd5b94602093909301359350505056fe60a06040523480156200001157600080fd5b5060405162002795380380620027958339810160408190526200003491620000dd565b8180620000413362000070565b6001600160a01b031660805250620000598162000070565b50506004805461ff00191661010017905562000115565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000d857600080fd5b919050565b60008060408385031215620000f157600080fd5b620000fc83620000c0565b91506200010c60208401620000c0565b90509250929050565b60805161262c620001696000396000818161048b015281816105ad015281816107a2015281816108a4015281816109e001528181610cae01528181610dcf0152818161115201526118eb015261262c6000f3fe6080604052600436106101b65760003560e01c80638da5cb5b116100ec578063cbed8b9c1161008a578063eb8d72b711610064578063eb8d72b714610530578063ed629c5c14610550578063f2fde38b1461056a578063f5ecbdbc1461058a57600080fd5b8063cbed8b9c146104dd578063d1deba1f146104fd578063eab45d9c1461051057600080fd5b8063a2ca14ec116100c6578063a2ca14ec14610442578063af3fb21c14610464578063b353aaa714610479578063c0d4e324146104ad57600080fd5b80638da5cb5b146103dd5780639b57db5f1461040f5780639f980b801461042f57600080fd5b806344770515116101595780636e9cbc86116101335780636e9cbc861461035c578063715018a61461037b5780637533d788146103905780637f377aed146103bd57600080fd5b806344770515146102d85780635b8c41e6146102ed57806366ad5c8a1461033c57600080fd5b80630978478211610195578063097847821461024857806310ddb137146102685780633d8b38f61461028857806342d65a8d146102b857600080fd5b80621d3567146101bb57806307810867146101dd57806307e0db1714610228575b600080fd5b3480156101c757600080fd5b506101db6101d6366004611a58565b6105aa565b005b3480156101e957600080fd5b506102156101f8366004611adf565b600260209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b34801561023457600080fd5b506101db610243366004611b0b565b610768565b34801561025457600080fd5b506101db610263366004611b4d565b610803565b34801561027457600080fd5b506101db610283366004611b0b565b61086a565b34801561029457600080fd5b506102a86102a3366004611bcd565b6108db565b604051901515815260200161021f565b3480156102c457600080fd5b506101db6102d3366004611bcd565b6109a8565b3480156102e457600080fd5b50610215600081565b3480156102f957600080fd5b50610215610308366004611c22565b6003602090815260009384526040808520845180860184018051928152908401958401959095209452929052825290205481565b34801561034857600080fd5b506101db610357366004611a58565b610a50565b34801561036857600080fd5b506004546102a890610100900460ff1681565b34801561038757600080fd5b506101db610ad7565b34801561039c57600080fd5b506103b06103ab366004611b0b565b610aeb565b60405161021f9190611cda565b3480156103c957600080fd5b506101db6103d8366004611ced565b610b85565b3480156103e957600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161021f565b34801561041b57600080fd5b506101db61042a366004611d0a565b610bee565b6101db61043d366004611d63565b610caa565b34801561044e57600080fd5b5061021561045d366004611e64565b6022015190565b34801561047057600080fd5b50610215600181565b34801561048557600080fd5b506103f77f000000000000000000000000000000000000000000000000000000000000000081565b3480156104b957600080fd5b506102a86104c8366004611ea1565b60056020526000908152604090205460ff1681565b3480156104e957600080fd5b506101db6104f8366004611ebc565b610d97565b6101db61050b366004611a58565b610e45565b34801561051c57600080fd5b506101db61052b366004611ced565b610fcf565b34801561053c57600080fd5b506101db61054b366004611bcd565b61101e565b34801561055c57600080fd5b506004546102a89060ff1681565b34801561057657600080fd5b506101db610585366004611ea1565b611078565b34801561059657600080fd5b506103b06105a5366004611f2f565b611108565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146106275760405162461bcd60e51b815260206004820152601e60248201527f4c7a4170703a20696e76616c696420656e64706f696e742063616c6c6572000060448201526064015b60405180910390fd5b61ffff84166000908152600160205260408120805461064590611f7e565b80601f016020809104026020016040519081016040528092919081815260200182805461067190611f7e565b80156106be5780601f10610693576101008083540402835291602001916106be565b820191906000526020600020905b8154815290600101906020018083116106a157829003601f168201915b50505050509050805184511480156106e3575080805190602001208480519060200120145b6107555760405162461bcd60e51b815260206004820152602660248201527f4c7a4170703a20696e76616c696420736f757263652073656e64696e6720636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161061e565b610761858585856111d2565b5050505050565b6107706112dd565b6040517f07e0db1700000000000000000000000000000000000000000000000000000000815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906307e0db17906024015b600060405180830381600087803b1580156107ef57600080fd5b505af1158015610761573d6000803e3d6000fd5b61080b6112dd565b6001600160a01b038216600081815260056020908152604091829020805460ff191685151590811790915591519182527fd27d7d1acad2036ae6abd569d0fe50a81b4675a1d12a9b181018760f49476c24910160405180910390a25050565b6108726112dd565b6040517f10ddb13700000000000000000000000000000000000000000000000000000000815261ffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906310ddb137906024016107d5565b61ffff8316600090815260016020526040812080548291906108fc90611f7e565b80601f016020809104026020016040519081016040528092919081815260200182805461092890611f7e565b80156109755780601f1061094a57610100808354040283529160200191610975565b820191906000526020600020905b81548152906001019060200180831161095857829003601f168201915b50505050509050838360405161098c929190611fb8565b60405180910390208180519060200120149150505b9392505050565b6109b06112dd565b6040517f42d65a8d0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906342d65a8d90610a1990869086908690600401611ff1565b600060405180830381600087803b158015610a3357600080fd5b505af1158015610a47573d6000803e3d6000fd5b50505050505050565b333014610ac55760405162461bcd60e51b815260206004820152602660248201527f4e6f6e626c6f636b696e674c7a4170703a2063616c6c6572206d75737420626560448201527f204c7a4170700000000000000000000000000000000000000000000000000000606482015260840161061e565b610ad184848484611337565b50505050565b610adf6112dd565b610ae96000611515565b565b60016020526000908152604090208054610b0490611f7e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3090611f7e565b8015610b7d5780601f10610b5257610100808354040283529160200191610b7d565b820191906000526020600020905b815481529060010190602001808311610b6057829003601f168201915b505050505081565b610b8d6112dd565b6004546040805161010090920460ff161515825282151560208301527f93cc0321a0bc88c6711b0c3cbbd280643823d12208bc958e2deafbbebc8f4ee2910160405180910390a1600480549115156101000261ff0019909216919091179055565b610bf66112dd565b60008111610c465760405162461bcd60e51b815260206004820152601c60248201527f4c7a4170703a20696e76616c6964205f647374476173416d6f756e7400000000604482015260640161061e565b61ffff831660008181526002602090815260408083208684528252918290208490558151928352820184905281018290527f15ceea62cfa597b29eb911525932c57500d97da953485d24260680ae56903b68906060015b60405180910390a1505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633408e4706040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e919061200f565b61ffff1690508461ffff168103610d875760405162461bcd60e51b815260206004820152601960248201527f53474c50726f78793a20436861696e206e6f742076616c696400000000000000604482015260640161061e565b610761338686863360008861157d565b610d9f6112dd565b6040517fcbed8b9c0000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063cbed8b9c90610e0c908890889088908890889060040161202c565b600060405180830381600087803b158015610e2657600080fd5b505af1158015610e3a573d6000803e3d6000fd5b505050505050505050565b61ffff84166000908152600360205260408082209051610e66908690612065565b908152604080516020928190038301902067ffffffffffffffff861660009081529252902054905080610f015760405162461bcd60e51b815260206004820152602360248201527f4e6f6e626c6f636b696e674c7a4170703a206e6f2073746f726564206d65737360448201527f6167650000000000000000000000000000000000000000000000000000000000606482015260840161061e565b815160208301208114610f7c5760405162461bcd60e51b815260206004820152602160248201527f4e6f6e626c6f636b696e674c7a4170703a20696e76616c6964207061796c6f6160448201527f6400000000000000000000000000000000000000000000000000000000000000606482015260840161061e565b61ffff85166000908152600360205260408082209051610f9d908790612065565b908152604080516020928190038301902067ffffffffffffffff87166000908152925290205561076185858585611337565b610fd76112dd565b6004805460ff19168215159081179091556040519081527f1584ad594a70cbe1e6515592e1272a987d922b097ead875069cebe8b40c004a49060200160405180910390a150565b6110266112dd565b61ffff831660009081526001602052604090206110448284836120cc565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab838383604051610c9d93929190611ff1565b6110806112dd565b6001600160a01b0381166110fc5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161061e565b61110581611515565b50565b6040517ff5ecbdbc00000000000000000000000000000000000000000000000000000000815261ffff808616600483015284166024820152306044820152606481018290526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063f5ecbdbc90608401600060405180830381865afa1580156111a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111c991908101906121dc565b95945050505050565b6040517f66ad5c8a00000000000000000000000000000000000000000000000000000000815230906366ad5c8a90611214908790879087908790600401612211565b600060405180830381600087803b15801561122e57600080fd5b505af192505050801561123f575060015b610ad1578080519060200120600360008661ffff1661ffff168152602001908152602001600020846040516112749190612065565b90815260408051918290036020908101832067ffffffffffffffff87166000908152915220919091557fe6f254030bcb01ffd20558175c13fcaed6d1520be7becee4c961b65f79243b0d906112d0908690869086908690612211565b60405180910390a1610ad1565b6000546001600160a01b03163314610ae95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161061e565b6000806000838060200190518101906113509190612250565b6014830151600454939650919450925090610100900460ff16156113c6576001600160a01b03811630146113c65760405162461bcd60e51b815260206004820152601360248201527f53474c50726f78793a206e6f742070726f787900000000000000000000000000604482015260640161061e565b60148301516001600160a01b03811660009081526005602052604090205460ff166114335760405162461bcd60e51b815260206004820152601d60248201527f53474c50726f78793a20496e76616c69642053696e67756c6172697479000000604482015260640161061e565b6040517faa7d96650000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063aa7d96659061147b90869060019060040161239d565b6000604051808303816000875af115801561149a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114c29190810190612461565b5050806001600160a01b03168961ffff167fe56f9bcb2a90b3dc97f0814c287246469fc5c7050a6022ad21b2fe9058129c81886040516115029190611cda565b60405180910390a3505050505050505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516bffffffffffffffffffffffff193060601b16602082015260009060340160408051601f19818403018152908290526115bf9188908890602001612526565b60408051601f1981840301815291905260045490915060ff16156115f0576115eb8760018460006116c1565b611664565b8151156116645760405162461bcd60e51b8152602060048201526024808201527f4c7a4170703a205f61646170746572506172616d73206d75737420626520656d60448201527f7074792e00000000000000000000000000000000000000000000000000000000606482015260840161061e565b61167187828686866117a6565b876001600160a01b03168761ffff167fd3b01b57b25c5a506ceef68a2e5ce63cf91fe09d5270a8bb49839a64d5b1b1f7836040516116af9190611cda565b60405180910390a35050505050505050565b60006116ce836022015190565b61ffff86166000908152600260209081526040808320888452909152812054919250906116fc908490612569565b90506000811161174e5760405162461bcd60e51b815260206004820152601a60248201527f4c7a4170703a206d696e4761734c696d6974206e6f7420736574000000000000604482015260640161061e565b8082101561179e5760405162461bcd60e51b815260206004820152601b60248201527f4c7a4170703a20676173206c696d697420697320746f6f206c6f770000000000604482015260640161061e565b505050505050565b61ffff8516600090815260016020526040812080546117c490611f7e565b80601f01602080910402602001604051908101604052809291908181526020018280546117f090611f7e565b801561183d5780601f106118125761010080835404028352916020019161183d565b820191906000526020600020905b81548152906001019060200180831161182057829003601f168201915b5050505050905080516000036118bb5760405162461bcd60e51b815260206004820152603060248201527f4c7a4170703a2064657374696e6174696f6e20636861696e206973206e6f742060448201527f61207472757374656420736f7572636500000000000000000000000000000000606482015260840161061e565b6040517fc58031000000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c580310090349061192c908a9086908b908b908b908b9060040161258f565b6000604051808303818588803b15801561194557600080fd5b505af1158015611959573d6000803e3d6000fd5b5050505050505050505050565b61ffff8116811461110557600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156119b5576119b5611976565b604052919050565b600067ffffffffffffffff8211156119d7576119d7611976565b50601f01601f191660200190565b600082601f8301126119f657600080fd5b8135611a09611a04826119bd565b61198c565b818152846020838601011115611a1e57600080fd5b816020850160208301376000918101602001919091529392505050565b803567ffffffffffffffff81168114611a5357600080fd5b919050565b60008060008060808587031215611a6e57600080fd5b8435611a7981611966565b9350602085013567ffffffffffffffff80821115611a9657600080fd5b611aa2888389016119e5565b9450611ab060408801611a3b565b93506060870135915080821115611ac657600080fd5b50611ad3878288016119e5565b91505092959194509250565b60008060408385031215611af257600080fd5b8235611afd81611966565b946020939093013593505050565b600060208284031215611b1d57600080fd5b81356109a181611966565b80356001600160a01b0381168114611a5357600080fd5b801515811461110557600080fd5b60008060408385031215611b6057600080fd5b611b6983611b28565b91506020830135611b7981611b3f565b809150509250929050565b60008083601f840112611b9657600080fd5b50813567ffffffffffffffff811115611bae57600080fd5b602083019150836020828501011115611bc657600080fd5b9250929050565b600080600060408486031215611be257600080fd5b8335611bed81611966565b9250602084013567ffffffffffffffff811115611c0957600080fd5b611c1586828701611b84565b9497909650939450505050565b600080600060608486031215611c3757600080fd5b8335611c4281611966565b9250602084013567ffffffffffffffff811115611c5e57600080fd5b611c6a868287016119e5565b925050611c7960408501611a3b565b90509250925092565b60005b83811015611c9d578181015183820152602001611c85565b83811115610ad15750506000910152565b60008151808452611cc6816020860160208601611c82565b601f01601f19169290920160200192915050565b6020815260006109a16020830184611cae565b600060208284031215611cff57600080fd5b81356109a181611b3f565b600080600060608486031215611d1f57600080fd5b8335611d2a81611966565b95602085013595506040909401359392505050565b600067ffffffffffffffff821115611d5957611d59611976565b5060051b60200190565b60008060008060808587031215611d7957600080fd5b8435611d8481611966565b935060208581013567ffffffffffffffff80821115611da257600080fd5b611dae89838a016119e5565b95506040880135915080821115611dc457600080fd5b818801915088601f830112611dd857600080fd5b8135611de6611a0482611d3f565b81815260059190911b8301840190848101908b831115611e0557600080fd5b8585015b83811015611e3d57803585811115611e215760008081fd5b611e2f8e89838a01016119e5565b845250918601918601611e09565b50965050506060880135925080831115611e5657600080fd5b5050611ad3878288016119e5565b600060208284031215611e7657600080fd5b813567ffffffffffffffff811115611e8d57600080fd5b611e99848285016119e5565b949350505050565b600060208284031215611eb357600080fd5b6109a182611b28565b600080600080600060808688031215611ed457600080fd5b8535611edf81611966565b94506020860135611eef81611966565b935060408601359250606086013567ffffffffffffffff811115611f1257600080fd5b611f1e88828901611b84565b969995985093965092949392505050565b60008060008060808587031215611f4557600080fd5b8435611f5081611966565b93506020850135611f6081611966565b9250611f6e60408601611b28565b9396929550929360600135925050565b600181811c90821680611f9257607f821691505b602082108103611fb257634e487b7160e01b600052602260045260246000fd5b50919050565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b61ffff841681526040602082015260006111c9604083018486611fc8565b60006020828403121561202157600080fd5b81516109a181611966565b600061ffff80881683528087166020840152508460408301526080606083015261205a608083018486611fc8565b979650505050505050565b60008251612077818460208701611c82565b9190910192915050565b601f8211156120c757600081815260208120601f850160051c810160208610156120a85750805b601f850160051c820191505b8181101561179e578281556001016120b4565b505050565b67ffffffffffffffff8311156120e4576120e4611976565b6120f8836120f28354611f7e565b83612081565b6000601f84116001811461212c57600085156121145750838201355b600019600387901b1c1916600186901b178355610761565b600083815260209020601f19861690835b8281101561215d578685013582556020948501946001909201910161213d565b508682101561217a5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b600061219a611a04846119bd565b90508281528383830111156121ae57600080fd5b6109a1836020830184611c82565b600082601f8301126121cd57600080fd5b6109a18383516020850161218c565b6000602082840312156121ee57600080fd5b815167ffffffffffffffff81111561220557600080fd5b611e99848285016121bc565b61ffff8516815260806020820152600061222e6080830186611cae565b67ffffffffffffffff85166040840152828103606084015261205a8185611cae565b60008060006060848603121561226557600080fd5b835167ffffffffffffffff8082111561227d57600080fd5b612289878388016121bc565b94506020915081860151818111156122a057600080fd5b6122ac888289016121bc565b9450506040860151818111156122c157600080fd5b8601601f810188136122d257600080fd5b80516122e0611a0482611d3f565b81815260059190911b8201840190848101908a8311156122ff57600080fd5b8584015b838110156123375780518681111561231b5760008081fd5b6123298d89838901016121bc565b845250918601918601612303565b508096505050505050509250925092565b600081518084526020808501808196508360051b8101915082860160005b8581101561239057828403895261237e848351611cae565b98850198935090840190600101612366565b5091979650505050505050565b6040815260006123b06040830185612348565b905082151560208301529392505050565b600082601f8301126123d257600080fd5b815160206123e2611a0483611d3f565b82815260059290921b8401810191818101908684111561240157600080fd5b8286015b8481101561245657805167ffffffffffffffff8111156124255760008081fd5b8701603f810189136124375760008081fd5b61244889868301516040840161218c565b845250918301918301612405565b509695505050505050565b6000806040838503121561247457600080fd5b825167ffffffffffffffff8082111561248c57600080fd5b818501915085601f8301126124a057600080fd5b815160206124b0611a0483611d3f565b82815260059290921b840181019181810190898411156124cf57600080fd5b948201945b838610156124f65785516124e781611b3f565b825294820194908201906124d4565b9188015191965090935050508082111561250f57600080fd5b5061251c858286016123c1565b9150509250929050565b6060815260006125396060830186611cae565b828103602084015261254b8186611cae565b9050828103604084015261255f8185612348565b9695505050505050565b6000821982111561258a57634e487b7160e01b600052601160045260246000fd5b500190565b61ffff8716815260c0602082015260006125ac60c0830188611cae565b82810360408401526125be8188611cae565b6001600160a01b0387811660608601528616608085015283810360a085015290506125e98185611cae565b999850505050505050505056fea2646970667358221220d0c3b223dd8dc016e562de352b77bf7666178b4cfc07c0c33d9178a7e95f285764736f6c634300080f0033a264697066735822122023d17d18fcba2c62548e99e2b4b7fe70edd7b41c97a4a3a0ef1b15dd871670d264736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deployWithCreate2(address,bytes32)": {
        "params": {
          "_lzEndpoint": "the LayerZero endpoint SGLProxy will be associated with",
          "_salt": "CREATE2 salt used to compute the new address"
        }
      }
    },
    "title": "SGLProxy factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "creates a new ProxyDeployer contract"
      },
      "deployWithCreate2(address,bytes32)": {
        "notice": "creates a new SGLProxy contract using CREATE2 opcode"
      },
      "proxiesCount()": {
        "notice": "returns proxies count"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5834,
        "contract": "contracts/singularity/ProxyDeployer.sol:ProxyDeployer",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5837,
        "contract": "contracts/singularity/ProxyDeployer.sol:ProxyDeployer",
        "label": "proxies",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}