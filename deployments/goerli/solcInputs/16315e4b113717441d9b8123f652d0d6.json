{
  "language": "Solidity",
  "sources": {
    "contracts/mixologist/interfaces/IMixologist.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport './IOracle.sol';\r\nimport '../../IBeachBar.sol';\r\nimport '../../swappers/IMultiSwapper.sol';\r\n\r\ninterface IMixologist {\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n    event LogAccrue(\r\n        uint256 accruedAmount,\r\n        uint256 feeFraction,\r\n        uint64 rate,\r\n        uint256 utilization\r\n    );\r\n    event LogAddAsset(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share,\r\n        uint256 fraction\r\n    );\r\n    event LogAddCollateral(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share\r\n    );\r\n    event LogBorrow(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 feeAmount,\r\n        uint256 part\r\n    );\r\n    event LogExchangeRate(uint256 rate);\r\n    event LogFeeTo(address indexed newFeeTo);\r\n    event LogRemoveAsset(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share,\r\n        uint256 fraction\r\n    );\r\n    event LogRemoveCollateral(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 share\r\n    );\r\n    event LogRepay(\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256 amount,\r\n        uint256 part\r\n    );\r\n    event LogWithdrawFees(address indexed feeTo, uint256 feesEarnedFraction);\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event LogFlashLoan(\r\n        address indexed borrower,\r\n        uint256 amount,\r\n        uint256 feeAmount,\r\n        address indexed receiver\r\n    );\r\n    event LogYieldBoxFeesDeposit(uint256 feeShares, uint256 tapAmount);\r\n    event LogApprovalForAll(\r\n        address indexed _from,\r\n        address indexed _operator,\r\n        bool _approved\r\n    );\r\n    error NotApproved(address _from, address _operator);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function accrue() external;\r\n\r\n    function accrueInfo()\r\n        external\r\n        view\r\n        returns (\r\n            uint64 interestPerSecond,\r\n            uint64 lastBlockAccrued,\r\n            uint128 feesEarnedFraction\r\n        );\r\n\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    function addAsset(\r\n        address from,\r\n        address to,\r\n        bool skim,\r\n        uint256 share\r\n    ) external returns (uint256 fraction);\r\n\r\n    function addCollateral(\r\n        address from,\r\n        address to,\r\n        bool skim,\r\n        uint256 share\r\n    ) external;\r\n\r\n    function allowance(address, address) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function asset() external view returns (address);\r\n\r\n    function assetId() external view returns (uint256);\r\n\r\n    function balanceOf(address) external view returns (uint256);\r\n\r\n    function beachBar() external view returns (address);\r\n\r\n    function borrow(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (uint256 part, uint256 share);\r\n\r\n    function claimOwnership() external;\r\n\r\n    function collateral() external view returns (address);\r\n\r\n    function collateralId() external view returns (uint256);\r\n\r\n    /// @notice Allows batched call to Mixologist.\r\n    /// @param calls An array encoded call data.\r\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\r\n    function execute(bytes[] calldata calls, bool revertOnFail)\r\n        external\r\n        returns (bool[] memory successes, string[] memory results);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function exchangeRate() external view returns (uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function getInitData(\r\n        address collateral_,\r\n        address asset_,\r\n        IOracle oracle_,\r\n        bytes calldata oracleData_\r\n    ) external pure returns (bytes memory data);\r\n\r\n    function init(bytes calldata data) external payable;\r\n\r\n    function isSolvent(address user, bool open) external view returns (bool);\r\n\r\n    function liquidate(\r\n        address[] calldata users,\r\n        uint256[] calldata borrowParts,\r\n        address to,\r\n        IMultiSwapper swapper,\r\n        bool open\r\n    ) external;\r\n\r\n    function masterContract() external view returns (address);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function nonces(address) external view returns (uint256);\r\n\r\n    function oracle() external view returns (IOracle);\r\n\r\n    function oracleData() external view returns (bytes memory);\r\n\r\n    function owner() external view returns (address);\r\n\r\n    function pendingOwner() external view returns (address);\r\n\r\n    function permit(\r\n        address owner_,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    function removeAsset(\r\n        address from,\r\n        address to,\r\n        uint256 fraction\r\n    ) external returns (uint256 share);\r\n\r\n    function removeCollateral(\r\n        address from,\r\n        address to,\r\n        uint256 share\r\n    ) external;\r\n\r\n    function repay(\r\n        address from,\r\n        address to,\r\n        bool skim,\r\n        uint256 part\r\n    ) external returns (uint256 amount);\r\n\r\n    function setFeeTo(address newFeeTo) external;\r\n\r\n    function setSwapper(IMultiSwapper swapper, bool enable) external;\r\n\r\n    function swappers(IMultiSwapper) external view returns (bool);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function totalAsset() external view returns (uint128 elastic, uint128 base);\r\n\r\n    function totalBorrow()\r\n        external\r\n        view\r\n        returns (uint128 elastic, uint128 base);\r\n\r\n    function totalCollateralShare() external view returns (uint256);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    function transferOwnership(\r\n        address newOwner,\r\n        bool direct,\r\n        bool renounce\r\n    ) external;\r\n\r\n    function updateExchangeRate() external returns (bool updated, uint256 rate);\r\n\r\n    function userBorrowPart(address) external view returns (uint256);\r\n\r\n    function userCollateralShare(address) external view returns (uint256);\r\n\r\n    function withdrawFees() external;\r\n\r\n    function depositFeesToYieldBox(IMultiSwapper, IBeachBar.SwapData calldata)\r\n        external;\r\n\r\n    function yieldBox() external view returns (address payable);\r\n\r\n    function liquidationQueue() external view returns (address payable);\r\n}\r\n"
    },
    "contracts/mixologist/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IOracle {\r\n    /// @notice Get the latest exchange rate.\r\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\r\n    /// For example:\r\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\r\n    /// @return success if no valid (recent) rate is available, return false else true.\r\n    /// @return rate The rate of the requested asset / pair / pool.\r\n    function get(bytes calldata data)\r\n        external\r\n        returns (bool success, uint256 rate);\r\n\r\n    /// @notice Check the last exchange rate without any state changes.\r\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\r\n    /// For example:\r\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\r\n    /// @return success if no valid (recent) rate is available, return false else true.\r\n    /// @return rate The rate of the requested asset / pair / pool.\r\n    function peek(bytes calldata data)\r\n        external\r\n        view\r\n        returns (bool success, uint256 rate);\r\n\r\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\r\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\r\n    /// For example:\r\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\r\n    /// @return rate The rate of the requested asset / pair / pool.\r\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\r\n\r\n    /// @notice Returns a human readable (short) name about this oracle.\r\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\r\n    /// For example:\r\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\r\n    /// @return (string) A human readable symbol name about this oracle.\r\n    function symbol(bytes calldata data) external view returns (string memory);\r\n\r\n    /// @notice Returns a human readable name about this oracle.\r\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\r\n    /// For example:\r\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\r\n    /// @return (string) A human readable name about this oracle.\r\n    function name(bytes calldata data) external view returns (string memory);\r\n}\r\n"
    },
    "contracts/IBeachBar.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport './usd0/IUSD0.sol';\r\nimport './swappers/IMultiSwapper.sol';\r\n\r\ninterface IBeachBar {\r\n    struct SwapData {\r\n        uint256 minAssetAmount;\r\n    }\r\n\r\n    function swappers(IMultiSwapper swapper) external view returns (bool);\r\n\r\n    function yieldBox() external view returns (address payable);\r\n\r\n    function tapToken() external view returns (address);\r\n\r\n    function tapAssetId() external view returns (uint256);\r\n\r\n    function usdoToken() external view returns (address);\r\n\r\n    function usdoAssetId() external view returns (uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeVeTap() external view returns (address);\r\n}\r\n"
    },
    "contracts/swappers/IMultiSwapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\ninterface IMultiSwapper {\r\n    function swap(\r\n        uint256 tokenInId,\r\n        uint256 tokenOutId,\r\n        uint256 amountMinOut,\r\n        address to,\r\n        address[] calldata path,\r\n        uint256 shareIn\r\n    ) external returns (uint256 amountOut, uint256 shareOut);\r\n\r\n    function getOutputAmount(\r\n        uint256 tokenInId,\r\n        address[] calldata path,\r\n        uint256 shareIn\r\n    ) external view returns (uint256 amountOut);\r\n\r\n    function getInputAmount(\r\n        uint256 tokenOutId,\r\n        address[] calldata path,\r\n        uint256 shareOut\r\n    ) external view returns (uint256 amountIn);\r\n}\r\n"
    },
    "contracts/usd0/IUSD0.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\nimport '@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol';\r\n\r\ninterface IUSD0 is IStrictERC20 {\r\n    function mint(address _to, uint256 _amount) external;\r\n\r\n    function burn(address _from, uint256 _amount) external;\r\n}\r\n"
    },
    "@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\n    // By removing them you can't accidentally use them.\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n\ninterface IStrictERC20 {\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address _owner) external view returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /// @notice EIP 2612\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/mixologist/MXProxy.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.9;\r\n\r\nimport '@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol';\r\nimport 'tapioca-sdk/src/contracts/lzApp/NonblockingLzApp.sol';\r\nimport './interfaces/IMixologist.sol';\r\n\r\n/*\r\n\r\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\____        \r\n _\\///////\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\/////////\\\\\\_\\/////\\\\\\///______/\\\\\\///\\\\\\________/\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__       \r\n  _______\\/\\\\\\________/\\\\\\/////////\\\\\\_\\/\\\\\\_______\\/\\\\\\_____\\/\\\\\\_______/\\\\\\/__\\///\\\\\\____/\\\\\\/____________/\\\\\\/////////\\\\\\_      \r\n   _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\/\\\\\\______/\\\\\\______\\//\\\\\\__/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_     \r\n    _______\\/\\\\\\_______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\/////////________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \r\n     _______\\/\\\\\\_______\\/\\\\\\/////////\\\\\\_\\/\\\\\\_________________\\/\\\\\\_____\\//\\\\\\______/\\\\\\__\\//\\\\\\____________\\/\\\\\\/////////\\\\\\_   \r\n      _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_________________\\/\\\\\\______\\///\\\\\\__/\\\\\\_____\\///\\\\\\__________\\/\\\\\\_______\\/\\\\\\_  \r\n       _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\____\\///\\\\\\\\\\/________\\////\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_ \r\n        _______\\///________\\///________\\///__\\///______________\\///////////_______\\/////_____________\\/////////__\\///________\\///__\r\n\r\n*/\r\n\r\ncontract MXProxy is NonblockingLzApp {\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n    uint256 public constant NO_EXTRA_GAS = 0;\r\n    uint256 public constant FUNCTION_TYPE_SEND = 1;\r\n    bool public useCustomAdapterParams;\r\n    bool public enforceSameAddress;\r\n\r\n    // Address of the whitelisted Mixologist contracts\r\n    mapping(address => bool) public mixologists;\r\n\r\n    // ************ //\r\n    // *** EVENTS *** //\r\n    // ************ //\r\n\r\n    event ReceiveFromChain(\r\n        uint16 indexed _srcChainId,\r\n        address indexed _dstMixologist,\r\n        bytes _mxPayload\r\n    );\r\n    event SendToChain(\r\n        uint16 indexed _srcChainId,\r\n        address indexed _srcAddress,\r\n        bytes _mxPayload\r\n    );\r\n    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);\r\n    event LogMixologistStatus(address indexed mixologist, bool status);\r\n    event LogEnforce(bool _old, bool _new);\r\n\r\n    // ************ //\r\n    // *** METHODS *** //\r\n    // ************ //\r\n    constructor(address _lzEndpoint, address _owner)\r\n        NonblockingLzApp(_lzEndpoint)\r\n    {\r\n        _transferOwnership(_owner);\r\n        enforceSameAddress = true;\r\n    }\r\n\r\n    // --- Only owner methods ---\r\n    /// @notice set whitelist status for Mixologist\r\n    /// @dev callable by owner\r\n    /// @param _mixologist the Mixologist address\r\n    /// @param _status whitelisted/not\r\n    function updateMixologistStatus(address _mixologist, bool _status)\r\n        external\r\n        onlyOwner\r\n    {\r\n        mixologists[_mixologist] = _status;\r\n        emit LogMixologistStatus(_mixologist, _status);\r\n    }\r\n\r\n    /// @notice set custom adapter usage status\r\n    /// @param _useCustomAdapterParams true/false\r\n    function setUseCustomAdapterParams(bool _useCustomAdapterParams)\r\n        external\r\n        onlyOwner\r\n    {\r\n        useCustomAdapterParams = _useCustomAdapterParams;\r\n        emit SetUseCustomAdapterParams(_useCustomAdapterParams);\r\n    }\r\n\r\n    //TODO: TBD; remove as we already have trustedRemotes\r\n    /// @notice enforces CREATE2 proxies\r\n    /// @param _val true/false\r\n    function setEnforceSameAddress(bool _val) external onlyOwner {\r\n        emit LogEnforce(enforceSameAddress, _val);\r\n        enforceSameAddress = _val;\r\n    }\r\n\r\n    // --- Write methods ---\r\n    /// @notice execute Mixologist methods on another chain\r\n    /// @param _dstChainId te LayerZero destination chain id\r\n    /// @param _mixologistDstAddress destination Mixologist address\r\n    /// @param _mxCalls Mixologist calls\r\n    /// @param _adapterParams custom adapters\r\n    function executeOnChain(\r\n        uint16 _dstChainId,\r\n        bytes memory _mixologistDstAddress,\r\n        bytes[] memory _mxCalls,\r\n        bytes memory _adapterParams\r\n    ) external payable {\r\n        uint256 chainId = lzEndpoint.getChainId();\r\n        require(chainId != _dstChainId, 'MXProxy: Chain not valid');\r\n\r\n        _send(\r\n            msg.sender,\r\n            _dstChainId,\r\n            _mixologistDstAddress,\r\n            _mxCalls,\r\n            payable(msg.sender),\r\n            address(0),\r\n            _adapterParams\r\n        );\r\n    }\r\n\r\n    // --- Internal methods ---\r\n    /// @notice override of the '_nonblockingLzReceive' method\r\n    function _nonblockingLzReceive(\r\n        uint16 _srcChainId,\r\n        bytes memory, /*_srcAddress*/\r\n        uint64, /*_nonce*/\r\n        bytes memory _mxPayload\r\n    ) internal override {\r\n        // decode and load the toAddress\r\n        (\r\n            bytes memory fromAddressBytes,\r\n            bytes memory toAddressBytes,\r\n            bytes[] memory mxCalls\r\n        ) = abi.decode(_mxPayload, (bytes, bytes, bytes[]));\r\n\r\n        address fromAddress;\r\n        assembly {\r\n            fromAddress := mload(add(fromAddressBytes, 20))\r\n        }\r\n        if (enforceSameAddress) {\r\n            require(fromAddress == address(this), 'MXProxy: not proxy'); //should have the same address\r\n        }\r\n\r\n        address toAddress;\r\n        assembly {\r\n            toAddress := mload(add(toAddressBytes, 20))\r\n        }\r\n        require(mixologists[toAddress], 'MXProxy: Invalid Mixologist');\r\n\r\n        IMixologist(toAddress).execute(mxCalls, true);\r\n\r\n        emit ReceiveFromChain(_srcChainId, toAddress, _mxPayload);\r\n    }\r\n\r\n    /// @notice override of the '_send' method\r\n    function _send(\r\n        address _from,\r\n        uint16 _dstChainId,\r\n        bytes memory _toAddress,\r\n        bytes[] memory _mxCalls,\r\n        address payable _refundAddress,\r\n        address _zroPaymentAddress,\r\n        bytes memory _adapterParams\r\n    ) internal {\r\n        bytes memory mxPayload = abi.encode(\r\n            abi.encodePacked(address(this)),\r\n            _toAddress,\r\n            _mxCalls\r\n        );\r\n        if (useCustomAdapterParams) {\r\n            _checkGasLimit(\r\n                _dstChainId,\r\n                FUNCTION_TYPE_SEND,\r\n                _adapterParams,\r\n                NO_EXTRA_GAS\r\n            );\r\n        } else {\r\n            require(\r\n                _adapterParams.length == 0,\r\n                'LzApp: _adapterParams must be empty.'\r\n            );\r\n        }\r\n        _lzSend(\r\n            _dstChainId,\r\n            mxPayload,\r\n            _refundAddress,\r\n            _zroPaymentAddress,\r\n            _adapterParams\r\n        );\r\n\r\n        emit SendToChain(_dstChainId, _from, mxPayload);\r\n    }\r\n}\r\n"
    },
    "tapioca-sdk/src/contracts/lzApp/NonblockingLzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport \"./LzApp.sol\";\r\n\r\n/*\r\n * the default LayerZero messaging behaviour is blocking, i.e. any failed message will block the channel\r\n * this abstract class try-catch all fail messages and store locally for future retry. hence, non-blocking\r\n * NOTE: if the srcAddress is not configured properly, it will still block the message pathway from (srcChainId, srcAddress)\r\n */\r\nabstract contract NonblockingLzApp is LzApp {\r\n    constructor(address _endpoint) LzApp(_endpoint) {}\r\n\r\n    mapping(uint16 => mapping(bytes => mapping(uint64 => bytes32))) public failedMessages;\r\n\r\n    event MessageFailed(uint16 _srcChainId, bytes _srcAddress, uint64 _nonce, bytes _payload);\r\n\r\n    // overriding the virtual function in LzReceiver\r\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual override {\r\n        // try-catch all errors/exceptions\r\n        try this.nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {\r\n            // do nothing\r\n        } catch {\r\n            // error / exception\r\n            failedMessages[_srcChainId][_srcAddress][_nonce] = keccak256(_payload);\r\n            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);\r\n        }\r\n    }\r\n\r\n    function nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual {\r\n        // only internal transaction\r\n        require(_msgSender() == address(this), \"NonblockingLzApp: caller must be LzApp\");\r\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    //@notice override this function\r\n    function _nonblockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function retryMessage(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public payable virtual {\r\n        // assert there is message to retry\r\n        bytes32 payloadHash = failedMessages[_srcChainId][_srcAddress][_nonce];\r\n        require(payloadHash != bytes32(0), \"NonblockingLzApp: no stored message\");\r\n        require(keccak256(_payload) == payloadHash, \"NonblockingLzApp: invalid payload\");\r\n        // clear the stored message\r\n        failedMessages[_srcChainId][_srcAddress][_nonce] = bytes32(0);\r\n        // execute the message. revert if it fails again\r\n        _nonblockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n}\r\n"
    },
    "@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../interfaces/IERC20.sol\";\n\n// solhint-disable avoid-low-level-calls\n\nlibrary BoringERC20 {\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\n    bytes4 private constant SIG_TOTALSUPPLY = 0x18160ddd; // balanceOf(address)\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\n\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\n        if (data.length >= 64) {\n            return abi.decode(data, (string));\n        } else if (data.length == 32) {\n            uint8 i = 0;\n            while (i < 32 && data[i] != 0) {\n                i++;\n            }\n            bytes memory bytesArray = new bytes(i);\n            for (i = 0; i < 32 && data[i] != 0; i++) {\n                bytesArray[i] = data[i];\n            }\n            return string(bytesArray);\n        } else {\n            return \"???\";\n        }\n    }\n\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token symbol.\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (string) Token name.\n    function safeName(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\n        return success ? returnDataToString(data) : \"???\";\n    }\n\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\n    /// @param token The address of the ERC-20 token contract.\n    /// @return (uint8) Token decimals.\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\n    }\n\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\n    /// @param token The address of the ERC-20 token.\n    /// @param to The address of the user to check.\n    /// @return amount The token amount.\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\n        require(success && data.length >= 32, \"BoringERC20: BalanceOf failed\");\n        amount = abi.decode(data, (uint256));\n    }\n\n    /// @notice Provides a gas-optimized totalSupply to avoid a redundant extcodesize check in addition to the returndatasize check.\n    /// @param token The address of the ERC-20 token.\n    /// @return totalSupply The token totalSupply.\n    function safeTotalSupply(IERC20 token) internal view returns (uint256 totalSupply) {\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_TOTALSUPPLY));\n        require(success && data.length >= 32, \"BoringERC20: totalSupply failed\");\n        totalSupply = abi.decode(data, (uint256));\n    }\n\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: Transfer failed\");\n    }\n\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n    /// Reverts on a failed transfer.\n    /// @param token The address of the ERC-20 token.\n    /// @param from Transfer tokens from.\n    /// @param to Transfer tokens to.\n    /// @param amount The token amount.\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"BoringERC20: TransferFrom failed\");\n    }\n}\n"
    },
    "tapioca-sdk/src/contracts/lzApp/LzApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/ILayerZeroReceiver.sol\";\r\nimport \"../interfaces/ILayerZeroUserApplicationConfig.sol\";\r\nimport \"../interfaces/ILayerZeroEndpoint.sol\";\r\n\r\n/*\r\n * a generic LzReceiver implementation\r\n */\r\nabstract contract LzApp is Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig {\r\n    ILayerZeroEndpoint public immutable lzEndpoint;\r\n    mapping(uint16 => bytes) public trustedRemoteLookup;\r\n    mapping(uint16 => mapping(uint => uint)) public minDstGasLookup;\r\n\r\n    event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\r\n    event SetMinDstGasLookup(uint16 _dstChainId, uint _type, uint _dstGasAmount);\r\n\r\n    constructor(address _endpoint) {\r\n        lzEndpoint = ILayerZeroEndpoint(_endpoint);\r\n    }\r\n\r\n    function lzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) public virtual override {\r\n        // lzReceive must be called by the endpoint for security\r\n        require(_msgSender() == address(lzEndpoint), \"LzApp: invalid endpoint caller\");\r\n\r\n        bytes memory trustedRemote = trustedRemoteLookup[_srcChainId];\r\n        // if will still block the message pathway from (srcChainId, srcAddress). should not receive message from untrusted remote.\r\n        require(_srcAddress.length == trustedRemote.length && keccak256(_srcAddress) == keccak256(trustedRemote), \"LzApp: invalid source sending contract\");\r\n\r\n        _blockingLzReceive(_srcChainId, _srcAddress, _nonce, _payload);\r\n    }\r\n\r\n    // abstract function - the default behaviour of LayerZero is blocking. See: NonblockingLzApp if you dont need to enforce ordered messaging\r\n    function _blockingLzReceive(uint16 _srcChainId, bytes memory _srcAddress, uint64 _nonce, bytes memory _payload) internal virtual;\r\n\r\n    function _lzSend(uint16 _dstChainId, bytes memory _payload, address payable _refundAddress, address _zroPaymentAddress, bytes memory _adapterParams) internal virtual {\r\n        bytes memory trustedRemote = trustedRemoteLookup[_dstChainId];\r\n        require(trustedRemote.length != 0, \"LzApp: destination chain is not a trusted source\");\r\n        lzEndpoint.send{value: msg.value}(_dstChainId, trustedRemote, _payload, _refundAddress, _zroPaymentAddress, _adapterParams);\r\n    }\r\n\r\n    function _checkGasLimit(uint16 _dstChainId, uint _type, bytes memory _adapterParams, uint _extraGas) internal view {\r\n        uint providedGasLimit = getGasLimit(_adapterParams);\r\n        uint minGasLimit = minDstGasLookup[_dstChainId][_type] + _extraGas;\r\n        require(minGasLimit > 0, \"LzApp: minGasLimit not set\");\r\n        require(providedGasLimit >= minGasLimit, \"LzApp: gas limit is too low\");\r\n    }\r\n\r\n    function getGasLimit(bytes memory _adapterParams) public pure returns (uint gasLimit) {\r\n        assembly {\r\n            gasLimit := mload(add(_adapterParams, 34))\r\n        }\r\n    }\r\n\r\n    //---------------------------UserApplication config----------------------------------------\r\n    function getConfig(uint16 _version, uint16 _chainId, address, uint _configType) external view returns (bytes memory) {\r\n        return lzEndpoint.getConfig(_version, _chainId, address(this), _configType);\r\n    }\r\n\r\n    // generic config for LayerZero user Application\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external override onlyOwner {\r\n        lzEndpoint.setConfig(_version, _chainId, _configType, _config);\r\n    }\r\n\r\n    function setSendVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setSendVersion(_version);\r\n    }\r\n\r\n    function setReceiveVersion(uint16 _version) external override onlyOwner {\r\n        lzEndpoint.setReceiveVersion(_version);\r\n    }\r\n\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner {\r\n        lzEndpoint.forceResumeReceive(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    // allow owner to set it multiple times.\r\n    function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external onlyOwner {\r\n        trustedRemoteLookup[_srcChainId] = _srcAddress;\r\n        emit SetTrustedRemote(_srcChainId, _srcAddress);\r\n    }\r\n\r\n    function setMinDstGasLookup(uint16 _dstChainId, uint _type, uint _dstGasAmount) external onlyOwner {\r\n        require(_dstGasAmount > 0, \"LzApp: invalid _dstGasAmount\");\r\n        minDstGasLookup[_dstChainId][_type] = _dstGasAmount;\r\n        emit SetMinDstGasLookup(_dstChainId, _type, _dstGasAmount);\r\n    }\r\n\r\n    //--------------------------- VIEW FUNCTION ----------------------------------------\r\n    function isTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool) {\r\n        bytes memory trustedSource = trustedRemoteLookup[_srcChainId];\r\n        return keccak256(trustedSource) == keccak256(_srcAddress);\r\n    }\r\n}\r\n"
    },
    "tapioca-sdk/src/contracts/interfaces/ILayerZeroReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface ILayerZeroReceiver {\r\n    // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\r\n    // @param _srcChainId - the source endpoint identifier\r\n    // @param _srcAddress - the source sending contract address from the source chain\r\n    // @param _nonce - the ordered message nonce\r\n    // @param _payload - the signed payload is the UA bytes has encoded to be sent\r\n    function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external;\r\n}\r\n"
    },
    "tapioca-sdk/src/contracts/interfaces/ILayerZeroUserApplicationConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\ninterface ILayerZeroUserApplicationConfig {\r\n    // @notice set the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    // @param _config - configuration in the bytes. can encode arbitrary content.\r\n    function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external;\r\n\r\n    // @notice set the send() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setSendVersion(uint16 _version) external;\r\n\r\n    // @notice set the lzReceive() LayerZero messaging library version to _version\r\n    // @param _version - new messaging library version\r\n    function setReceiveVersion(uint16 _version) external;\r\n\r\n    // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\r\n    // @param _srcChainId - the chainId of the source chain\r\n    // @param _srcAddress - the contract address of the source contract at the source chain\r\n    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\r\n}\r\n"
    },
    "tapioca-sdk/src/contracts/interfaces/ILayerZeroEndpoint.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport \"./ILayerZeroUserApplicationConfig.sol\";\r\n\r\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\r\n    // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\r\n    // @param _payload - a custom bytes payload to send to the destination contract\r\n    // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\r\n    // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\r\n    // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\r\n    function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable;\r\n\r\n    // @notice used by the messaging library to publish verified payload\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source contract (as bytes) at the source chain\r\n    // @param _dstAddress - the address on destination chain\r\n    // @param _nonce - the unbound message ordering nonce\r\n    // @param _gasLimit - the gas limit for external contract execution\r\n    // @param _payload - verified payload to send to the destination contract\r\n    function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external;\r\n\r\n    // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64);\r\n\r\n    // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\r\n    // @param _srcAddress - the source chain contract address\r\n    function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\r\n\r\n    // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\r\n    // @param _dstChainId - the destination chain identifier\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    // @param _payload - the custom message to send over LayerZero\r\n    // @param _payInZRO - if false, user app pays the protocol fee in native token\r\n    // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\r\n    function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee);\r\n\r\n    // @notice get this Endpoint's immutable source identifier\r\n    function getChainId() external view returns (uint16);\r\n\r\n    // @notice the interface to retry failed message on this Endpoint destination\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    // @param _payload - the payload to be retried\r\n    function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external;\r\n\r\n    // @notice query if any STORED payload (message blocking) at the endpoint.\r\n    // @param _srcChainId - the source chain identifier\r\n    // @param _srcAddress - the source chain contract address\r\n    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool);\r\n\r\n    // @notice query if the _libraryAddress is valid for sending msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getSendLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the _libraryAddress is valid for receiving msgs.\r\n    // @param _userApplication - the user app address on this EVM chain\r\n    function getReceiveLibraryAddress(address _userApplication) external view returns (address);\r\n\r\n    // @notice query if the non-reentrancy guard for send() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isSendingPayload() external view returns (bool);\r\n\r\n    // @notice query if the non-reentrancy guard for receive() is on\r\n    // @return true if the guard is on. false otherwise\r\n    function isReceivingPayload() external view returns (bool);\r\n\r\n    // @notice get the configuration of the LayerZero messaging library of the specified version\r\n    // @param _version - messaging library version\r\n    // @param _chainId - the chainId for the pending config change\r\n    // @param _userApplication - the contract address of the user application\r\n    // @param _configType - type of configuration. every messaging library has its own convention.\r\n    function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory);\r\n\r\n    // @notice get the send() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getSendVersion(address _userApplication) external view returns (uint16);\r\n\r\n    // @notice get the lzReceive() LayerZero messaging library version\r\n    // @param _userApplication - the contract address of the user application\r\n    function getReceiveVersion(address _userApplication) external view returns (uint16);\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/mixologist/ProxyDeployer.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.9;\r\n\r\nimport './MXProxy.sol';\r\n\r\n/*\r\n\r\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\____        \r\n _\\///////\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\/////////\\\\\\_\\/////\\\\\\///______/\\\\\\///\\\\\\________/\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\__       \r\n  _______\\/\\\\\\________/\\\\\\/////////\\\\\\_\\/\\\\\\_______\\/\\\\\\_____\\/\\\\\\_______/\\\\\\/__\\///\\\\\\____/\\\\\\/____________/\\\\\\/////////\\\\\\_      \r\n   _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\/\\\\\\______/\\\\\\______\\//\\\\\\__/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_     \r\n    _______\\/\\\\\\_______\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\/////////________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____________\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \r\n     _______\\/\\\\\\_______\\/\\\\\\/////////\\\\\\_\\/\\\\\\_________________\\/\\\\\\_____\\//\\\\\\______/\\\\\\__\\//\\\\\\____________\\/\\\\\\/////////\\\\\\_   \r\n      _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_________________\\/\\\\\\______\\///\\\\\\__/\\\\\\_____\\///\\\\\\__________\\/\\\\\\_______\\/\\\\\\_  \r\n       _______\\/\\\\\\_______\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\____\\///\\\\\\\\\\/________\\////\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_ \r\n        _______\\///________\\///________\\///__\\///______________\\///////////_______\\/////_____________\\/////////__\\///________\\///__\r\n\r\n*/\r\n\r\ncontract ProxyDeployer {\r\n    // ************ //\r\n    // *** VARS *** //\r\n    // ************ //\r\n    address public owner;\r\n    address[] public proxies;\r\n\r\n    // ************ //\r\n    // *** EVENTS *** //\r\n    // ************ //\r\n    event LogDeploy(address indexed lzEndpoint, address indexed cloneAddress);\r\n\r\n    // ************ //\r\n    // *** METHODS *** //\r\n    // ************ //\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // --- View methods ---\r\n    /// @notice returns proxies count\r\n    function proxiesCount() external view returns (uint256) {\r\n        return proxies.length;\r\n    }\r\n\r\n    // --- Only owner methods ---\r\n    /// @notice creates a new MXProxy contract using CREATE2 opcode\r\n    /// @param _lzEndpoint the LayerZero endpoint MXProxy will be associated with\r\n    /// @param _salt CREATE2 salt used to compute the new address\r\n    function deployWithCreate2(address _lzEndpoint, bytes32 _salt)\r\n        public\r\n        payable\r\n        returns (address cloneAddress)\r\n    {\r\n        require(msg.sender == owner, 'ProxyDeployer: unauthorized');\r\n        // https://docs.soliditylang.org/en/latest/control-structures.html#salted-contract-creations-create2\r\n        cloneAddress = address(new MXProxy{salt: _salt}(_lzEndpoint, owner));\r\n        proxies.push(cloneAddress);\r\n        emit LogDeploy(_lzEndpoint, cloneAddress);\r\n    }\r\n}\r\n"
    },
    "contracts/liquidationQueue/mocks/LQMixologistMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport '../ILiquidationQueue.sol';\r\nimport '../../IBeachBar.sol';\r\n\r\ncontract LQMixologistMock {\r\n    IBeachBar immutable beachBar;\r\n\r\n    uint256 immutable assetId;\r\n\r\n    uint256 constant EXCHANGE_RATE_PRECISION = 1e18;\r\n\r\n    constructor(IBeachBar _beachBar, uint256 _assetId) {\r\n        beachBar = _beachBar;\r\n        assetId = _assetId;\r\n    }\r\n\r\n    function initLq(\r\n        ILiquidationQueue liquidationQueue,\r\n        LiquidationQueueMeta calldata lqMeta\r\n    ) external {\r\n        liquidationQueue.init(lqMeta, address(this));\r\n    }\r\n}\r\n"
    },
    "contracts/liquidationQueue/ILiquidationQueue.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\nimport './bidders/IBidder.sol';\r\n\r\nstruct Bidder {\r\n    bool isUsdo;\r\n    bool swapOnExecute;\r\n    uint256 usdoAmount;\r\n    uint256 liquidatedAssetAmount;\r\n    uint256 timestamp; // Timestamp in second of the last bid.\r\n}\r\n\r\nstruct OrderBookPoolEntry {\r\n    address bidder;\r\n    Bidder bidInfo;\r\n}\r\n\r\nstruct OrderBookPoolInfo {\r\n    uint32 poolId;\r\n    uint32 nextBidPull; // Next position in `entries` to start pulling bids from\r\n    uint32 nextBidPush; // Next position in `entries` to start pushing bids to\r\n}\r\n\r\nstruct LiquidationQueueMeta {\r\n    uint256 activationTime; // Time needed before a bid can be activated for execution\r\n    uint256 minBidAmount; // Minimum bid amount\r\n    address feeCollector; // Address of the fee collector\r\n    IBidder bidExecutionSwapper; //Allows swapping USD0 to collateral when a bid is executed\r\n    IBidder usdoSwapper; //Allows swapping any other stablecoin to USD0\r\n}\r\n\r\ninterface ILiquidationQueue {\r\n    function init(LiquidationQueueMeta calldata, address mixologist) external;\r\n\r\n    function onlyOnce() external view returns (bool);\r\n\r\n    function setBidExecutionSwapper(address swapper) external;\r\n\r\n    function setUsdoSwapper(address swapper) external;\r\n\r\n    function getNextAvailBidPool()\r\n        external\r\n        view\r\n        returns (uint256 i, bool available);\r\n\r\n    function executeBids(\r\n        uint256 collateralAmountToLiquidate,\r\n        bytes calldata swapData\r\n    ) external returns (uint256 amountExecuted, uint256 collateralLiquidated);\r\n}\r\n"
    },
    "contracts/liquidationQueue/bidders/IBidder.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\n/// @notice Used for performing swap operations when bidding on LiquidationQueue\r\ninterface IBidder {\r\n    /// @notice returns the unique name\r\n    function name() external view returns (string memory);\r\n\r\n    /// @notice returns the amount of collateral\r\n    /// @param mixologist Market to query for\r\n    /// @param tokenInId Token in YieldBox asset id\r\n    /// @param amountIn Token in amount\r\n    /// @param data extra data used for retrieving the ouput\r\n    function getOutputAmount(\r\n        address mixologist,\r\n        uint256 tokenInId,\r\n        uint256 amountIn,\r\n        bytes calldata data\r\n    ) external view returns (uint256);\r\n\r\n    /// @notice swap USD0 to collateral\r\n    /// @param mixologist Market to swap for\r\n    /// @param tokenInId Token in asset id\r\n    /// @param amountIn Token in amount\r\n    /// @param data extra data used for the swap operation\r\n    function swap(\r\n        address mixologist,\r\n        uint256 tokenInId,\r\n        uint256 amountIn,\r\n        bytes calldata data\r\n    ) external returns (uint256);\r\n\r\n    /// @notice returns token tokenIn amount based on tokenOut amount\r\n    /// @param mixologist Market to query for\r\n    /// @param tokenInId Token in asset id\r\n    /// @param amountOut Token out amount\r\n    /// @param data extra data used for retrieving the ouput\r\n    function getInputAmount(\r\n        address mixologist,\r\n        uint256 tokenInId,\r\n        uint256 amountOut,\r\n        bytes calldata data\r\n    ) external view returns (uint256);\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}