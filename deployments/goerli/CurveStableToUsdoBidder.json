{
  "address": "0xE9183e3E4E0F077098C72939f6b7DBe23F69234B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ICurveSwapper",
          "name": "curveSwapper_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "curvePoolAssetCount_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_old",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_new",
          "type": "address"
        }
      ],
      "name": "CurveSwapperUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveSwapper",
      "outputs": [
        {
          "internalType": "contract ICurveSwapper",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISingularity",
          "name": "mixologist",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenInId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "getInputAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISingularity",
          "name": "mixologist",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenInId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "getOutputAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ICurveSwapper",
          "name": "_swapper",
          "type": "address"
        }
      ],
      "name": "setCurveSwapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISingularity",
          "name": "mixologist",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenInId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xace99e280b21d59447e30beaa3cdf4e817fef19b55283d7ed5a85b71a4eb8e7c",
  "receipt": {
    "to": null,
    "from": "0x40282d3Cf4890D9806BC1853e97a59C93D813653",
    "contractAddress": "0xE9183e3E4E0F077098C72939f6b7DBe23F69234B",
    "transactionIndex": 86,
    "gasUsed": "1586203",
    "logsBloom": "0x
    "blockHash": "0x3e70239b1bfc6320e7070cdfc3d7035da343759a6058a253703742f1680f8c90",
    "transactionHash": "0xace99e280b21d59447e30beaa3cdf4e817fef19b55283d7ed5a85b71a4eb8e7c",
    "logs": [
      {
        "transactionIndex": 86,
        "blockNumber": 7964114,
        "transactionHash": "0xace99e280b21d59447e30beaa3cdf4e817fef19b55283d7ed5a85b71a4eb8e7c",
        "address": "0xE9183e3E4E0F077098C72939f6b7DBe23F69234B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000040282d3cf4890d9806bc1853e97a59c93d813653"
        ],
        "data": "0x",
        "logIndex": 83,
        "blockHash": "0x3e70239b1bfc6320e7070cdfc3d7035da343759a6058a253703742f1680f8c90"
      }
    ],
    "blockNumber": 7964114,
    "cumulativeGasUsed": "7519428",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x728dA393bF1bf8Fa2a56622C8B1e4EfB1CdfE037",
    "4"
  ],
  "numDeployments": 1,
  "solcInputHash": "b101ec03b9647340104c60618ab0c14e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ICurveSwapper\",\"name\":\"curveSwapper_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"curvePoolAssetCount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_old\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_new\",\"type\":\"address\"}],\"name\":\"CurveSwapperUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveSwapper\",\"outputs\":[{\"internalType\":\"contract ICurveSwapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISingularity\",\"name\":\"mixologist\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenInId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISingularity\",\"name\":\"mixologist\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenInId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICurveSwapper\",\"name\":\"_swapper\",\"type\":\"address\"}],\"name\":\"setCurveSwapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISingularity\",\"name\":\"mixologist\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenInId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Performs a swap operation between stable and USD0 through 3CRV+USD0 pool\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"curvePoolAssetCount_\":\"Curve pool assets number\",\"curveSwapper_\":\"CurveSwapper address\"}},\"getInputAmount(address,uint256,uint256,bytes)\":{\"params\":{\"amountOut\":\"Token out amount\",\"tokenInId\":\"Token in asset id\"}},\"getOutputAmount(address,uint256,uint256,bytes)\":{\"params\":{\"amountIn\":\"Stablecoin amount\"}},\"setCurveSwapper(address)\":{\"details\":\"used for USD0 to WETH swap\",\"params\":{\"_swapper\":\"The curve pool swapper address\"}},\"swap(address,uint256,uint256,bytes)\":{\"params\":{\"amountIn\":\"Stablecoin amount\",\"data\":\"extra data used for the swap operation\",\"tokenInId\":\"Stablecoin asset id\"}},\"transferOwnership(address,bool,bool)\":{\"params\":{\"direct\":\"True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\",\"newOwner\":\"Address of the new owner.\",\"renounce\":\"Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\"}}},\"title\":\"Swaps Stable to USD0 through Curve\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimOwnership()\":{\"notice\":\"Needs to be called by `pendingOwner` to claim ownership.\"},\"constructor\":{\"notice\":\"creates a new CurveStableToUsdoBidder\"},\"curveSwapper()\":{\"notice\":\"3Crv+USD0 swapper\"},\"getInputAmount(address,uint256,uint256,bytes)\":{\"notice\":\"returns token tokenIn amount based on tokenOut amount\"},\"getOutputAmount(address,uint256,uint256,bytes)\":{\"notice\":\"returns the amount of collateral\"},\"name()\":{\"notice\":\"returns the unique name\"},\"setCurveSwapper(address)\":{\"notice\":\"sets the Curve swapper\"},\"swap(address,uint256,uint256,bytes)\":{\"notice\":\"swaps stable to collateral\"},\"transferOwnership(address,bool,bool)\":{\"notice\":\"Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidationQueue/bidders/CurveStableToUsdoBidder.sol\":\"CurveStableToUsdoBidder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/BoringOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Simplified by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x5c95af9d26812f279c232d8908c3e2e4ab5054ec1a76275589be4b40857a281c\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\\n    // By removing them you can't accidentally use them.\\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IStrictERC20 {\\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3ab46c194bf6ebcb4ae1b094c7e41061ef651ee1150d1a07beaf9db085dee0ee\",\"license\":\"MIT\"},\"contracts/IBeachBar.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport './usd0/IUSD0.sol';\\nimport './swappers/IMultiSwapper.sol';\\n\\ninterface IBeachBar {\\n    /// @notice swap extra data\\n    struct SwapData {\\n        uint256 minAssetAmount;\\n    }\\n\\n    /// @notice Used to define the MasterContract's type\\n    enum ContractType {\\n        lowRisk,\\n        mediumRisk,\\n        highRisk\\n    }\\n\\n    /// @notice MasterContract address and type\\n    struct MasterContract {\\n        address location;\\n        ContractType risk;\\n    }\\n\\n    function swappers(IMultiSwapper swapper) external view returns (bool);\\n\\n    function yieldBox() external view returns (address payable);\\n\\n    function tapToken() external view returns (address);\\n\\n    function tapAssetId() external view returns (uint256);\\n\\n    function usdoToken() external view returns (address);\\n\\n    function usdoAssetId() external view returns (uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeVeTap() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5381ab8f101295e4b260ae74ec45253cae6afbc8d36ca9d5acc001ae327806b9\",\"license\":\"UNLICENSED\"},\"contracts/libraries/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable func-name-mixedcase\\n// solhint-disable var-name-mixedcase\\n\\ninterface ICurvePool {\\n    function coins(uint256 i) external view returns (address);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcf12b8a455d1be42b0d4508526dca33c81e37efcff048da9f3255994d61d941f\",\"license\":\"MIT\"},\"contracts/liquidationQueue/ILiquidationQueue.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport './bidders/IBidder.sol';\\n\\ninterface ILiquidationQueue {\\n    enum MODE {\\n        ADD,\\n        SUB\\n    }\\n\\n    struct Bidder {\\n        bool isUsdo;\\n        bool swapOnExecute;\\n        uint256 usdoAmount;\\n        uint256 liquidatedAssetAmount;\\n        uint256 timestamp; // Timestamp in second of the last bid.\\n    }\\n\\n    struct OrderBookPoolEntry {\\n        address bidder;\\n        Bidder bidInfo;\\n    }\\n\\n    struct OrderBookPoolInfo {\\n        uint32 poolId;\\n        uint32 nextBidPull; // Next position in `entries` to start pulling bids from\\n        uint32 nextBidPush; // Next position in `entries` to start pushing bids to\\n    }\\n\\n    struct LiquidationQueueMeta {\\n        uint256 activationTime; // Time needed before a bid can be activated for execution\\n        uint256 minBidAmount; // Minimum bid amount\\n        address feeCollector; // Address of the fee collector\\n        IBidder bidExecutionSwapper; //Allows swapping USD0 to collateral when a bid is executed\\n        IBidder usdoSwapper; //Allows swapping any other stablecoin to USD0\\n    }\\n    \\n    struct BidExecutionData {\\n        uint256 curPoolId;\\n        bool isBidAvail;\\n        OrderBookPoolInfo poolInfo;\\n        OrderBookPoolEntry orderBookEntry;\\n        OrderBookPoolEntry orderBookEntryCopy;\\n        uint256 totalPoolAmountExecuted;\\n        uint256 totalPoolCollateralLiquidated;\\n        uint256 totalUsdoAmountUsed;\\n        uint256 exchangeRate;\\n        uint256 discountedBidderAmount;\\n    }\\n\\n    function init(LiquidationQueueMeta calldata, address mixologist) external;\\n\\n    function onlyOnce() external view returns (bool);\\n\\n    function setBidExecutionSwapper(address swapper) external;\\n\\n    function setUsdoSwapper(address swapper) external;\\n\\n    function getNextAvailBidPool()\\n        external\\n        view\\n        returns (uint256 i, bool available);\\n\\n    function executeBids(\\n        uint256 collateralAmountToLiquidate,\\n        bytes calldata swapData\\n    ) external returns (uint256 amountExecuted, uint256 collateralLiquidated);\\n}\\n\",\"keccak256\":\"0xf46763d4286be806f023e74c8795af7a0e72db816bf2bf158b1d3ebfeba287cd\",\"license\":\"UNLICENSED\"},\"contracts/liquidationQueue/bidders/CurveStableToUsdoBidder.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport '@boringcrypto/boring-solidity/contracts/BoringOwnable.sol';\\n\\nimport '../../IBeachBar.sol';\\nimport '../ILiquidationQueue.sol';\\nimport '../../libraries/ICurvePool.sol';\\nimport '../../swappers/ICurveSwapper.sol';\\nimport '../../singularity/interfaces/ISingularity.sol';\\nimport '../../../yieldbox/contracts/interfaces/IYieldBox.sol';\\n\\n/*\\n\\n__/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\_____________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____        \\n _\\\\///////\\\\\\\\\\\\/////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/////\\\\\\\\\\\\///______/\\\\\\\\\\\\///\\\\\\\\\\\\________/\\\\\\\\\\\\////////____/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\__       \\n  _______\\\\/\\\\\\\\\\\\________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______/\\\\\\\\\\\\/__\\\\///\\\\\\\\\\\\____/\\\\\\\\\\\\/____________/\\\\\\\\\\\\/////////\\\\\\\\\\\\_      \\n   _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\/______\\\\/\\\\\\\\\\\\______/\\\\\\\\\\\\______\\\\//\\\\\\\\\\\\__/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_     \\n    _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\/////////________\\\\/\\\\\\\\\\\\_____\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_____________\\\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_    \\n     _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\_____\\\\//\\\\\\\\\\\\______/\\\\\\\\\\\\__\\\\//\\\\\\\\\\\\____________\\\\/\\\\\\\\\\\\/////////\\\\\\\\\\\\_   \\n      _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_________________\\\\/\\\\\\\\\\\\______\\\\///\\\\\\\\\\\\__/\\\\\\\\\\\\_____\\\\///\\\\\\\\\\\\__________\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_  \\n       _______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\______________/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\____\\\\///\\\\\\\\\\\\\\\\\\\\/________\\\\////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\\\/\\\\\\\\\\\\_______\\\\/\\\\\\\\\\\\_ \\n        _______\\\\///________\\\\///________\\\\///__\\\\///______________\\\\///////////_______\\\\/////_____________\\\\/////////__\\\\///________\\\\///__\\n\\n*/\\n\\n/// @title Swaps Stable to USD0 through Curve\\n/// @dev Performs a swap operation between stable and USD0 through 3CRV+USD0 pool\\ncontract CurveStableToUsdoBidder is BoringOwnable {\\n    // ************ //\\n    // *** VARS *** //\\n    // ************ //\\n\\n    /// @notice 3Crv+USD0 swapper\\n    ICurveSwapper public curveSwapper;\\n    /// @notice Curve pool assets number\\n    uint256 curveAssetsLength;\\n\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n    event CurveSwapperUpdated(address indexed _old, address indexed _new);\\n\\n    /// @notice creates a new CurveStableToUsdoBidder\\n    /// @param curveSwapper_ CurveSwapper address\\n    /// @param curvePoolAssetCount_ Curve pool assets number\\n    constructor(ICurveSwapper curveSwapper_, uint256 curvePoolAssetCount_) {\\n        curveSwapper = curveSwapper_;\\n        curveAssetsLength = curvePoolAssetCount_;\\n    }\\n\\n    // ********************** //\\n    // *** VIEW FUNCTIONS *** //\\n    // ********************** //\\n    /// @notice returns the unique name\\n    function name() external pure returns (string memory) {\\n        return 'stable -> USD0 (3Crv+USD0)';\\n    }\\n\\n    /// @notice returns the amount of collateral\\n    /// @param amountIn Stablecoin amount\\n    function getOutputAmount(\\n        ISingularity mixologist,\\n        uint256 tokenInId,\\n        uint256 amountIn,\\n        bytes calldata\\n    ) external view returns (uint256) {\\n        require(\\n            IBeachBar(mixologist.beachBar()).usdoToken() != address(0),\\n            'USD0 not set'\\n        );\\n\\n        uint256 usdoAssetId = IBeachBar(mixologist.beachBar()).usdoAssetId();\\n        if (tokenInId == usdoAssetId) {\\n            return amountIn;\\n        }\\n\\n        return\\n            _getOutput(\\n                IYieldBox(mixologist.yieldBox()),\\n                tokenInId,\\n                usdoAssetId,\\n                amountIn\\n            );\\n    }\\n\\n    /// @notice returns token tokenIn amount based on tokenOut amount\\n    /// @param tokenInId Token in asset id\\n    /// @param amountOut Token out amount\\n    function getInputAmount(\\n        ISingularity mixologist,\\n        uint256 tokenInId,\\n        uint256 amountOut,\\n        bytes calldata\\n    ) external view returns (uint256) {\\n        require(\\n            IBeachBar(mixologist.beachBar()).usdoToken() != address(0),\\n            'USD0 not set'\\n        );\\n\\n        uint256 usdoAssetId = IBeachBar(mixologist.beachBar()).usdoAssetId();\\n        if (tokenInId == usdoAssetId) {\\n            return amountOut;\\n        }\\n\\n        return\\n            _getOutput(\\n                IYieldBox(mixologist.yieldBox()),\\n                usdoAssetId,\\n                tokenInId,\\n                amountOut\\n            );\\n    }\\n\\n    // ************************ //\\n    // *** PUBLIC FUNCTIONS *** //\\n    // ************************ //\\n\\n    /// @notice swaps stable to collateral\\n    /// @param tokenInId Stablecoin asset id\\n    /// @param amountIn Stablecoin amount\\n    /// @param data extra data used for the swap operation\\n    function swap(\\n        ISingularity mixologist,\\n        uint256 tokenInId,\\n        uint256 amountIn,\\n        bytes calldata data\\n    ) external returns (uint256) {\\n        require(\\n            IBeachBar(mixologist.beachBar()).usdoToken() != address(0),\\n            'USD0 not set'\\n        );\\n        IYieldBox yieldBox = IYieldBox(mixologist.yieldBox());\\n        ILiquidationQueue liquidationQueue = ILiquidationQueue(\\n            mixologist.liquidationQueue()\\n        );\\n\\n        uint256 usdoAssetId = IBeachBar(mixologist.beachBar()).usdoAssetId();\\n        require(msg.sender == address(liquidationQueue), 'only LQ');\\n        if (tokenInId == usdoAssetId) {\\n            yieldBox.transfer(\\n                address(this),\\n                address(liquidationQueue),\\n                tokenInId,\\n                yieldBox.toShare(tokenInId, amountIn, false)\\n            );\\n            return amountIn;\\n        }\\n\\n        uint256 _usdoMin = 0;\\n        if (data.length > 0) {\\n            //should always be sent\\n            _usdoMin = abi.decode(data, (uint256));\\n        }\\n        yieldBox.transfer(\\n            address(this),\\n            address(curveSwapper),\\n            tokenInId,\\n            yieldBox.toShare(tokenInId, amountIn, false)\\n        );\\n        return\\n            _swap(\\n                yieldBox,\\n                tokenInId,\\n                usdoAssetId,\\n                amountIn,\\n                _usdoMin,\\n                address(liquidationQueue)\\n            );\\n    }\\n\\n    // *********************** //\\n    // *** OWNER FUNCTIONS *** //\\n    // *********************** //\\n    /// @notice sets the Curve swapper\\n    /// @dev used for USD0 to WETH swap\\n    /// @param _swapper The curve pool swapper address\\n    function setCurveSwapper(ICurveSwapper _swapper) external onlyOwner {\\n        emit CurveSwapperUpdated(address(curveSwapper), address(_swapper));\\n        curveSwapper = _swapper;\\n    }\\n\\n    // ************************* //\\n    // *** PRIVATE FUNCTIONS *** //\\n    // ************************* //\\n    function _getCurveIndex(address token) private view returns (uint256) {\\n        int256 index = -1;\\n        for (uint256 i = 0; i < curveAssetsLength; i++) {\\n            address tokenAtIndex = ICurvePool(curveSwapper.curvePool()).coins(\\n                i\\n            );\\n            if (tokenAtIndex == token) {\\n                index = int256(i);\\n            }\\n        }\\n        require(index > -1, 'asset not found');\\n        return uint256(index);\\n    }\\n\\n    function _getOutput(\\n        IYieldBox yieldBox,\\n        uint256 tokenInId,\\n        uint256 tokenOutId,\\n        uint256 amountIn\\n    ) private view returns (uint256) {\\n        (, address tokenInAddress, , ) = yieldBox.assets(tokenInId);\\n        (, address tokenOutAddress, , ) = yieldBox.assets(tokenOutId);\\n\\n        uint256 tokenInCurveIndex = _getCurveIndex(tokenInAddress);\\n        uint256 tokenOutCurveIndex = _getCurveIndex(tokenOutAddress);\\n        uint256[] memory indexes = new uint256[](2);\\n        indexes[0] = tokenInCurveIndex;\\n        indexes[1] = tokenOutCurveIndex;\\n\\n        uint256 share = yieldBox.toShare(tokenInId, amountIn, false);\\n        return curveSwapper.getOutputAmount(tokenInId, indexes, share);\\n    }\\n\\n    function _swap(\\n        IYieldBox yieldBox,\\n        uint256 stableAssetId,\\n        uint256 usdoAssetId,\\n        uint256 amountIn,\\n        uint256 minAmount,\\n        address to\\n    ) private returns (uint256) {\\n        (, address tokenInAddress, , ) = yieldBox.assets(stableAssetId);\\n        (, address tokenOutAddress, , ) = yieldBox.assets(usdoAssetId);\\n\\n        uint256 tokenInCurveIndex = _getCurveIndex(tokenInAddress);\\n        uint256 tokenOutCurveIndex = _getCurveIndex(tokenOutAddress);\\n\\n        uint256[] memory indexes = new uint256[](2);\\n        indexes[0] = tokenInCurveIndex;\\n        indexes[1] = tokenOutCurveIndex;\\n        uint256 tokenInShare = yieldBox.toShare(stableAssetId, amountIn, false);\\n\\n        (uint256 amountOut, ) = curveSwapper.swap(\\n            stableAssetId,\\n            usdoAssetId,\\n            indexes,\\n            tokenInShare,\\n            minAmount,\\n            to\\n        );\\n\\n        return amountOut;\\n    }\\n}\\n\",\"keccak256\":\"0xfb7f1f7e86f75174424b5a6c0a6d35c95855d7d7004ae78364047df5d09bc5e9\",\"license\":\"UNLICENSED\"},\"contracts/liquidationQueue/bidders/IBidder.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/// @notice Used for performing swap operations when bidding on LiquidationQueue\\ninterface IBidder {\\n    /// @notice returns the unique name\\n    function name() external view returns (string memory);\\n\\n    /// @notice returns the amount of collateral\\n    /// @param mixologist Market to query for\\n    /// @param tokenInId Token in YieldBox asset id\\n    /// @param amountIn Token in amount\\n    /// @param data extra data used for retrieving the ouput\\n    function getOutputAmount(\\n        address mixologist,\\n        uint256 tokenInId,\\n        uint256 amountIn,\\n        bytes calldata data\\n    ) external view returns (uint256);\\n\\n    /// @notice swap USD0 to collateral\\n    /// @param mixologist Market to swap for\\n    /// @param tokenInId Token in asset id\\n    /// @param amountIn Token in amount\\n    /// @param data extra data used for the swap operation\\n    function swap(\\n        address mixologist,\\n        uint256 tokenInId,\\n        uint256 amountIn,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    /// @notice returns token tokenIn amount based on tokenOut amount\\n    /// @param mixologist Market to query for\\n    /// @param tokenInId Token in asset id\\n    /// @param amountOut Token out amount\\n    /// @param data extra data used for retrieving the ouput\\n    function getInputAmount(\\n        address mixologist,\\n        uint256 tokenInId,\\n        uint256 amountOut,\\n        bytes calldata data\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xaf46b985181315cf03bacc77f3cd60622aa1b3b97aa7a6ca8645b85d6a6e78b6\",\"license\":\"UNLICENSED\"},\"contracts/singularity/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOracle {\\n    /// @notice Get the latest exchange rate.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function get(bytes calldata data)\\n        external\\n        returns (bool success, uint256 rate);\\n\\n    /// @notice Check the last exchange rate without any state changes.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peek(bytes calldata data)\\n        external\\n        view\\n        returns (bool success, uint256 rate);\\n\\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\\n\\n    /// @notice Returns a human readable (short) name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable symbol name about this oracle.\\n    function symbol(bytes calldata data) external view returns (string memory);\\n\\n    /// @notice Returns a human readable name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable name about this oracle.\\n    function name(bytes calldata data) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb763ed5015f106886475ef7354636556d3bb4bfdc43ee1ef1458ccc5f86f92ea\",\"license\":\"MIT\"},\"contracts/singularity/interfaces/ISingularity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport './IOracle.sol';\\r\\nimport '../../IBeachBar.sol';\\r\\nimport '../../swappers/IMultiSwapper.sol';\\r\\n\\r\\ninterface ISingularity {\\r\\n    struct AccrueInfo {\\r\\n        uint64 interestPerSecond;\\r\\n        uint64 lastAccrued;\\r\\n        uint128 feesEarnedFraction;\\r\\n    }\\r\\n\\r\\n    event Approval(\\r\\n        address indexed _owner,\\r\\n        address indexed _spender,\\r\\n        uint256 _value\\r\\n    );\\r\\n    event LogAccrue(\\r\\n        uint256 accruedAmount,\\r\\n        uint256 feeFraction,\\r\\n        uint64 rate,\\r\\n        uint256 utilization\\r\\n    );\\r\\n    event LogAddAsset(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 share,\\r\\n        uint256 fraction\\r\\n    );\\r\\n    event LogAddCollateral(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 share\\r\\n    );\\r\\n    event LogBorrow(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 amount,\\r\\n        uint256 feeAmount,\\r\\n        uint256 part\\r\\n    );\\r\\n    event LogExchangeRate(uint256 rate);\\r\\n    event LogFeeTo(address indexed newFeeTo);\\r\\n    event LogRemoveAsset(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 share,\\r\\n        uint256 fraction\\r\\n    );\\r\\n    event LogRemoveCollateral(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 share\\r\\n    );\\r\\n    event LogRepay(\\r\\n        address indexed from,\\r\\n        address indexed to,\\r\\n        uint256 amount,\\r\\n        uint256 part\\r\\n    );\\r\\n    event LogWithdrawFees(address indexed feeTo, uint256 feesEarnedFraction);\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\\r\\n    event LogFlashLoan(\\r\\n        address indexed borrower,\\r\\n        uint256 amount,\\r\\n        uint256 feeAmount,\\r\\n        address indexed receiver\\r\\n    );\\r\\n    event LogYieldBoxFeesDeposit(uint256 feeShares, uint256 tapAmount);\\r\\n    event LogApprovalForAll(\\r\\n        address indexed _from,\\r\\n        address indexed _operator,\\r\\n        bool _approved\\r\\n    );\\r\\n    error NotApproved(address _from, address _operator);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n\\r\\n    function accrue() external;\\r\\n\\r\\n    function accrueInfo()\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            uint64 interestPerSecond,\\r\\n            uint64 lastBlockAccrued,\\r\\n            uint128 feesEarnedFraction\\r\\n        );\\r\\n\\r\\n    function setApprovalForAll(address operator, bool approved) external;\\r\\n\\r\\n    function addAsset(\\r\\n        address from,\\r\\n        address to,\\r\\n        bool skim,\\r\\n        uint256 share\\r\\n    ) external returns (uint256 fraction);\\r\\n\\r\\n    function addCollateral(\\r\\n        address from,\\r\\n        address to,\\r\\n        bool skim,\\r\\n        uint256 share\\r\\n    ) external;\\r\\n\\r\\n    function allowance(address, address) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function asset() external view returns (address);\\r\\n\\r\\n    function assetId() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address) external view returns (uint256);\\r\\n\\r\\n    function beachBar() external view returns (address);\\r\\n\\r\\n    function borrow(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (uint256 part, uint256 share);\\r\\n\\r\\n    function claimOwnership() external;\\r\\n\\r\\n    function collateral() external view returns (address);\\r\\n\\r\\n    function collateralId() external view returns (uint256);\\r\\n\\r\\n    /// @notice Allows batched call to Singularity.\\r\\n    /// @param calls An array encoded call data.\\r\\n    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\\r\\n    function execute(bytes[] calldata calls, bool revertOnFail)\\r\\n        external\\r\\n        returns (bool[] memory successes, string[] memory results);\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n\\r\\n    function exchangeRate() external view returns (uint256);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n\\r\\n    function getInitData(\\r\\n        address collateral_,\\r\\n        address asset_,\\r\\n        IOracle oracle_,\\r\\n        bytes calldata oracleData_\\r\\n    ) external pure returns (bytes memory data);\\r\\n\\r\\n    function init(bytes calldata data) external payable;\\r\\n\\r\\n    function isSolvent(address user, bool open) external view returns (bool);\\r\\n\\r\\n    function liquidate(\\r\\n        address[] calldata users,\\r\\n        uint256[] calldata borrowParts,\\r\\n        address to,\\r\\n        IMultiSwapper swapper,\\r\\n        bool open\\r\\n    ) external;\\r\\n\\r\\n    function masterContract() external view returns (address);\\r\\n\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    function nonces(address) external view returns (uint256);\\r\\n\\r\\n    function oracle() external view returns (IOracle);\\r\\n\\r\\n    function oracleData() external view returns (bytes memory);\\r\\n\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function pendingOwner() external view returns (address);\\r\\n\\r\\n    function permit(\\r\\n        address owner_,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    function removeAsset(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 fraction\\r\\n    ) external returns (uint256 share);\\r\\n\\r\\n    function removeCollateral(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 share\\r\\n    ) external;\\r\\n\\r\\n    function repay(\\r\\n        address from,\\r\\n        address to,\\r\\n        bool skim,\\r\\n        uint256 part\\r\\n    ) external returns (uint256 amount);\\r\\n\\r\\n    function setFeeTo(address newFeeTo) external;\\r\\n\\r\\n    function setSwapper(IMultiSwapper swapper, bool enable) external;\\r\\n\\r\\n    function swappers(IMultiSwapper) external view returns (bool);\\r\\n\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    function totalAsset() external view returns (uint128 elastic, uint128 base);\\r\\n\\r\\n    function totalBorrow()\\r\\n        external\\r\\n        view\\r\\n        returns (uint128 elastic, uint128 base);\\r\\n\\r\\n    function totalCollateralShare() external view returns (uint256);\\r\\n\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function transferOwnership(\\r\\n        address newOwner,\\r\\n        bool direct,\\r\\n        bool renounce\\r\\n    ) external;\\r\\n\\r\\n    function updateExchangeRate() external returns (bool updated, uint256 rate);\\r\\n\\r\\n    function userBorrowPart(address) external view returns (uint256);\\r\\n\\r\\n    function userCollateralShare(address) external view returns (uint256);\\r\\n\\r\\n    function withdrawFees() external;\\r\\n\\r\\n    function depositFeesToYieldBox(IMultiSwapper, IBeachBar.SwapData calldata)\\r\\n        external;\\r\\n\\r\\n    function yieldBox() external view returns (address payable);\\r\\n\\r\\n    function liquidationQueue() external view returns (address payable);\\r\\n\\r\\n    function withdrawTo(\\r\\n        uint16 dstChainId,\\r\\n        bytes memory receiver,\\r\\n        uint256 amount,\\r\\n        bytes calldata adapterParams,\\r\\n        address payable refundAddress\\r\\n    ) external payable;\\r\\n}\\r\\n\",\"keccak256\":\"0xe4771e90be0de458e2fe189255bca07c5caf1993b7fd4fcb4e4e656ac3de6434\",\"license\":\"MIT\"},\"contracts/swappers/ICurveSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface ICurveSwapper {\\n    function curvePool() external view returns (address);\\n\\n    function yieldBox() external view returns (address);\\n\\n    /// @notice returns the possible output amount for input share\\n    /// @param tokenInId YieldBox asset id\\n    /// @param tokenIndexes The input and the output Curve's pool indexes\\n    /// @param shareIn Shares to get the amount for\\n    function getOutputAmount(\\n        uint256 tokenInId,\\n        uint256[] calldata tokenIndexes,\\n        uint256 shareIn\\n    ) external view returns (uint256 amountOut);\\n\\n    /// @notice swaps token in with token out\\n    /// @dev returns both amount and shares\\n    /// @param tokenInId YieldBox asset id\\n    /// @param tokenOutId YieldBox asset id\\n    /// @param tokenIndexes The input and the output Curve's pool indexes\\n    /// @param shareIn Shares to be swapped\\n    /// @param amountOutMin Minimum amount to be received\\n    /// @param to Receiver address\\n    function swap(\\n        uint256 tokenInId,\\n        uint256 tokenOutId,\\n        uint256[] calldata tokenIndexes,\\n        uint256 shareIn,\\n        uint256 amountOutMin,\\n        address to\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n}\\n\",\"keccak256\":\"0xa835710f3099f286bf17fdb589d8a02a0bcef87fc84be22b5eefcd36786cc073\",\"license\":\"UNLICENSED\"},\"contracts/swappers/IMultiSwapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\ninterface IMultiSwapper {\\n    function swap(\\n        uint256 tokenInId,\\n        uint256 tokenOutId,\\n        uint256 amountMinOut,\\n        address to,\\n        address[] calldata path,\\n        uint256 shareIn\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\n\\n    function getOutputAmount(\\n        uint256 tokenInId,\\n        address[] calldata path,\\n        uint256 shareIn\\n    ) external view returns (uint256 amountOut);\\n\\n    function getInputAmount(\\n        uint256 tokenOutId,\\n        address[] calldata path,\\n        uint256 shareOut\\n    ) external view returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x8cdf4e7a55a7d9e3a0375cce4861fb869541d172e9e63888345faac6326fd411\",\"license\":\"UNLICENSED\"},\"contracts/usd0/IUSD0.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\nimport '@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol';\\n\\ninterface IUSD0 is IStrictERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb76f289e1db4d015f491c1a30ad3ac9a2ee34e7dd9b1128c77b162d835c066df\",\"license\":\"UNLICENSED\"},\"yieldbox/contracts/enums/YieldBoxTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\n/// @title TokenType\\r\\n/// @author BoringCrypto (@Boring_Crypto)\\r\\n/// @notice The YieldBox can hold different types of tokens:\\r\\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\\r\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\r\\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\r\\nenum TokenType {\\r\\n    Native,\\r\\n    ERC20,\\r\\n    ERC721,\\r\\n    ERC1155,\\r\\n    None\\r\\n}\\r\\n\",\"keccak256\":\"0xb2b46c46e68906e80589e923b97ed07cf1f3d726493b336fc0b8c5ff840c9be7\",\"license\":\"MIT\"},\"yieldbox/contracts/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.9;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport \\\"../enums/YieldBoxTokenType.sol\\\";\\r\\n\\r\\ninterface IYieldBox {\\r\\n    function wrappedNative() external view returns (address wrappedNative);\\r\\n\\r\\n    function assets(uint256 assetId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            TokenType tokenType,\\r\\n            address contractAddress,\\r\\n            address strategy,\\r\\n            uint256 tokenId\\r\\n        );\\r\\n\\r\\n    function nativeTokens(uint256 assetId)\\r\\n        external\\r\\n        view\\r\\n        returns (\\r\\n            string memory name,\\r\\n            string memory symbol,\\r\\n            uint8 decimals\\r\\n        );\\r\\n\\r\\n    function owner(uint256 assetId) external view returns (address owner);\\r\\n\\r\\n    function totalSupply(uint256 assetId) external view returns (uint256 totalSupply);\\r\\n\\r\\n    function depositAsset(\\r\\n        uint256 assetId,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\r\\n\\r\\n    function withdraw(\\r\\n        uint256 assetId,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 share\\r\\n    ) external returns (uint256 amountOut, uint256 shareOut);\\r\\n\\r\\n    function transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 assetId,\\r\\n        uint256 share\\r\\n    ) external;\\r\\n\\r\\n    function batchTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] calldata assetIds_,\\r\\n        uint256[] calldata shares_\\r\\n    ) external;\\r\\n\\r\\n    function transferMultiple(\\r\\n        address from,\\r\\n        address[] calldata tos,\\r\\n        uint256 assetId,\\r\\n        uint256[] calldata shares\\r\\n    ) external;\\r\\n\\r\\n    function toShare(\\r\\n        uint256 assetId,\\r\\n        uint256 amount,\\r\\n        bool roundUp\\r\\n    ) external view returns (uint256 share);\\r\\n\\r\\n    function toAmount(\\r\\n        uint256 assetId,\\r\\n        uint256 share,\\r\\n        bool roundUp\\r\\n    ) external view returns (uint256 amount);\\r\\n}\\r\\n\",\"keccak256\":\"0x6da920b876af546c41cef469786912262307c3a787920aff2149b142aa3fb642\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051611b5a380380611b5a83398101604081905261002f91610097565b600080546001600160a01b0319163390811782556040519091907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3600280546001600160a01b0319166001600160a01b0393909316929092179091556003556100d1565b600080604083850312156100aa57600080fd5b82516001600160a01b03811681146100c157600080fd5b6020939093015192949293505050565b611a7a806100e06000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063e30c39781161005b578063e30c39781461019a578063e91f9961146101ad578063fef744fa146101c057600080fd5b80638da5cb5b1461015c578063b691d78c1461018757600080fd5b80634e71e0c8116100a75780634e71e0c8146101205780635810e7ec146101285780635dd82b361461013b57600080fd5b806306fdde03146100c3578063078dfbe71461010b575b600080fd5b604080518082018252601a81527f737461626c65202d3e20555344302028334372762b5553443029000000000000602082015290516101029190611710565b60405180910390f35b61011e610119366004611792565b6101d3565b005b61011e610339565b61011e6101363660046117d7565b610403565b61014e6101493660046117fb565b6104c6565b604051908152602001610102565b60005461016f906001600160a01b031681565b6040516001600160a01b039091168152602001610102565b61014e6101953660046117fb565b610778565b60015461016f906001600160a01b031681565b60025461016f906001600160a01b031681565b61014e6101ce3660046117fb565b610d4e565b6000546001600160a01b031633146102325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b811561030a576001600160a01b03831615158061024c5750805b6102985760405162461bcd60e51b815260206004820152601560248201527f4f776e61626c653a207a65726f206164647265737300000000000000000000006044820152606401610229565b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b03851673ffffffffffffffffffffffffffffffffffffffff1991821617909155600180549091169055505050565b600180546001600160a01b03851673ffffffffffffffffffffffffffffffffffffffff19909116179055505050565b6001546001600160a01b03163381146103945760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e65726044820152606401610229565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff19928316179055600180549091169055565b6000546001600160a01b0316331461045d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610229565b6002546040516001600160a01b038084169216907faa9eb2cf6e6a7bce28901c01eb97556feb7824a5a9b13df2c67580509a62633f90600090a36002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000806001600160a01b0316866001600160a01b0316634a50ed276040518163ffffffff1660e01b815260040160206040518083038186803b15801561050b57600080fd5b505afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105439190611891565b6001600160a01b0316632324248e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561057b57600080fd5b505afa15801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190611891565b6001600160a01b031614156105f95760405162461bcd60e51b815260206004820152600c60248201526b1554d10c081b9bdd081cd95d60a21b6044820152606401610229565b6000866001600160a01b0316634a50ed276040518163ffffffff1660e01b815260040160206040518083038186803b15801561063457600080fd5b505afa158015610648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066c9190611891565b6001600160a01b03166386c8e21d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a457600080fd5b505afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc91906118ae565b9050808614156106ef578491505061076f565b61076b876001600160a01b031663de4065776040518163ffffffff1660e01b815260040160206040518083038186803b15801561072b57600080fd5b505afa15801561073f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107639190611891565b878388610fef565b9150505b95945050505050565b6000806001600160a01b0316866001600160a01b0316634a50ed276040518163ffffffff1660e01b815260040160206040518083038186803b1580156107bd57600080fd5b505afa1580156107d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f59190611891565b6001600160a01b0316632324248e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561082d57600080fd5b505afa158015610841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108659190611891565b6001600160a01b031614156108ab5760405162461bcd60e51b815260206004820152600c60248201526b1554d10c081b9bdd081cd95d60a21b6044820152606401610229565b6000866001600160a01b031663de4065776040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e657600080fd5b505afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e9190611891565b90506000876001600160a01b031663c23ea21f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561095b57600080fd5b505afa15801561096f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109939190611891565b90506000886001600160a01b0316634a50ed276040518163ffffffff1660e01b815260040160206040518083038186803b1580156109d057600080fd5b505afa1580156109e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a089190611891565b6001600160a01b03166386c8e21d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4057600080fd5b505afa158015610a54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7891906118ae565b9050336001600160a01b03831614610ad25760405162461bcd60e51b815260206004820152600760248201527f6f6e6c79204c51000000000000000000000000000000000000000000000000006044820152606401610229565b80881415610bfd57604051638eb22cdd60e01b81526004810189905260248101889052600060448201526001600160a01b03841690630411b25290309085908c908590638eb22cdd9060640160206040518083038186803b158015610b3657600080fd5b505afa158015610b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6e91906118ae565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015293909216602484015260448301526064820152608401600060405180830381600087803b158015610bda57600080fd5b505af1158015610bee573d6000803e3d6000fd5b5050505086935050505061076f565b60008515610c1457610c11868801886118c7565b90505b600254604051638eb22cdd60e01b8152600481018b9052602481018a9052600060448201526001600160a01b0386811692630411b252923092909116908d908590638eb22cdd9060640160206040518083038186803b158015610c7657600080fd5b505afa158015610c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cae91906118ae565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015293909216602484015260448301526064820152608401600060405180830381600087803b158015610d1a57600080fd5b505af1158015610d2e573d6000803e3d6000fd5b50505050610d40848a848b85886112a5565b9a9950505050505050505050565b6000806001600160a01b0316866001600160a01b0316634a50ed276040518163ffffffff1660e01b815260040160206040518083038186803b158015610d9357600080fd5b505afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb9190611891565b6001600160a01b0316632324248e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0357600080fd5b505afa158015610e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3b9190611891565b6001600160a01b03161415610e815760405162461bcd60e51b815260206004820152600c60248201526b1554d10c081b9bdd081cd95d60a21b6044820152606401610229565b6000866001600160a01b0316634a50ed276040518163ffffffff1660e01b815260040160206040518083038186803b158015610ebc57600080fd5b505afa158015610ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef49190611891565b6001600160a01b03166386c8e21d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2c57600080fd5b505afa158015610f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6491906118ae565b905080861415610f77578491505061076f565b61076b876001600160a01b031663de4065776040518163ffffffff1660e01b815260040160206040518083038186803b158015610fb357600080fd5b505afa158015610fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610feb9190611891565b8288885b604051630cf35bdd60e41b81526004810184905260009081906001600160a01b0387169063cf35bdd09060240160806040518083038186803b15801561103457600080fd5b505afa158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c91906118e0565b5050604051630cf35bdd60e41b815260048101879052909250600091506001600160a01b0388169063cf35bdd09060240160806040518083038186803b1580156110b557600080fd5b505afa1580156110c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ed91906118e0565b505091505060006110fd83611561565b9050600061110a83611561565b6040805160028082526060820183529293506000929091602083019080368337019050509050828160008151811061114457611144611937565b602002602001018181525050818160018151811061116457611164611937565b6020908102919091010152604051638eb22cdd60e01b8152600481018a905260248101889052600060448201819052906001600160a01b038c1690638eb22cdd9060640160206040518083038186803b1580156111c057600080fd5b505afa1580156111d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f891906118ae565b6002546040517f25e0eb7f0000000000000000000000000000000000000000000000000000000081529192506001600160a01b0316906325e0eb7f90611246908d9086908690600401611988565b60206040518083038186803b15801561125e57600080fd5b505afa158015611272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129691906118ae565b9b9a5050505050505050505050565b604051630cf35bdd60e41b81526004810186905260009081906001600160a01b0389169063cf35bdd09060240160806040518083038186803b1580156112ea57600080fd5b505afa1580156112fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132291906118e0565b5050604051630cf35bdd60e41b815260048101899052909250600091506001600160a01b038a169063cf35bdd09060240160806040518083038186803b15801561136b57600080fd5b505afa15801561137f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a391906118e0565b505091505060006113b383611561565b905060006113c083611561565b604080516002808252606082018352929350600092909160208301908036833701905050905082816000815181106113fa576113fa611937565b602002602001018181525050818160018151811061141a5761141a611937565b6020908102919091010152604051638eb22cdd60e01b8152600481018c9052602481018a9052600060448201819052906001600160a01b038e1690638eb22cdd9060640160206040518083038186803b15801561147657600080fd5b505afa15801561148a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ae91906118ae565b90506000600260009054906101000a90046001600160a01b03166001600160a01b03166372834ee88e8e86868f8f6040518763ffffffff1660e01b81526004016114fd969594939291906119b1565b6040805180830381600087803b15801561151657600080fd5b505af115801561152a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154e91906119f7565b509e9d5050505050505050505050505050565b6000600019815b6003548110156116b857600254604080517f218751b200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163218751b2916004808301926020929190829003018186803b1580156115d057600080fd5b505afa1580156115e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116089190611891565b6001600160a01b031663c6610657836040518263ffffffff1660e01b815260040161163591815260200190565b60206040518083038186803b15801561164d57600080fd5b505afa158015611661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116859190611891565b9050846001600160a01b0316816001600160a01b031614156116a5578192505b50806116b081611a1b565b915050611568565b50600019811361170a5760405162461bcd60e51b815260206004820152600f60248201527f6173736574206e6f7420666f756e6400000000000000000000000000000000006044820152606401610229565b92915050565b600060208083528351808285015260005b8181101561173d57858101830151858201604001528201611721565b8181111561174f576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461177a57600080fd5b50565b8035801515811461178d57600080fd5b919050565b6000806000606084860312156117a757600080fd5b83356117b281611765565b92506117c06020850161177d565b91506117ce6040850161177d565b90509250925092565b6000602082840312156117e957600080fd5b81356117f481611765565b9392505050565b60008060008060006080868803121561181357600080fd5b853561181e81611765565b94506020860135935060408601359250606086013567ffffffffffffffff8082111561184957600080fd5b818801915088601f83011261185d57600080fd5b81358181111561186c57600080fd5b89602082850101111561187e57600080fd5b9699959850939650602001949392505050565b6000602082840312156118a357600080fd5b81516117f481611765565b6000602082840312156118c057600080fd5b5051919050565b6000602082840312156118d957600080fd5b5035919050565b600080600080608085870312156118f657600080fd5b84516005811061190557600080fd5b602086015190945061191681611765565b604086015190935061192781611765565b6060959095015193969295505050565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b8381101561197d57815187529582019590820190600101611961565b509495945050505050565b8381526060602082015260006119a1606083018561194d565b9050826040830152949350505050565b86815285602082015260c0604082015260006119d060c083018761194d565b60608301959095525060808101929092526001600160a01b031660a0909101529392505050565b60008060408385031215611a0a57600080fd5b505080516020909101519092909150565b6000600019821415611a3d57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d9b24f53d44f7fe050bf74faabed55b91af015a4b095569b5f78dcf53c0d7afb64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80638da5cb5b11610076578063e30c39781161005b578063e30c39781461019a578063e91f9961146101ad578063fef744fa146101c057600080fd5b80638da5cb5b1461015c578063b691d78c1461018757600080fd5b80634e71e0c8116100a75780634e71e0c8146101205780635810e7ec146101285780635dd82b361461013b57600080fd5b806306fdde03146100c3578063078dfbe71461010b575b600080fd5b604080518082018252601a81527f737461626c65202d3e20555344302028334372762b5553443029000000000000602082015290516101029190611710565b60405180910390f35b61011e610119366004611792565b6101d3565b005b61011e610339565b61011e6101363660046117d7565b610403565b61014e6101493660046117fb565b6104c6565b604051908152602001610102565b60005461016f906001600160a01b031681565b6040516001600160a01b039091168152602001610102565b61014e6101953660046117fb565b610778565b60015461016f906001600160a01b031681565b60025461016f906001600160a01b031681565b61014e6101ce3660046117fb565b610d4e565b6000546001600160a01b031633146102325760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b811561030a576001600160a01b03831615158061024c5750805b6102985760405162461bcd60e51b815260206004820152601560248201527f4f776e61626c653a207a65726f206164647265737300000000000000000000006044820152606401610229565b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b03851673ffffffffffffffffffffffffffffffffffffffff1991821617909155600180549091169055505050565b600180546001600160a01b03851673ffffffffffffffffffffffffffffffffffffffff19909116179055505050565b6001546001600160a01b03163381146103945760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c657220213d2070656e64696e67206f776e65726044820152606401610229565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0390921673ffffffffffffffffffffffffffffffffffffffff19928316179055600180549091169055565b6000546001600160a01b0316331461045d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610229565b6002546040516001600160a01b038084169216907faa9eb2cf6e6a7bce28901c01eb97556feb7824a5a9b13df2c67580509a62633f90600090a36002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6000806001600160a01b0316866001600160a01b0316634a50ed276040518163ffffffff1660e01b815260040160206040518083038186803b15801561050b57600080fd5b505afa15801561051f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105439190611891565b6001600160a01b0316632324248e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561057b57600080fd5b505afa15801561058f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b39190611891565b6001600160a01b031614156105f95760405162461bcd60e51b815260206004820152600c60248201526b1554d10c081b9bdd081cd95d60a21b6044820152606401610229565b6000866001600160a01b0316634a50ed276040518163ffffffff1660e01b815260040160206040518083038186803b15801561063457600080fd5b505afa158015610648573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066c9190611891565b6001600160a01b03166386c8e21d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106a457600080fd5b505afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc91906118ae565b9050808614156106ef578491505061076f565b61076b876001600160a01b031663de4065776040518163ffffffff1660e01b815260040160206040518083038186803b15801561072b57600080fd5b505afa15801561073f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107639190611891565b878388610fef565b9150505b95945050505050565b6000806001600160a01b0316866001600160a01b0316634a50ed276040518163ffffffff1660e01b815260040160206040518083038186803b1580156107bd57600080fd5b505afa1580156107d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f59190611891565b6001600160a01b0316632324248e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561082d57600080fd5b505afa158015610841573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108659190611891565b6001600160a01b031614156108ab5760405162461bcd60e51b815260206004820152600c60248201526b1554d10c081b9bdd081cd95d60a21b6044820152606401610229565b6000866001600160a01b031663de4065776040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e657600080fd5b505afa1580156108fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091e9190611891565b90506000876001600160a01b031663c23ea21f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561095b57600080fd5b505afa15801561096f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109939190611891565b90506000886001600160a01b0316634a50ed276040518163ffffffff1660e01b815260040160206040518083038186803b1580156109d057600080fd5b505afa1580156109e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a089190611891565b6001600160a01b03166386c8e21d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4057600080fd5b505afa158015610a54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7891906118ae565b9050336001600160a01b03831614610ad25760405162461bcd60e51b815260206004820152600760248201527f6f6e6c79204c51000000000000000000000000000000000000000000000000006044820152606401610229565b80881415610bfd57604051638eb22cdd60e01b81526004810189905260248101889052600060448201526001600160a01b03841690630411b25290309085908c908590638eb22cdd9060640160206040518083038186803b158015610b3657600080fd5b505afa158015610b4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6e91906118ae565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015293909216602484015260448301526064820152608401600060405180830381600087803b158015610bda57600080fd5b505af1158015610bee573d6000803e3d6000fd5b5050505086935050505061076f565b60008515610c1457610c11868801886118c7565b90505b600254604051638eb22cdd60e01b8152600481018b9052602481018a9052600060448201526001600160a01b0386811692630411b252923092909116908d908590638eb22cdd9060640160206040518083038186803b158015610c7657600080fd5b505afa158015610c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cae91906118ae565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015293909216602484015260448301526064820152608401600060405180830381600087803b158015610d1a57600080fd5b505af1158015610d2e573d6000803e3d6000fd5b50505050610d40848a848b85886112a5565b9a9950505050505050505050565b6000806001600160a01b0316866001600160a01b0316634a50ed276040518163ffffffff1660e01b815260040160206040518083038186803b158015610d9357600080fd5b505afa158015610da7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dcb9190611891565b6001600160a01b0316632324248e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e0357600080fd5b505afa158015610e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3b9190611891565b6001600160a01b03161415610e815760405162461bcd60e51b815260206004820152600c60248201526b1554d10c081b9bdd081cd95d60a21b6044820152606401610229565b6000866001600160a01b0316634a50ed276040518163ffffffff1660e01b815260040160206040518083038186803b158015610ebc57600080fd5b505afa158015610ed0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef49190611891565b6001600160a01b03166386c8e21d6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2c57600080fd5b505afa158015610f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6491906118ae565b905080861415610f77578491505061076f565b61076b876001600160a01b031663de4065776040518163ffffffff1660e01b815260040160206040518083038186803b158015610fb357600080fd5b505afa158015610fc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610feb9190611891565b8288885b604051630cf35bdd60e41b81526004810184905260009081906001600160a01b0387169063cf35bdd09060240160806040518083038186803b15801561103457600080fd5b505afa158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c91906118e0565b5050604051630cf35bdd60e41b815260048101879052909250600091506001600160a01b0388169063cf35bdd09060240160806040518083038186803b1580156110b557600080fd5b505afa1580156110c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ed91906118e0565b505091505060006110fd83611561565b9050600061110a83611561565b6040805160028082526060820183529293506000929091602083019080368337019050509050828160008151811061114457611144611937565b602002602001018181525050818160018151811061116457611164611937565b6020908102919091010152604051638eb22cdd60e01b8152600481018a905260248101889052600060448201819052906001600160a01b038c1690638eb22cdd9060640160206040518083038186803b1580156111c057600080fd5b505afa1580156111d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f891906118ae565b6002546040517f25e0eb7f0000000000000000000000000000000000000000000000000000000081529192506001600160a01b0316906325e0eb7f90611246908d9086908690600401611988565b60206040518083038186803b15801561125e57600080fd5b505afa158015611272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129691906118ae565b9b9a5050505050505050505050565b604051630cf35bdd60e41b81526004810186905260009081906001600160a01b0389169063cf35bdd09060240160806040518083038186803b1580156112ea57600080fd5b505afa1580156112fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132291906118e0565b5050604051630cf35bdd60e41b815260048101899052909250600091506001600160a01b038a169063cf35bdd09060240160806040518083038186803b15801561136b57600080fd5b505afa15801561137f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a391906118e0565b505091505060006113b383611561565b905060006113c083611561565b604080516002808252606082018352929350600092909160208301908036833701905050905082816000815181106113fa576113fa611937565b602002602001018181525050818160018151811061141a5761141a611937565b6020908102919091010152604051638eb22cdd60e01b8152600481018c9052602481018a9052600060448201819052906001600160a01b038e1690638eb22cdd9060640160206040518083038186803b15801561147657600080fd5b505afa15801561148a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ae91906118ae565b90506000600260009054906101000a90046001600160a01b03166001600160a01b03166372834ee88e8e86868f8f6040518763ffffffff1660e01b81526004016114fd969594939291906119b1565b6040805180830381600087803b15801561151657600080fd5b505af115801561152a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154e91906119f7565b509e9d5050505050505050505050505050565b6000600019815b6003548110156116b857600254604080517f218751b200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163218751b2916004808301926020929190829003018186803b1580156115d057600080fd5b505afa1580156115e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116089190611891565b6001600160a01b031663c6610657836040518263ffffffff1660e01b815260040161163591815260200190565b60206040518083038186803b15801561164d57600080fd5b505afa158015611661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116859190611891565b9050846001600160a01b0316816001600160a01b031614156116a5578192505b50806116b081611a1b565b915050611568565b50600019811361170a5760405162461bcd60e51b815260206004820152600f60248201527f6173736574206e6f7420666f756e6400000000000000000000000000000000006044820152606401610229565b92915050565b600060208083528351808285015260005b8181101561173d57858101830151858201604001528201611721565b8181111561174f576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461177a57600080fd5b50565b8035801515811461178d57600080fd5b919050565b6000806000606084860312156117a757600080fd5b83356117b281611765565b92506117c06020850161177d565b91506117ce6040850161177d565b90509250925092565b6000602082840312156117e957600080fd5b81356117f481611765565b9392505050565b60008060008060006080868803121561181357600080fd5b853561181e81611765565b94506020860135935060408601359250606086013567ffffffffffffffff8082111561184957600080fd5b818801915088601f83011261185d57600080fd5b81358181111561186c57600080fd5b89602082850101111561187e57600080fd5b9699959850939650602001949392505050565b6000602082840312156118a357600080fd5b81516117f481611765565b6000602082840312156118c057600080fd5b5051919050565b6000602082840312156118d957600080fd5b5035919050565b600080600080608085870312156118f657600080fd5b84516005811061190557600080fd5b602086015190945061191681611765565b604086015190935061192781611765565b6060959095015193969295505050565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b8381101561197d57815187529582019590820190600101611961565b509495945050505050565b8381526060602082015260006119a1606083018561194d565b9050826040830152949350505050565b86815285602082015260c0604082015260006119d060c083018761194d565b60608301959095525060808101929092526001600160a01b031660a0909101529392505050565b60008060408385031215611a0a57600080fd5b505080516020909101519092909150565b6000600019821415611a3d57634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d9b24f53d44f7fe050bf74faabed55b91af015a4b095569b5f78dcf53c0d7afb64736f6c63430008090033",
  "devdoc": {
    "details": "Performs a swap operation between stable and USD0 through 3CRV+USD0 pool",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "curvePoolAssetCount_": "Curve pool assets number",
          "curveSwapper_": "CurveSwapper address"
        }
      },
      "getInputAmount(address,uint256,uint256,bytes)": {
        "params": {
          "amountOut": "Token out amount",
          "tokenInId": "Token in asset id"
        }
      },
      "getOutputAmount(address,uint256,uint256,bytes)": {
        "params": {
          "amountIn": "Stablecoin amount"
        }
      },
      "setCurveSwapper(address)": {
        "details": "used for USD0 to WETH swap",
        "params": {
          "_swapper": "The curve pool swapper address"
        }
      },
      "swap(address,uint256,uint256,bytes)": {
        "params": {
          "amountIn": "Stablecoin amount",
          "data": "extra data used for the swap operation",
          "tokenInId": "Stablecoin asset id"
        }
      },
      "transferOwnership(address,bool,bool)": {
        "params": {
          "direct": "True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.",
          "newOwner": "Address of the new owner.",
          "renounce": "Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise."
        }
      }
    },
    "title": "Swaps Stable to USD0 through Curve",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimOwnership()": {
        "notice": "Needs to be called by `pendingOwner` to claim ownership."
      },
      "constructor": {
        "notice": "creates a new CurveStableToUsdoBidder"
      },
      "curveSwapper()": {
        "notice": "3Crv+USD0 swapper"
      },
      "getInputAmount(address,uint256,uint256,bytes)": {
        "notice": "returns token tokenIn amount based on tokenOut amount"
      },
      "getOutputAmount(address,uint256,uint256,bytes)": {
        "notice": "returns the amount of collateral"
      },
      "name()": {
        "notice": "returns the unique name"
      },
      "setCurveSwapper(address)": {
        "notice": "sets the Curve swapper"
      },
      "swap(address,uint256,uint256,bytes)": {
        "notice": "swaps stable to collateral"
      },
      "transferOwnership(address,bool,bool)": {
        "notice": "Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner. Can only be invoked by the current `owner`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 233,
        "contract": "contracts/liquidationQueue/bidders/CurveStableToUsdoBidder.sol:CurveStableToUsdoBidder",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 235,
        "contract": "contracts/liquidationQueue/bidders/CurveStableToUsdoBidder.sol:CurveStableToUsdoBidder",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6427,
        "contract": "contracts/liquidationQueue/bidders/CurveStableToUsdoBidder.sol:CurveStableToUsdoBidder",
        "label": "curveSwapper",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ICurveSwapper)17213"
      },
      {
        "astId": 6430,
        "contract": "contracts/liquidationQueue/bidders/CurveStableToUsdoBidder.sol:CurveStableToUsdoBidder",
        "label": "curveAssetsLength",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ICurveSwapper)17213": {
        "encoding": "inplace",
        "label": "contract ICurveSwapper",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}