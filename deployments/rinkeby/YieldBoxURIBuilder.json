{
  "address": "0x29b47093bE2931629eae23247A5D0C24F84Fe4F3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setYieldBox",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assetId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldBox",
      "outputs": [
        {
          "internalType": "contract IYieldBox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4dd50e6d91df326e60fba55465e38eecc9e63105e8a7be21e5cb445f8b990a4e",
  "receipt": {
    "to": null,
    "from": "0xEAF9f533871B07B151883908B4Fb6eeF4b51A95F",
    "contractAddress": "0x29b47093bE2931629eae23247A5D0C24F84Fe4F3",
    "transactionIndex": 11,
    "gasUsed": "1728776",
    "logsBloom": "0x
    "blockHash": "0xda6ff90b840b148154b7da9fd86cc79c0cf7554a2545989b8041dec3e8972289",
    "transactionHash": "0x4dd50e6d91df326e60fba55465e38eecc9e63105e8a7be21e5cb445f8b990a4e",
    "logs": [],
    "blockNumber": 11390869,
    "cumulativeGasUsed": "7792312",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a2e00020eb0d34b361ef471c59de08cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setYieldBox\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assetId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldBox\",\"outputs\":[{\"internalType\":\"contract IYieldBox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/bar/YieldBoxURIBuilder.sol\":\"YieldBoxURIBuilder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@boringcrypto/boring-solidity/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0x685e48fafa746587daf71f2a100bcd9dac53699f761fa2c7e80870b02ffd0b69\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable no-inline-assembly\\n// solhint-disable no-empty-blocks\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n                case 1 {\\n                    mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n                }\\n                case 2 {\\n                    mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n                }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x497f2590ad8b44a211cd05f030216dc4cba22fb14057bdeab6d6161066355262\",\"license\":\"MIT\"},\"@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../interfaces/IERC20.sol\\\";\\n\\n// solhint-disable avoid-low-level-calls\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_BALANCE_OF = 0x70a08231; // balanceOf(address)\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a gas-optimized balance check to avoid a redundant extcodesize check in addition to the returndatasize check.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to The address of the user to check.\\n    /// @return amount The token amount.\\n    function safeBalanceOf(IERC20 token, address to) internal view returns (uint256 amount) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_BALANCE_OF, to));\\n        require(success && data.length >= 32, \\\"BoringERC20: BalanceOf failed\\\");\\n        amount = abi.decode(data, (uint256));\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x02455f438e52510042f9f063cd94bb63c9fc950c0f3e8e7545fbd641053c88df\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"contracts/bar/YieldBoxURIBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport '@boringcrypto/boring-solidity/contracts/libraries/Base64.sol';\\nimport '@boringcrypto/boring-solidity/contracts/libraries/BoringERC20.sol';\\nimport './interfaces/IYieldBox.sol';\\n\\n// solhint-disable quotes\\n\\ncontract YieldBoxURIBuilder {\\n    using BoringERC20 for IERC20;\\n    using Strings for uint256;\\n    using Base64 for bytes;\\n\\n    IYieldBox public yieldBox;\\n\\n    function setYieldBox() public {\\n        require(address(yieldBox) == address(0), 'YieldBox already set');\\n        yieldBox = IYieldBox(payable(msg.sender));\\n    }\\n\\n    struct AssetDetails {\\n        string tokenType;\\n        string name;\\n        string symbol;\\n        uint256 decimals;\\n    }\\n\\n    function name(uint256 assetId) external view returns (string memory) {\\n        (\\n            TokenType tokenType,\\n            address contractAddress,\\n            IStrategy strategy,\\n            uint256 tokenId\\n        ) = yieldBox.assets(assetId);\\n        if (strategy == NO_STRATEGY) {\\n            if (tokenType == TokenType.ERC20) {\\n                IERC20 token = IERC20(contractAddress);\\n                return token.safeName();\\n            } else if (tokenType == TokenType.ERC1155) {\\n                return\\n                    string(\\n                        abi.encodePacked(\\n                            'ERC1155:',\\n                            uint256(uint160(contractAddress)).toHexString(20),\\n                            '/',\\n                            tokenId.toString()\\n                        )\\n                    );\\n            } else {\\n                (string memory name_, , ) = yieldBox.nativeTokens(assetId);\\n                return name_;\\n            }\\n        } else {\\n            if (tokenType == TokenType.ERC20) {\\n                IERC20 token = IERC20(contractAddress);\\n                return\\n                    string(\\n                        abi.encodePacked(\\n                            token.safeName(),\\n                            ' (',\\n                            strategy.name(),\\n                            ')'\\n                        )\\n                    );\\n            } else if (tokenType == TokenType.ERC1155) {\\n                return\\n                    string(\\n                        abi.encodePacked(\\n                            string(\\n                                abi.encodePacked(\\n                                    'ERC1155:',\\n                                    uint256(uint160(contractAddress))\\n                                        .toHexString(20),\\n                                    '/',\\n                                    tokenId.toString()\\n                                )\\n                            ),\\n                            ' (',\\n                            strategy.name(),\\n                            ')'\\n                        )\\n                    );\\n            } else {\\n                (string memory name_, , ) = yieldBox.nativeTokens(assetId);\\n                return\\n                    string(abi.encodePacked(name_, ' (', strategy.name(), ')'));\\n            }\\n        }\\n    }\\n\\n    function symbol(uint256 assetId) external view returns (string memory) {\\n        (\\n            TokenType tokenType,\\n            address contractAddress,\\n            IStrategy strategy,\\n\\n        ) = yieldBox.assets(assetId);\\n        if (strategy == NO_STRATEGY) {\\n            if (tokenType == TokenType.ERC20) {\\n                IERC20 token = IERC20(contractAddress);\\n                return token.safeSymbol();\\n            } else if (tokenType == TokenType.ERC1155) {\\n                return 'ERC1155';\\n            } else {\\n                (, string memory symbol_, ) = yieldBox.nativeTokens(assetId);\\n                return symbol_;\\n            }\\n        } else {\\n            if (tokenType == TokenType.ERC20) {\\n                IERC20 token = IERC20(contractAddress);\\n                return\\n                    string(\\n                        abi.encodePacked(\\n                            token.safeSymbol(),\\n                            ' (',\\n                            strategy.name(),\\n                            ')'\\n                        )\\n                    );\\n            } else if (tokenType == TokenType.ERC1155) {\\n                return\\n                    string(\\n                        abi.encodePacked('ERC1155', ' (', strategy.name(), ')')\\n                    );\\n            } else {\\n                (, string memory symbol_, ) = yieldBox.nativeTokens(assetId);\\n                return\\n                    string(\\n                        abi.encodePacked(symbol_, ' (', strategy.name(), ')')\\n                    );\\n            }\\n        }\\n    }\\n\\n    function decimals(uint256 assetId) external view returns (uint8) {\\n        (TokenType tokenType, address contractAddress, , ) = yieldBox.assets(\\n            assetId\\n        );\\n        if (tokenType == TokenType.ERC1155) {\\n            return 0;\\n        } else if (tokenType == TokenType.ERC20) {\\n            IERC20 token = IERC20(contractAddress);\\n            return token.safeDecimals();\\n        } else {\\n            (, , uint8 decimals_) = yieldBox.nativeTokens(assetId);\\n            return decimals_;\\n        }\\n    }\\n\\n    function uri(uint256 assetId) external view returns (string memory) {\\n        AssetDetails memory details;\\n        (\\n            TokenType tokenType,\\n            address contractAddress,\\n            IStrategy strategy,\\n            uint256 tokenId\\n        ) = yieldBox.assets(assetId);\\n        if (tokenType == TokenType.ERC1155) {\\n            // Contracts can't retrieve URIs, so the details are out of reach\\n            details.tokenType = 'ERC1155';\\n            details.name = string(\\n                abi.encodePacked(\\n                    'ERC1155:',\\n                    uint256(uint160(contractAddress)).toHexString(20),\\n                    '/',\\n                    tokenId.toString()\\n                )\\n            );\\n            details.symbol = 'ERC1155';\\n        } else if (tokenType == TokenType.ERC20) {\\n            IERC20 token = IERC20(contractAddress);\\n            details = AssetDetails(\\n                'ERC20',\\n                token.safeName(),\\n                token.safeSymbol(),\\n                token.safeDecimals()\\n            );\\n        } else {\\n            // Native\\n            details.tokenType = 'Native';\\n            (details.name, details.symbol, details.decimals) = yieldBox\\n                .nativeTokens(assetId);\\n        }\\n\\n        string memory properties = string(\\n            tokenType != TokenType.Native\\n                ? abi.encodePacked(\\n                    ',\\\"tokenAddress\\\":\\\"',\\n                    uint256(uint160(contractAddress)).toHexString(20),\\n                    '\\\"'\\n                )\\n                : abi.encodePacked(\\n                    ',\\\"totalSupply\\\":',\\n                    yieldBox.totalSupply(assetId).toString(),\\n                    ',\\\"fixedSupply\\\":',\\n                    yieldBox.owner(assetId) == address(0) ? 'true' : 'false'\\n                )\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    'data:application/json;base64,',\\n                    abi\\n                        .encodePacked(\\n                            '{\\\"name\\\":\\\"',\\n                            details.name,\\n                            '\\\",\\\"symbol\\\":\\\"',\\n                            details.symbol,\\n                            '\\\"',\\n                            tokenType == TokenType.ERC1155\\n                                ? ''\\n                                : ',\\\"decimals\\\":',\\n                            tokenType == TokenType.ERC1155\\n                                ? ''\\n                                : details.decimals.toString(),\\n                            ',\\\"properties\\\":{\\\"strategy\\\":\\\"',\\n                            uint256(uint160(address(strategy))).toHexString(20),\\n                            '\\\",\\\"tokenType\\\":\\\"',\\n                            details.tokenType,\\n                            '\\\"',\\n                            properties,\\n                            tokenType == TokenType.ERC1155\\n                                ? string(\\n                                    abi.encodePacked(\\n                                        ',\\\"tokenId\\\":',\\n                                        tokenId.toString()\\n                                    )\\n                                )\\n                                : '',\\n                            '}}'\\n                        )\\n                        .encode()\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xaaa19a056409609511af60885ea896d6e63bd604641f2e96ee7ac404b30d256e\",\"license\":\"MIT\"},\"contracts/bar/enums/YieldBoxTokenType.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @author BoringCrypto (@Boring_Crypto)\\n/// @notice The YieldBox can hold different types of tokens:\\n/// Native: These are ERC1155 tokens native to YieldBox. Protocols using YieldBox should use these is possible when simple token creation is needed.\\n/// ERC20: ERC20 tokens (including rebasing tokens) can be added to the YieldBox.\\n/// ERC1155: ERC1155 tokens are also supported. This can also be used to add YieldBox Native tokens to strategies since they are ERC1155 tokens.\\nenum TokenType {\\n    Native,\\n    ERC20,\\n    ERC1155,\\n    None\\n}\\n\",\"keccak256\":\"0x910c9b24c6eb76537e5b33360a894510d8d4478c6902f0126f4e4765c349e8cf\",\"license\":\"MIT\"},\"contracts/bar/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport '../enums/YieldBoxTokenType.sol';\\nimport './IYieldBox.sol';\\n\\ninterface IStrategy {\\n    /// Each strategy only works with a single asset. This should help make implementations simpler and more readable.\\n    /// To safe gas a proxy pattern (YieldBox factory) could be used to deploy the same strategy for multiple tokens.\\n\\n    /// It is recommended that strategies keep a small amount of funds uninvested (like 5%) to handle small withdrawals\\n    /// and deposits without triggering costly investing/divesting logic.\\n\\n    /// #########################\\n    /// ### Basic Information ###\\n    /// #########################\\n\\n    /// Returns the address of the yieldBox that this strategy is for\\n    function yieldBox() external view returns (IYieldBox yieldBox_);\\n\\n    /// Returns a name for this strategy\\n    function name() external view returns (string memory name_);\\n\\n    /// Returns a description for this strategy\\n    function description() external view returns (string memory description_);\\n\\n    /// #######################\\n    /// ### Supported Token ###\\n    /// #######################\\n\\n    /// Returns the standard that this strategy works with\\n    function tokenType() external view returns (TokenType tokenType_);\\n\\n    /// Returns the contract address that this strategy works with\\n    function contractAddress() external view returns (address contractAddress_);\\n\\n    /// Returns the tokenId that this strategy works with (for EIP1155)\\n    /// This is always 0 for EIP20 tokens\\n    function tokenId() external view returns (uint256 tokenId_);\\n\\n    /// ###########################\\n    /// ### Balance Information ###\\n    /// ###########################\\n\\n    /// Returns the total value the strategy holds (principle + gain) expressed in asset token amount.\\n    /// This should be cheap in gas to retrieve. Can return a bit less than the actual, but shouldn't return more.\\n    /// The gas cost of this function will be paid on any deposit or withdrawal onto and out of the YieldBox\\n    /// that uses this strategy. Also, anytime a protocol converts between shares and amount, this gets called.\\n    function currentBalance() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn\\n    function withdrawable() external view returns (uint256 amount);\\n\\n    /// Returns the maximum amount that can be withdrawn for a low gas fee\\n    /// When more than this amount is withdrawn it will trigger divesting from the actual strategy\\n    /// which will incur higher gas costs\\n    function cheapWithdrawable() external view returns (uint256 amount);\\n\\n    /// ##########################\\n    /// ### YieldBox Functions ###\\n    /// ##########################\\n\\n    /// Is called by YieldBox to signal funds have been added, the strategy may choose to act on this\\n    /// When a large enough deposit is made, this should trigger the strategy to invest into the actual\\n    /// strategy. This function should normally NOT be used to invest on each call as that would be costly\\n    /// for small deposits.\\n    /// If the strategy handles native tokens (ETH) it will receive it directly (not wrapped). It will be\\n    /// up to the strategy to wrap it if needed.\\n    /// Only accept this call from the YieldBox\\n    function deposited(uint256 amount) external;\\n\\n    /// Is called by the YieldBox to ask the strategy to withdraw to the user\\n    /// When a strategy keeps a little reserve for cheap withdrawals and the requested withdrawal goes over this amount,\\n    /// the strategy should divest enough from the strategy to complete the withdrawal and rebalance the reserve.\\n    /// If the strategy handles native tokens (ETH) it should send this, not a wrapped version.\\n    /// Only accept this call from the YieldBox\\n    function withdraw(address to, uint256 amount) external;\\n}\\n\\nIStrategy constant NO_STRATEGY = IStrategy(address(0));\\n\",\"keccak256\":\"0x3d874b9f0094b20d9dd57ca6851dfe9ceb3f6121049210e698eff536c92f2757\",\"license\":\"MIT\"},\"contracts/bar/interfaces/IYieldBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport '../enums/YieldBoxTokenType.sol';\\nimport './IStrategy.sol';\\n\\ninterface IYieldBox {\\n    function wrappedNative() external view returns (address wrappedNative);\\n\\n    function assets(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            TokenType tokenType,\\n            address contractAddress,\\n            IStrategy strategy,\\n            uint256 tokenId\\n        );\\n\\n    function nativeTokens(uint256 assetId)\\n        external\\n        view\\n        returns (\\n            string memory name,\\n            string memory symbol,\\n            uint8 decimals\\n        );\\n\\n    function owner(uint256 assetId) external view returns (address owner);\\n\\n    function totalSupply(uint256 assetId)\\n        external\\n        view\\n        returns (uint256 totalSupply);\\n}\\n\",\"keccak256\":\"0x1333f138002c74051addeb81f6370aeede4776eb83349550f87ee9cd82980bb9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e50806100206000396000f3fe608060405234801561001057600080fd5b50600436106100615760003560e01c8062ad800c146100665780630e89341c1461008f5780633f47e662146100a25780634e41a1fb146100c7578063a61794ee146100da578063de406577146100e4575b600080fd5b6100796100743660046116c3565b61010f565b604051610086919061170c565b60405180910390f35b61007961009d3660046116c3565b6104f7565b6100b56100b03660046116c3565b610a81565b60405160ff9091168152602001610086565b6100796100d53660046116c3565b610bc5565b6100e2610f0a565b005b6000546100f7906001600160a01b031681565b6040516001600160a01b039091168152602001610086565b60008054604051630cf35bdd60e41b815260048101849052606092918291829182916001600160a01b039091169063cf35bdd090602401608060405180830381865afa158015610163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101879190611757565b929650909450925090506001600160a01b0382166102b75760018460038111156101b3576101b36117ae565b036101d657826101cb6001600160a01b038216610f73565b979650505050505050565b60028460038111156101ea576101ea6117ae565b03610237576102036001600160a01b0384166014611036565b61020c826111d8565b60405160200161021d9291906117e0565b604051602081830303815290604052945050505050919050565b60008054604051631f0ee4c360e01b8152600481018990526001600160a01b0390911690631f0ee4c390602401600060405180830381865afa158015610281573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102a991908101906118d4565b509098975050505050505050565b60018460038111156102cb576102cb6117ae565b0361037557826102e36001600160a01b038216610f73565b836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610321573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103499190810190611947565b60405160200161035a92919061197b565b60405160208183030381529060405295505050505050919050565b6002846003811115610389576103896117ae565b03610442576103a26001600160a01b0384166014611036565b6103ab826111d8565b6040516020016103bc9291906117e0565b604051602081830303815290604052826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610409573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104319190810190611947565b60405160200161021d92919061197b565b60008054604051631f0ee4c360e01b8152600481018990526001600160a01b0390911690631f0ee4c390602401600060405180830381865afa15801561048c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104b491908101906118d4565b5050905080836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610321573d6000803e3d6000fd5b60606105246040518060800160405280606081526020016060815260200160608152602001600081525090565b60008054604051630cf35bdd60e41b8152600481018690528291829182916001600160a01b03169063cf35bdd090602401608060405180830381865afa158015610572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105969190611757565b9296509094509250905060028460038111156105b4576105b46117ae565b03610645576040805180820190915260078152664552433131353560c81b602082015285526105ed6001600160a01b0384166014611036565b6105f6826111d8565b6040516020016106079291906117e0565b60408051601f198184030181529181526020878101929092528051808201825260078152664552433131353560c81b92810192909252860152610777565b6001846003811115610659576106596117ae565b036106d6576040805160c0810190915260056080820190815264045524332360dc1b60a0830152815283906020810161069a6001600160a01b038416610f73565b81526020016106b1836001600160a01b03166112d8565b81526020016106c8836001600160a01b031661131f565b60ff16815250955050610777565b60408051808201825260068152654e617469766560d01b602082015286526000549051631f0ee4c360e01b8152600481018990526001600160a01b0390911690631f0ee4c390602401600060405180830381865afa15801561073c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261076491908101906118d4565b60ff166060880152604087015260208601525b60008085600381111561078c5761078c6117ae565b036108e75760005460405163bd85b03960e01b8152600481018a9052610805916001600160a01b03169063bd85b03990602401602060405180830381865afa1580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080091906119c6565b6111d8565b60008054604051635091e19f60e11b8152600481018c90526001600160a01b039091169063a123c33e90602401602060405180830381865afa15801561084f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087391906119df565b6001600160a01b0316146108a4576040518060400160405280600581526020016466616c736560d81b8152506108c2565b604051806040016040528060048152602001637472756560e01b8152505b6040516020016108d39291906119fc565b60405160208183030381529060405261091b565b6108fb6001600160a01b0385166014611036565b60405160200161090b9190611a62565b6040516020818303038152906040525b60208701516040880151919250610a55916002886003811115610940576109406117ae565b1461096f576040518060400160405280600c81526020016b16113232b1b4b6b0b639911d60a11b815250610980565b604051806020016040528060008152505b6002896003811115610994576109946117ae565b146109ab576109a68a606001516111d8565b6109bc565b604051806020016040528060008152505b6109d06001600160a01b0389166014611036565b8b518760028d60038111156109e7576109e76117ae565b14610a015760405180602001604052806000815250610a2a565b610a0a8a6111d8565b604051602001610a1a9190611aa7565b6040516020818303038152906040525b604051602001610a41989796959493929190611adb565b6040516020818303038152906040526113d7565b604051602001610a659190611c12565b6040516020818303038152906040529650505050505050919050565b60008054604051630cf35bdd60e41b815260048101849052829182916001600160a01b039091169063cf35bdd090602401608060405180830381865afa158015610acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af39190611757565b50919350915060029050826003811115610b0f57610b0f6117ae565b03610b1e575060009392505050565b6001826003811115610b3257610b326117ae565b03610b535780610b4a6001600160a01b03821661131f565b95945050505050565b60008054604051631f0ee4c360e01b8152600481018790526001600160a01b0390911690631f0ee4c390602401600060405180830381865afa158015610b9d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101cb91908101906118d4565b60008054604051630cf35bdd60e41b81526004810184905260609291829182916001600160a01b03169063cf35bdd090602401608060405180830381865afa158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c399190611757565b50919450925090506001600160a01b038116610d43576001836003811115610c6357610c636117ae565b03610c855781610c7b6001600160a01b0382166112d8565b9695505050505050565b6002836003811115610c9957610c996117ae565b03610cc55750506040805180820190915260078152664552433131353560c81b60208201529392505050565b60008054604051631f0ee4c360e01b8152600481018890526001600160a01b0390911690631f0ee4c390602401600060405180830381865afa158015610d0f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d3791908101906118d4565b50979650505050505050565b6001836003811115610d5757610d576117ae565b03610dad5781610d6f6001600160a01b0382166112d8565b826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610409573d6000803e3d6000fd5b6002836003811115610dc157610dc16117ae565b03610e5557806001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e2c9190810190611947565b604051602001610e3c9190611c57565b6040516020818303038152906040529350505050919050565b60008054604051631f0ee4c360e01b8152600481018890526001600160a01b0390911690631f0ee4c390602401600060405180830381865afa158015610e9f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ec791908101906118d4565b5091505080826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610409573d6000803e3d6000fd5b6000546001600160a01b031615610f5f5760405162461bcd60e51b8152602060048201526014602482015273165a595b19109bde08185b1c9958591e481cd95d60621b60448201526064015b60405180910390fd5b600080546001600160a01b03191633179055565b60408051600481526024810182526020810180516001600160e01b03166306fdde0360e01b179052905160609160009182916001600160a01b03861691610fba9190611c9c565b600060405180830381855afa9150503d8060008114610ff5576040519150601f19603f3d011682016040523d82523d6000602084013e610ffa565b606091505b50915091508161102557604051806040016040528060038152602001623f3f3f60e81b81525061102e565b61102e8161153b565b949350505050565b60606000611045836002611cce565b611050906002611ced565b6001600160401b0381111561106757611067611830565b6040519080825280601f01601f191660200182016040528015611091576020820181803683370190505b509050600360fc1b816000815181106110ac576110ac611d05565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106110db576110db611d05565b60200101906001600160f81b031916908160001a90535060006110ff846002611cce565b61110a906001611ced565b90505b6001811115611182576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061113e5761113e611d05565b1a60f81b82828151811061115457611154611d05565b60200101906001600160f81b031916908160001a90535060049490941c9361117b81611d1b565b905061110d565b5083156111d15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610f56565b9392505050565b6060816000036111ff5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611229578061121381611d32565b91506112229050600a83611d61565b9150611203565b6000816001600160401b0381111561124357611243611830565b6040519080825280601f01601f19166020018201604052801561126d576020820181803683370190505b5090505b841561102e57611282600183611d75565b915061128f600a86611d8c565b61129a906030611ced565b60f81b8183815181106112af576112af611d05565b60200101906001600160f81b031916908160001a9053506112d1600a86611d61565b9450611271565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009182916001600160a01b03861691610fba9190611c9c565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b038616916113659190611c9c565b600060405180830381855afa9150503d80600081146113a0576040519150601f19603f3d011682016040523d82523d6000602084013e6113a5565b606091505b50915091508180156113b8575080516020145b6113c357601261102e565b8080602001905181019061102e9190611da0565b606081516000036113f657505060408051602081019091526000815290565b6000604051806060016040528060408152602001611ddb60409139905060006003845160026114259190611ced565b61142f9190611d61565b61143a906004611cce565b90506000611449826020611ced565b6001600160401b0381111561146057611460611830565b6040519080825280601f01601f19166020018201604052801561148a576020820181803683370190505b509050818152600183018586518101602084015b818310156114f6576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182535060010161149e565b60038951066001811461151057600281146115215761152d565b613d3d60f01b60011983015261152d565b603d60f81b6000198301525b509398975050505050505050565b60606040825110611560578180602001905181019061155a9190611947565b92915050565b815160200361169f5760005b60208160ff161080156115a15750828160ff168151811061158f5761158f611d05565b01602001516001600160f81b03191615155b156115b857806115b081611dbb565b91505061156c565b60008160ff166001600160401b038111156115d5576115d5611830565b6040519080825280601f01601f1916602001820160405280156115ff576020820181803683370190505b509050600091505b60208260ff1610801561163c5750838260ff168151811061162a5761162a611d05565b01602001516001600160f81b03191615155b156111d157838260ff168151811061165657611656611d05565b602001015160f81c60f81b818360ff168151811061167657611676611d05565b60200101906001600160f81b031916908160001a9053508161169781611dbb565b925050611607565b50506040805180820190915260038152623f3f3f60e81b602082015290565b919050565b6000602082840312156116d557600080fd5b5035919050565b60005b838110156116f75781810151838201526020016116df565b83811115611706576000848401525b50505050565b602081526000825180602084015261172b8160408501602087016116dc565b601f01601f19169190910160400192915050565b6001600160a01b038116811461175457600080fd5b50565b6000806000806080858703121561176d57600080fd5b84516004811061177c57600080fd5b602086015190945061178d8161173f565b604086015190935061179e8161173f565b6060959095015193969295505050565b634e487b7160e01b600052602160045260246000fd5b600081516117d68185602086016116dc565b9290920192915050565b6722a92198989a9a9d60c11b8152600083516118038160088501602088016116dc565b602f60f81b60089184019182015283516118248160098401602088016116dc565b01600901949350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261185757600080fd5b81516001600160401b038082111561187157611871611830565b604051601f8301601f19908116603f0116810190828211818310171561189957611899611830565b816040528381528660208588010111156118b257600080fd5b610c7b8460208301602089016116dc565b805160ff811681146116be57600080fd5b6000806000606084860312156118e957600080fd5b83516001600160401b038082111561190057600080fd5b61190c87838801611846565b9450602086015191508082111561192257600080fd5b5061192f86828701611846565b92505061193e604085016118c3565b90509250925092565b60006020828403121561195957600080fd5b81516001600160401b0381111561196f57600080fd5b61102e84828501611846565b6000835161198d8184602088016116dc565b61040560f31b90830190815283516119ac8160028401602088016116dc565b602960f81b60029290910191820152600301949350505050565b6000602082840312156119d857600080fd5b5051919050565b6000602082840312156119f157600080fd5b81516111d18161173f565b6e16113a37ba30b629bab838363c911d60891b81528251600090611a2781600f8501602088016116dc565b6e16113334bc32b229bab838363c911d60891b600f918401918201528351611a5681601e8401602088016116dc565b01601e01949350505050565b7016113a37b5b2b720b2323932b9b9911d1160791b81528151600090611a8f8160118501602087016116dc565b601160f91b6011939091019283015250601201919050565b6a16113a37b5b2b724b2111d60a91b81528151600090611ace81600b8501602087016116dc565b91909101600b0192915050565b683d913730b6b2911d1160b91b81528851600090611b00816009850160208e016116dc565b6b11161139bcb6b137b6111d1160a11b6009918401918201528951611b2c816015840160208e016116dc565b601160f91b601592909101918201528851611b4e816016840160208d016116dc565b8851910190611b64816016840160208c016116dc565b7f2c2270726f70657274696573223a7b227374726174656779223a220000000000601692909101918201528651611ba2816031840160208b016116dc565b611c02611bf4611bee611be8611bdb611bd56031878901016e1116113a37b5b2b72a3cb832911d1160891b8152600f0190565b8c6117c4565b601160f91b815260010190565b896117c4565b876117c4565b617d7d60f01b815260020190565b9c9b505050505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611c4a81601d8501602087016116dc565b91909101601d0192915050565b664552433131353560c81b815261040560f31b600782015260008251611c848160098501602087016116dc565b602960f81b6009939091019283015250600a01919050565b60008251611cae8184602087016116dc565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611ce857611ce8611cb8565b500290565b60008219821115611d0057611d00611cb8565b500190565b634e487b7160e01b600052603260045260246000fd5b600081611d2a57611d2a611cb8565b506000190190565b600060018201611d4457611d44611cb8565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611d7057611d70611d4b565b500490565b600082821015611d8757611d87611cb8565b500390565b600082611d9b57611d9b611d4b565b500690565b600060208284031215611db257600080fd5b6111d1826118c3565b600060ff821660ff8103611dd157611dd1611cb8565b6001019291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220efe8b2b8a9a71b24c2840d4be1f03cbf2e53abaaf777b10c396110a5d2aec07564736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100615760003560e01c8062ad800c146100665780630e89341c1461008f5780633f47e662146100a25780634e41a1fb146100c7578063a61794ee146100da578063de406577146100e4575b600080fd5b6100796100743660046116c3565b61010f565b604051610086919061170c565b60405180910390f35b61007961009d3660046116c3565b6104f7565b6100b56100b03660046116c3565b610a81565b60405160ff9091168152602001610086565b6100796100d53660046116c3565b610bc5565b6100e2610f0a565b005b6000546100f7906001600160a01b031681565b6040516001600160a01b039091168152602001610086565b60008054604051630cf35bdd60e41b815260048101849052606092918291829182916001600160a01b039091169063cf35bdd090602401608060405180830381865afa158015610163573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101879190611757565b929650909450925090506001600160a01b0382166102b75760018460038111156101b3576101b36117ae565b036101d657826101cb6001600160a01b038216610f73565b979650505050505050565b60028460038111156101ea576101ea6117ae565b03610237576102036001600160a01b0384166014611036565b61020c826111d8565b60405160200161021d9291906117e0565b604051602081830303815290604052945050505050919050565b60008054604051631f0ee4c360e01b8152600481018990526001600160a01b0390911690631f0ee4c390602401600060405180830381865afa158015610281573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102a991908101906118d4565b509098975050505050505050565b60018460038111156102cb576102cb6117ae565b0361037557826102e36001600160a01b038216610f73565b836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610321573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103499190810190611947565b60405160200161035a92919061197b565b60405160208183030381529060405295505050505050919050565b6002846003811115610389576103896117ae565b03610442576103a26001600160a01b0384166014611036565b6103ab826111d8565b6040516020016103bc9291906117e0565b604051602081830303815290604052826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610409573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104319190810190611947565b60405160200161021d92919061197b565b60008054604051631f0ee4c360e01b8152600481018990526001600160a01b0390911690631f0ee4c390602401600060405180830381865afa15801561048c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104b491908101906118d4565b5050905080836001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610321573d6000803e3d6000fd5b60606105246040518060800160405280606081526020016060815260200160608152602001600081525090565b60008054604051630cf35bdd60e41b8152600481018690528291829182916001600160a01b03169063cf35bdd090602401608060405180830381865afa158015610572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105969190611757565b9296509094509250905060028460038111156105b4576105b46117ae565b03610645576040805180820190915260078152664552433131353560c81b602082015285526105ed6001600160a01b0384166014611036565b6105f6826111d8565b6040516020016106079291906117e0565b60408051601f198184030181529181526020878101929092528051808201825260078152664552433131353560c81b92810192909252860152610777565b6001846003811115610659576106596117ae565b036106d6576040805160c0810190915260056080820190815264045524332360dc1b60a0830152815283906020810161069a6001600160a01b038416610f73565b81526020016106b1836001600160a01b03166112d8565b81526020016106c8836001600160a01b031661131f565b60ff16815250955050610777565b60408051808201825260068152654e617469766560d01b602082015286526000549051631f0ee4c360e01b8152600481018990526001600160a01b0390911690631f0ee4c390602401600060405180830381865afa15801561073c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261076491908101906118d4565b60ff166060880152604087015260208601525b60008085600381111561078c5761078c6117ae565b036108e75760005460405163bd85b03960e01b8152600481018a9052610805916001600160a01b03169063bd85b03990602401602060405180830381865afa1580156107dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080091906119c6565b6111d8565b60008054604051635091e19f60e11b8152600481018c90526001600160a01b039091169063a123c33e90602401602060405180830381865afa15801561084f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087391906119df565b6001600160a01b0316146108a4576040518060400160405280600581526020016466616c736560d81b8152506108c2565b604051806040016040528060048152602001637472756560e01b8152505b6040516020016108d39291906119fc565b60405160208183030381529060405261091b565b6108fb6001600160a01b0385166014611036565b60405160200161090b9190611a62565b6040516020818303038152906040525b60208701516040880151919250610a55916002886003811115610940576109406117ae565b1461096f576040518060400160405280600c81526020016b16113232b1b4b6b0b639911d60a11b815250610980565b604051806020016040528060008152505b6002896003811115610994576109946117ae565b146109ab576109a68a606001516111d8565b6109bc565b604051806020016040528060008152505b6109d06001600160a01b0389166014611036565b8b518760028d60038111156109e7576109e76117ae565b14610a015760405180602001604052806000815250610a2a565b610a0a8a6111d8565b604051602001610a1a9190611aa7565b6040516020818303038152906040525b604051602001610a41989796959493929190611adb565b6040516020818303038152906040526113d7565b604051602001610a659190611c12565b6040516020818303038152906040529650505050505050919050565b60008054604051630cf35bdd60e41b815260048101849052829182916001600160a01b039091169063cf35bdd090602401608060405180830381865afa158015610acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af39190611757565b50919350915060029050826003811115610b0f57610b0f6117ae565b03610b1e575060009392505050565b6001826003811115610b3257610b326117ae565b03610b535780610b4a6001600160a01b03821661131f565b95945050505050565b60008054604051631f0ee4c360e01b8152600481018790526001600160a01b0390911690631f0ee4c390602401600060405180830381865afa158015610b9d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101cb91908101906118d4565b60008054604051630cf35bdd60e41b81526004810184905260609291829182916001600160a01b03169063cf35bdd090602401608060405180830381865afa158015610c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c399190611757565b50919450925090506001600160a01b038116610d43576001836003811115610c6357610c636117ae565b03610c855781610c7b6001600160a01b0382166112d8565b9695505050505050565b6002836003811115610c9957610c996117ae565b03610cc55750506040805180820190915260078152664552433131353560c81b60208201529392505050565b60008054604051631f0ee4c360e01b8152600481018890526001600160a01b0390911690631f0ee4c390602401600060405180830381865afa158015610d0f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d3791908101906118d4565b50979650505050505050565b6001836003811115610d5757610d576117ae565b03610dad5781610d6f6001600160a01b0382166112d8565b826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610409573d6000803e3d6000fd5b6002836003811115610dc157610dc16117ae565b03610e5557806001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610e04573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e2c9190810190611947565b604051602001610e3c9190611c57565b6040516020818303038152906040529350505050919050565b60008054604051631f0ee4c360e01b8152600481018890526001600160a01b0390911690631f0ee4c390602401600060405180830381865afa158015610e9f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ec791908101906118d4565b5091505080826001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015610409573d6000803e3d6000fd5b6000546001600160a01b031615610f5f5760405162461bcd60e51b8152602060048201526014602482015273165a595b19109bde08185b1c9958591e481cd95d60621b60448201526064015b60405180910390fd5b600080546001600160a01b03191633179055565b60408051600481526024810182526020810180516001600160e01b03166306fdde0360e01b179052905160609160009182916001600160a01b03861691610fba9190611c9c565b600060405180830381855afa9150503d8060008114610ff5576040519150601f19603f3d011682016040523d82523d6000602084013e610ffa565b606091505b50915091508161102557604051806040016040528060038152602001623f3f3f60e81b81525061102e565b61102e8161153b565b949350505050565b60606000611045836002611cce565b611050906002611ced565b6001600160401b0381111561106757611067611830565b6040519080825280601f01601f191660200182016040528015611091576020820181803683370190505b509050600360fc1b816000815181106110ac576110ac611d05565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106110db576110db611d05565b60200101906001600160f81b031916908160001a90535060006110ff846002611cce565b61110a906001611ced565b90505b6001811115611182576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061113e5761113e611d05565b1a60f81b82828151811061115457611154611d05565b60200101906001600160f81b031916908160001a90535060049490941c9361117b81611d1b565b905061110d565b5083156111d15760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610f56565b9392505050565b6060816000036111ff5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115611229578061121381611d32565b91506112229050600a83611d61565b9150611203565b6000816001600160401b0381111561124357611243611830565b6040519080825280601f01601f19166020018201604052801561126d576020820181803683370190505b5090505b841561102e57611282600183611d75565b915061128f600a86611d8c565b61129a906030611ced565b60f81b8183815181106112af576112af611d05565b60200101906001600160f81b031916908160001a9053506112d1600a86611d61565b9450611271565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009182916001600160a01b03861691610fba9190611c9c565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b1790529051600091829182916001600160a01b038616916113659190611c9c565b600060405180830381855afa9150503d80600081146113a0576040519150601f19603f3d011682016040523d82523d6000602084013e6113a5565b606091505b50915091508180156113b8575080516020145b6113c357601261102e565b8080602001905181019061102e9190611da0565b606081516000036113f657505060408051602081019091526000815290565b6000604051806060016040528060408152602001611ddb60409139905060006003845160026114259190611ced565b61142f9190611d61565b61143a906004611cce565b90506000611449826020611ced565b6001600160401b0381111561146057611460611830565b6040519080825280601f01601f19166020018201604052801561148a576020820181803683370190505b509050818152600183018586518101602084015b818310156114f6576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f811685015182535060010161149e565b60038951066001811461151057600281146115215761152d565b613d3d60f01b60011983015261152d565b603d60f81b6000198301525b509398975050505050505050565b60606040825110611560578180602001905181019061155a9190611947565b92915050565b815160200361169f5760005b60208160ff161080156115a15750828160ff168151811061158f5761158f611d05565b01602001516001600160f81b03191615155b156115b857806115b081611dbb565b91505061156c565b60008160ff166001600160401b038111156115d5576115d5611830565b6040519080825280601f01601f1916602001820160405280156115ff576020820181803683370190505b509050600091505b60208260ff1610801561163c5750838260ff168151811061162a5761162a611d05565b01602001516001600160f81b03191615155b156111d157838260ff168151811061165657611656611d05565b602001015160f81c60f81b818360ff168151811061167657611676611d05565b60200101906001600160f81b031916908160001a9053508161169781611dbb565b925050611607565b50506040805180820190915260038152623f3f3f60e81b602082015290565b919050565b6000602082840312156116d557600080fd5b5035919050565b60005b838110156116f75781810151838201526020016116df565b83811115611706576000848401525b50505050565b602081526000825180602084015261172b8160408501602087016116dc565b601f01601f19169190910160400192915050565b6001600160a01b038116811461175457600080fd5b50565b6000806000806080858703121561176d57600080fd5b84516004811061177c57600080fd5b602086015190945061178d8161173f565b604086015190935061179e8161173f565b6060959095015193969295505050565b634e487b7160e01b600052602160045260246000fd5b600081516117d68185602086016116dc565b9290920192915050565b6722a92198989a9a9d60c11b8152600083516118038160088501602088016116dc565b602f60f81b60089184019182015283516118248160098401602088016116dc565b01600901949350505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261185757600080fd5b81516001600160401b038082111561187157611871611830565b604051601f8301601f19908116603f0116810190828211818310171561189957611899611830565b816040528381528660208588010111156118b257600080fd5b610c7b8460208301602089016116dc565b805160ff811681146116be57600080fd5b6000806000606084860312156118e957600080fd5b83516001600160401b038082111561190057600080fd5b61190c87838801611846565b9450602086015191508082111561192257600080fd5b5061192f86828701611846565b92505061193e604085016118c3565b90509250925092565b60006020828403121561195957600080fd5b81516001600160401b0381111561196f57600080fd5b61102e84828501611846565b6000835161198d8184602088016116dc565b61040560f31b90830190815283516119ac8160028401602088016116dc565b602960f81b60029290910191820152600301949350505050565b6000602082840312156119d857600080fd5b5051919050565b6000602082840312156119f157600080fd5b81516111d18161173f565b6e16113a37ba30b629bab838363c911d60891b81528251600090611a2781600f8501602088016116dc565b6e16113334bc32b229bab838363c911d60891b600f918401918201528351611a5681601e8401602088016116dc565b01601e01949350505050565b7016113a37b5b2b720b2323932b9b9911d1160791b81528151600090611a8f8160118501602087016116dc565b601160f91b6011939091019283015250601201919050565b6a16113a37b5b2b724b2111d60a91b81528151600090611ace81600b8501602087016116dc565b91909101600b0192915050565b683d913730b6b2911d1160b91b81528851600090611b00816009850160208e016116dc565b6b11161139bcb6b137b6111d1160a11b6009918401918201528951611b2c816015840160208e016116dc565b601160f91b601592909101918201528851611b4e816016840160208d016116dc565b8851910190611b64816016840160208c016116dc565b7f2c2270726f70657274696573223a7b227374726174656779223a220000000000601692909101918201528651611ba2816031840160208b016116dc565b611c02611bf4611bee611be8611bdb611bd56031878901016e1116113a37b5b2b72a3cb832911d1160891b8152600f0190565b8c6117c4565b601160f91b815260010190565b896117c4565b876117c4565b617d7d60f01b815260020190565b9c9b505050505050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251611c4a81601d8501602087016116dc565b91909101601d0192915050565b664552433131353560c81b815261040560f31b600782015260008251611c848160098501602087016116dc565b602960f81b6009939091019283015250600a01919050565b60008251611cae8184602087016116dc565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611ce857611ce8611cb8565b500290565b60008219821115611d0057611d00611cb8565b500190565b634e487b7160e01b600052603260045260246000fd5b600081611d2a57611d2a611cb8565b506000190190565b600060018201611d4457611d44611cb8565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082611d7057611d70611d4b565b500490565b600082821015611d8757611d87611cb8565b500390565b600082611d9b57611d9b611d4b565b500690565b600060208284031215611db257600080fd5b6111d1826118c3565b600060ff821660ff8103611dd157611dd1611cb8565b6001019291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220efe8b2b8a9a71b24c2840d4be1f03cbf2e53abaaf777b10c396110a5d2aec07564736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5023,
        "contract": "contracts/bar/YieldBoxURIBuilder.sol:YieldBoxURIBuilder",
        "label": "yieldBox",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IYieldBox)5814"
      }
    ],
    "types": {
      "t_contract(IYieldBox)5814": {
        "encoding": "inplace",
        "label": "contract IYieldBox",
        "numberOfBytes": "20"
      }
    }
  }
}