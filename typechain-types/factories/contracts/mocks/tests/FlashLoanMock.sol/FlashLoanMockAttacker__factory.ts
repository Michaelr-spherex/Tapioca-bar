/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  FlashLoanMockAttacker,
  FlashLoanMockAttackerInterface,
} from "../../../../../contracts/mocks/tests/FlashLoanMock.sol/FlashLoanMockAttacker";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "fee",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onFlashLoan",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610130806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806323e30c8b14602d575b600080fd5b604060383660046059565b505050505050565b005b6001600160a01b0381168114605657600080fd5b50565b60008060008060008060a08789031215607157600080fd5b8635607a816042565b955060208701356088816042565b94506040870135935060608701359250608087013567ffffffffffffffff8082111560b257600080fd5b818901915089601f83011260c557600080fd5b81358181111560d357600080fd5b8a602082850101111560e457600080fd5b602083019450809350505050929550929550929556fea264697066735822122024992b00d917dc1ff48ff43938e38f355bf2df5bb8b49b50a107c1d6d262d46b64736f6c634300080f0033";

type FlashLoanMockAttackerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FlashLoanMockAttackerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FlashLoanMockAttacker__factory extends ContractFactory {
  constructor(...args: FlashLoanMockAttackerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FlashLoanMockAttacker> {
    return super.deploy(overrides || {}) as Promise<FlashLoanMockAttacker>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FlashLoanMockAttacker {
    return super.attach(address) as FlashLoanMockAttacker;
  }
  override connect(signer: Signer): FlashLoanMockAttacker__factory {
    return super.connect(signer) as FlashLoanMockAttacker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FlashLoanMockAttackerInterface {
    return new utils.Interface(_abi) as FlashLoanMockAttackerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FlashLoanMockAttacker {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as FlashLoanMockAttacker;
  }
}
