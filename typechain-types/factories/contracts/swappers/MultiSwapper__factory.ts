/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MultiSwapper,
  MultiSwapperInterface,
} from "../../../contracts/swappers/MultiSwapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "contract BeachBar",
        name: "_tapiocaBar",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "_pairCodeHash",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenInId",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "shareIn",
        type: "uint256",
      },
    ],
    name: "getOutputAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenInId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "tokenOutId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountMinOut",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "shareIn",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "shareOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6101006040523480156200001257600080fd5b506040516200147c3803806200147c8339810160408190526200003591620000dd565b6001600160a01b03808416608052821660a08190526040805163de40657760e01b8152905163de406577916004808201926020929091908290030181865afa15801562000086573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ac919062000125565b6001600160a01b031660c05260e052506200014c9050565b6001600160a01b0381168114620000da57600080fd5b50565b600080600060608486031215620000f357600080fd5b83516200010081620000c4565b60208501519093506200011381620000c4565b80925050604084015190509250925092565b6000602082840312156200013857600080fd5b81516200014581620000c4565b9392505050565b60805160a05160c05160e0516112b4620001c860003960008181610180015281816105ec015281816106e40152610c4a01526000818160ba015281816101e501528181610307015261039d0152600050506000818161012e015281816105c90152818161068d01528181610be40152610c2701526112b46000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631b45f0331461003b578063ce58b20014610061575b600080fd5b61004e610049366004610f1b565b610089565b6040519081526020015b60405180910390f35b61007461006f366004610f8a565b6101de565b60408051928352602083019190915201610058565b60405163442c159960e01b815260048101859052602481018290526000604482018190529081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063442c159990606401602060405180830381865afa158015610101573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101259190611004565b905060006101a97f0000000000000000000000000000000000000000000000000000000000000000838888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152507f0000000000000000000000000000000000000000000000000000000000000000925061042f915050565b905080600182516101ba9190611033565b815181106101ca576101ca61104a565b602002602001015192505050949350505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638d2e63b88b30306000896040518663ffffffff1660e01b8152600401610238959493929190611060565b60408051808303816000875af1158015610256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027a919061108f565b5090506102bd81898888808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152503092506105c1915050565b925085856102cc600182611033565b8181106102db576102db61104a565b90506020020160208101906102f091906110b3565b60405163095ea7b360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015260248201869052919091169063095ea7b3906044016020604051808303816000875af1158015610361573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038591906110d5565b50604051634d4d7cbd60e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639a9af97a906103db908c9030908c908990600090600401611060565b60408051808303816000875af11580156103f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041d919061108f565b939b939a509298505050505050505050565b60606002835110156104885760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a20494e56414c49445f50415448000060448201526064015b60405180910390fd5b825167ffffffffffffffff8111156104a2576104a26110f7565b6040519080825280602002602001820160405280156104cb578160200160208202803683370190505b50905083816000815181106104e2576104e261104a565b60200260200101818152505060005b600184516104ff9190611033565b8110156105b8576000806105538887858151811061051f5761051f61104a565b602002602001015188866001610535919061110d565b815181106105455761054561104a565b602002602001015188610747565b9150915061057b84848151811061056c5761056c61104a565b60200260200101518383610813565b8461058785600161110d565b815181106105975761059761104a565b602002602001018181525050505080806105b090611125565b9150506104f1565b50949350505050565b6000806106107f000000000000000000000000000000000000000000000000000000000000000087867f000000000000000000000000000000000000000000000000000000000000000061042f565b905080600182516106219190611033565b815181106106315761063161104a565b60200260200101519150848210156106855760405162461bcd60e51b81526020600482015260176024820152761a5b9cdd59999a58da595b9d0b585b5bdd5b9d0b5bdd5d604a1b604482015260640161047f565b61073c6107087f0000000000000000000000000000000000000000000000000000000000000000866000815181106106bf576106bf61104a565b6020026020010151876001815181106106da576106da61104a565b60200260200101517f0000000000000000000000000000000000000000000000000000000000000000610932565b878660008151811061071c5761071c61104a565b60200260200101516001600160a01b03166109e69092919063ffffffff16565b6105b8818585610b01565b60008060006107568686610d1d565b50905060008061076889898989610932565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c99190611155565b506001600160701b031691506001600160701b03169150826001600160a01b0316886001600160a01b031614610800578082610803565b81815b909a909950975050505050505050565b60008084116108785760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201526a1394155517d05353d5539560aa1b606482015260840161047f565b6000831180156108885750600082115b6108e55760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c604482015267495155494449545960c01b606482015260840161047f565b60006108f3856103e5610e14565b905060006109018285610e14565b9050600061091b83610915886103e8610e14565b90610e81565b905061092781836111a5565b979650505050505050565b60008060006109418686610d1d565b6040516001600160601b0319606084811b8216602084015283901b1660348201529193509150879060480160405160208183030381529060405280519060200120856040516020016109c3939291906001600160f81b0319815260609390931b6001600160601b03191660018401526015830191909152603582015260550190565b60408051601f198184030181529190528051602090910120979650505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691610a4291906111f3565b6000604051808303816000865af19150503d8060008114610a7f576040519150601f19603f3d011682016040523d82523d6000602084013e610a84565b606091505b5091509150818015610aae575080511580610aae575080806020019051810190610aae91906110d5565b610afa5760405162461bcd60e51b815260206004820152601c60248201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604482015260640161047f565b5050505050565b60005b60018351610b129190611033565b811015610d1757600080848381518110610b2e57610b2e61104a565b602002602001015185846001610b44919061110d565b81518110610b5457610b5461104a565b6020026020010151915091506000610b6c8383610d1d565b509050600087610b7d86600161110d565b81518110610b8d57610b8d61104a565b60200260200101519050600080836001600160a01b0316866001600160a01b031614610bbb57826000610bbf565b6000835b91509150600060028a51610bd39190611033565b8810610bdf5788610c20565b610c207f0000000000000000000000000000000000000000000000000000000000000000878c610c108c600261110d565b815181106106da576106da61104a565b9050610c6e7f000000000000000000000000000000000000000000000000000000000000000088887f0000000000000000000000000000000000000000000000000000000000000000610932565b6001600160a01b031663022c0d9f84848460006040519080825280601f01601f191660200182016040528015610cab576020820181803683370190505b506040518563ffffffff1660e01b8152600401610ccb949392919061120f565b600060405180830381600087803b158015610ce557600080fd5b505af1158015610cf9573d6000803e3d6000fd5b50505050505050505050508080610d0f90611125565b915050610b04565b50505050565b600080826001600160a01b0316846001600160a01b031603610d8f5760405162461bcd60e51b815260206004820152602560248201527f556e697377617056324c6962726172793a204944454e544943414c5f41444452604482015264455353455360d81b606482015260840161047f565b826001600160a01b0316846001600160a01b031610610daf578284610db2565b83835b90925090506001600160a01b038216610e0d5760405162461bcd60e51b815260206004820152601e60248201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604482015260640161047f565b9250929050565b6000811580610e3857508282610e2a818361125f565b9250610e3690836111a5565b145b610e7b5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015260640161047f565b92915050565b600082610e8e838261110d565b9150811015610e7b5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015260640161047f565b60008083601f840112610ee857600080fd5b50813567ffffffffffffffff811115610f0057600080fd5b6020830191508360208260051b8501011115610e0d57600080fd5b60008060008060608587031215610f3157600080fd5b84359350602085013567ffffffffffffffff811115610f4f57600080fd5b610f5b87828801610ed6565b9598909750949560400135949350505050565b80356001600160a01b0381168114610f8557600080fd5b919050565b600080600080600080600060c0888a031215610fa557600080fd5b873596506020880135955060408801359450610fc360608901610f6e565b9350608088013567ffffffffffffffff811115610fdf57600080fd5b610feb8a828b01610ed6565b989b979a5095989497959660a090950135949350505050565b60006020828403121561101657600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156110455761104561101d565b500390565b634e487b7160e01b600052603260045260246000fd5b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b600080604083850312156110a257600080fd5b505080516020909101519092909150565b6000602082840312156110c557600080fd5b6110ce82610f6e565b9392505050565b6000602082840312156110e757600080fd5b815180151581146110ce57600080fd5b634e487b7160e01b600052604160045260246000fd5b600082198211156111205761112061101d565b500190565b6000600182016111375761113761101d565b5060010190565b80516001600160701b0381168114610f8557600080fd5b60008060006060848603121561116a57600080fd5b6111738461113e565b92506111816020850161113e565b9150604084015163ffffffff8116811461119a57600080fd5b809150509250925092565b6000826111c257634e487b7160e01b600052601260045260246000fd5b500490565b60005b838110156111e25781810151838201526020016111ca565b83811115610d175750506000910152565b600082516112058184602087016111c7565b9190910192915050565b84815283602082015260018060a01b038316604082015260806060820152600082518060808401526112488160a08501602087016111c7565b601f01601f19169190910160a00195945050505050565b60008160001904831182151516156112795761127961101d565b50029056fea264697066735822122038b661c9b0ef12095121381a315d9a004eb5dc2822ac5d09bfaad95d6f9982a464736f6c634300080f0033";

type MultiSwapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiSwapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiSwapper__factory extends ContractFactory {
  constructor(...args: MultiSwapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _factory: PromiseOrValue<string>,
    _tapiocaBar: PromiseOrValue<string>,
    _pairCodeHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultiSwapper> {
    return super.deploy(
      _factory,
      _tapiocaBar,
      _pairCodeHash,
      overrides || {}
    ) as Promise<MultiSwapper>;
  }
  override getDeployTransaction(
    _factory: PromiseOrValue<string>,
    _tapiocaBar: PromiseOrValue<string>,
    _pairCodeHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _factory,
      _tapiocaBar,
      _pairCodeHash,
      overrides || {}
    );
  }
  override attach(address: string): MultiSwapper {
    return super.attach(address) as MultiSwapper;
  }
  override connect(signer: Signer): MultiSwapper__factory {
    return super.connect(signer) as MultiSwapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiSwapperInterface {
    return new utils.Interface(_abi) as MultiSwapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiSwapper {
    return new Contract(address, _abi, signerOrProvider) as MultiSwapper;
  }
}
