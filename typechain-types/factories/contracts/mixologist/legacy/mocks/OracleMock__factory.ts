/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  OracleMock,
  OracleMockInterface,
} from "../../../../../contracts/mixologist/legacy/mocks/OracleMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "get",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDataParameter",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "peek",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "peekSpot",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "rate_",
        type: "uint256",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "val",
        type: "bool",
      },
    ],
    name: "setSuccess",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "success",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506001805460ff1916811790556103558061002c6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c699c4d611610066578063c699c4d614610127578063d39bbef014610155578063d568866c1461016b578063d6d7d52514610199578063eeb8a8d31461019957600080fd5b80630b93381b146100a35780632b39febd146100c55780632c4e722e146100da57806360fe47b1146100f15780637bcc7f8114610106575b600080fd5b6001546100b09060ff1681565b60405190151581526020015b60405180910390f35b6100cd6101ce565b6040516100bc9190610258565b6100e360005481565b6040519081526020016100bc565b6101046100ff366004610272565b600055565b005b61010461011436600461028b565b6001805460ff1916911515919091179055565b6100cd6101353660046102ad565b5050604080518082019091526004815263151154d560e21b602082015290565b6100e36101633660046102ad565b505060005490565b6100cd6101793660046102ad565b505060408051808201909152600481526315195cdd60e21b602082015290565b6101b76101a73660046102ad565b505060015460005460ff90911691565b6040805192151583526020830191909152016100bc565b60606040516020016101f79060208082526003908201526203078360ec1b604082015260600190565b604051602081830303815290604052905090565b6000815180845260005b8181101561023157602081850181015186830182015201610215565b81811115610243576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061026b602083018461020b565b9392505050565b60006020828403121561028457600080fd5b5035919050565b60006020828403121561029d57600080fd5b8135801515811461026b57600080fd5b600080602083850312156102c057600080fd5b823567ffffffffffffffff808211156102d857600080fd5b818501915085601f8301126102ec57600080fd5b8135818111156102fb57600080fd5b86602082850101111561030d57600080fd5b6020929092019691955090935050505056fea2646970667358221220f97f38e6bbf7a4f31e8ec75af83648ea83c291e58f2e6b04fdfb20bedaed5c0964736f6c634300080f0033";

type OracleMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OracleMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OracleMock__factory extends ContractFactory {
  constructor(...args: OracleMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OracleMock> {
    return super.deploy(overrides || {}) as Promise<OracleMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OracleMock {
    return super.attach(address) as OracleMock;
  }
  override connect(signer: Signer): OracleMock__factory {
    return super.connect(signer) as OracleMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleMockInterface {
    return new utils.Interface(_abi) as OracleMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OracleMock {
    return new Contract(address, _abi, signerOrProvider) as OracleMock;
  }
}
