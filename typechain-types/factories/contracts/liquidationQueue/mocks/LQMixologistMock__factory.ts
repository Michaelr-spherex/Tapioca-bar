/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  LQMixologistMock,
  LQMixologistMockInterface,
} from "../../../../contracts/liquidationQueue/mocks/LQMixologistMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract BeachBar",
        name: "_beachBar",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_assetId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "contract ILiquidationQueue",
        name: "liquidationQueue",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "activationTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBidAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "feeCollector",
            type: "address",
          },
        ],
        internalType: "struct LiquidationQueueMeta",
        name: "lqMeta",
        type: "tuple",
      },
    ],
    name: "initLq",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161020c38038061020c83398101604081905261002f91610045565b6001600160a01b0390911660805260a05261007f565b6000806040838503121561005857600080fd5b82516001600160a01b038116811461006f57600080fd5b6020939093015192949293505050565b60805160a05161016e61009e600039600050506000505061016e6000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80634178607514610030575b600080fd5b61004361003e3660046100bf565b610045565b005b604051630642df2d60e01b81526001600160a01b03831690630642df2d90610071908490600401610100565b600060405180830381600087803b15801561008b57600080fd5b505af115801561009f573d6000803e3d6000fd5b505050505050565b6001600160a01b03811681146100bc57600080fd5b50565b60008082840360808112156100d357600080fd5b83356100de816100a7565b92506060601f19820112156100f257600080fd5b506020830190509250929050565b8135815260208083013590820152606081016040830135610120816100a7565b6001600160a01b03166040929092019190915291905056fea26469706673582212207dc7a4b89036be3f272ed8bc93249253ecc358020aab6b9c691d4055e5a722aa64736f6c634300080f0033";

type LQMixologistMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LQMixologistMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LQMixologistMock__factory extends ContractFactory {
  constructor(...args: LQMixologistMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _beachBar: PromiseOrValue<string>,
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LQMixologistMock> {
    return super.deploy(
      _beachBar,
      _assetId,
      overrides || {}
    ) as Promise<LQMixologistMock>;
  }
  override getDeployTransaction(
    _beachBar: PromiseOrValue<string>,
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_beachBar, _assetId, overrides || {});
  }
  override attach(address: string): LQMixologistMock {
    return super.attach(address) as LQMixologistMock;
  }
  override connect(signer: Signer): LQMixologistMock__factory {
    return super.connect(signer) as LQMixologistMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LQMixologistMockInterface {
    return new utils.Interface(_abi) as LQMixologistMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LQMixologistMock {
    return new Contract(address, _abi, signerOrProvider) as LQMixologistMock;
  }
}
