/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BaseBoringBatchable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseBoringBatchable__factory>;
    getContractFactory(
      name: "BoringBatchable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringBatchable__factory>;
    getContractFactory(
      name: "BoringFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringFactory__factory>;
    getContractFactory(
      name: "BoringOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnable__factory>;
    getContractFactory(
      name: "BoringOwnableData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnableData__factory>;
    getContractFactory(
      name: "Domain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Domain__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Data",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Data__factory>;
    getContractFactory(
      name: "ERC20WithSupply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20WithSupply__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155TokenReceiver__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IMasterContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterContract__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "AssetRegister",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetRegister__factory>;
    getContractFactory(
      name: "BeachBar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeachBar__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "ERC1155TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155TokenReceiver__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155TokenReceiver__factory>;
    getContractFactory(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IWrappedNative",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWrappedNative__factory>;
    getContractFactory(
      name: "IYieldBox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYieldBox__factory>;
    getContractFactory(
      name: "NativeTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NativeTokenFactory__factory>;
    getContractFactory(
      name: "YieldBox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldBox__factory>;
    getContractFactory(
      name: "YieldBoxURIBuilder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldBoxURIBuilder__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "ILiquidationQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidationQueue__factory>;
    getContractFactory(
      name: "LiquidationQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidationQueue__factory>;
    getContractFactory(
      name: "LQMixologistMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LQMixologistMock__factory>;
    getContractFactory(
      name: "IBatchFlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBatchFlashBorrower__factory>;
    getContractFactory(
      name: "IFlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashBorrower__factory>;
    getContractFactory(
      name: "IMixologist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMixologist__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "ERC20LessDecimalsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20LessDecimalsMock__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "ERC20MoreDecimalsMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20MoreDecimalsMock__factory>;
    getContractFactory(
      name: "OracleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleMock__factory>;
    getContractFactory(
      name: "WETH9Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9Mock__factory>;
    getContractFactory(
      name: "Mixologist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Mixologist__factory>;
    getContractFactory(
      name: "MixologistHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MixologistHelper__factory>;
    getContractFactory(
      name: "FlashLoanMockAttacker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashLoanMockAttacker__factory>;
    getContractFactory(
      name: "FlashLoanMockSuccess",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashLoanMockSuccess__factory>;
    getContractFactory(
      name: "VulnMultiSwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VulnMultiSwapper__factory>;
    getContractFactory(
      name: "IERC20Uniswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Uniswap__factory>;
    getContractFactory(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Callee__factory>;
    getContractFactory(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IUniswapV2FactoryExtend",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2FactoryExtend__factory>;
    getContractFactory(
      name: "UniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ERC20__factory>;
    getContractFactory(
      name: "UniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Factory__factory>;
    getContractFactory(
      name: "IMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigrator__factory>;
    getContractFactory(
      name: "UniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Pair__factory>;
    getContractFactory(
      name: "UniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router02__factory>;
    getContractFactory(
      name: "ISwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapper__factory>;
    getContractFactory(
      name: "MultiSwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSwapper__factory>;

    getContractAt(
      name: "BaseBoringBatchable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseBoringBatchable>;
    getContractAt(
      name: "BoringBatchable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringBatchable>;
    getContractAt(
      name: "BoringFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringFactory>;
    getContractAt(
      name: "BoringOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringOwnable>;
    getContractAt(
      name: "BoringOwnableData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringOwnableData>;
    getContractAt(
      name: "Domain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Domain>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Data",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Data>;
    getContractAt(
      name: "ERC20WithSupply",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20WithSupply>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155TokenReceiver>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IMasterContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterContract>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "AssetRegister",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetRegister>;
    getContractAt(
      name: "BeachBar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeachBar>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "ERC1155TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155TokenReceiver>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155TokenReceiver>;
    getContractAt(
      name: "IStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IWrappedNative",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWrappedNative>;
    getContractAt(
      name: "IYieldBox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYieldBox>;
    getContractAt(
      name: "NativeTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NativeTokenFactory>;
    getContractAt(
      name: "YieldBox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldBox>;
    getContractAt(
      name: "YieldBoxURIBuilder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldBoxURIBuilder>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "ILiquidationQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidationQueue>;
    getContractAt(
      name: "LiquidationQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidationQueue>;
    getContractAt(
      name: "LQMixologistMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LQMixologistMock>;
    getContractAt(
      name: "IBatchFlashBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBatchFlashBorrower>;
    getContractAt(
      name: "IFlashBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashBorrower>;
    getContractAt(
      name: "IMixologist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMixologist>;
    getContractAt(
      name: "IOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "ERC20LessDecimalsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20LessDecimalsMock>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "ERC20MoreDecimalsMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20MoreDecimalsMock>;
    getContractAt(
      name: "OracleMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleMock>;
    getContractAt(
      name: "WETH9Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9Mock>;
    getContractAt(
      name: "Mixologist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Mixologist>;
    getContractAt(
      name: "MixologistHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MixologistHelper>;
    getContractAt(
      name: "FlashLoanMockAttacker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashLoanMockAttacker>;
    getContractAt(
      name: "FlashLoanMockSuccess",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashLoanMockSuccess>;
    getContractAt(
      name: "VulnMultiSwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VulnMultiSwapper>;
    getContractAt(
      name: "IERC20Uniswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Uniswap>;
    getContractAt(
      name: "IUniswapV2Callee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Callee>;
    getContractAt(
      name: "IUniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IUniswapV2FactoryExtend",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2FactoryExtend>;
    getContractAt(
      name: "UniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2ERC20>;
    getContractAt(
      name: "UniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Factory>;
    getContractAt(
      name: "IMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigrator>;
    getContractAt(
      name: "UniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Pair>;
    getContractAt(
      name: "UniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Router02>;
    getContractAt(
      name: "ISwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapper>;
    getContractAt(
      name: "MultiSwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSwapper>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
