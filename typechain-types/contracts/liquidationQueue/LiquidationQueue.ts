/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type BidderStruct = {
  amount: PromiseOrValue<BigNumberish>;
  timestamp: PromiseOrValue<BigNumberish>;
};

export type BidderStructOutput = [BigNumber, BigNumber] & {
  amount: BigNumber;
  timestamp: BigNumber;
};

export type OrderBookPoolEntryStruct = {
  bidder: PromiseOrValue<string>;
  bidInfo: BidderStruct;
};

export type OrderBookPoolEntryStructOutput = [string, BidderStructOutput] & {
  bidder: string;
  bidInfo: BidderStructOutput;
};

export type LiquidationQueueMetaStruct = {
  activationTime: PromiseOrValue<BigNumberish>;
  minBidAmount: PromiseOrValue<BigNumberish>;
  feeCollector: PromiseOrValue<string>;
};

export type LiquidationQueueMetaStructOutput = [
  BigNumber,
  BigNumber,
  string
] & {
  activationTime: BigNumber;
  minBidAmount: BigNumber;
  feeCollector: string;
};

export interface LiquidationQueueInterface extends utils.Interface {
  functions: {
    "activateBid(address,uint256)": FunctionFragment;
    "balancesDue(address)": FunctionFragment;
    "bid(address,uint256,uint256)": FunctionFragment;
    "bidPools(uint256,address)": FunctionFragment;
    "executeBids(uint256)": FunctionFragment;
    "getNextAvailBidPool()": FunctionFragment;
    "getOrderBookPoolEntries(uint256)": FunctionFragment;
    "getOrderBookSize(uint256)": FunctionFragment;
    "init((uint256,uint256,address))": FunctionFragment;
    "liquidatedAssetId()": FunctionFragment;
    "lqAssetId()": FunctionFragment;
    "market()": FunctionFragment;
    "marketAssetId()": FunctionFragment;
    "orderBookEntries(uint256,uint256)": FunctionFragment;
    "orderBookInfos(uint256)": FunctionFragment;
    "redeem(address)": FunctionFragment;
    "removeBid(address,uint256,uint256)": FunctionFragment;
    "removeInactivatedBid(address,uint256)": FunctionFragment;
    "userBidIndexLength(address,uint256)": FunctionFragment;
    "userBidIndexes(address,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activateBid"
      | "balancesDue"
      | "bid"
      | "bidPools"
      | "executeBids"
      | "getNextAvailBidPool"
      | "getOrderBookPoolEntries"
      | "getOrderBookSize"
      | "init"
      | "liquidatedAssetId"
      | "lqAssetId"
      | "market"
      | "marketAssetId"
      | "orderBookEntries"
      | "orderBookInfos"
      | "redeem"
      | "removeBid"
      | "removeInactivatedBid"
      | "userBidIndexLength"
      | "userBidIndexes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activateBid",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balancesDue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bid",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bidPools",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBids",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextAvailBidPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBookPoolEntries",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrderBookSize",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [LiquidationQueueMetaStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidatedAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lqAssetId", values?: undefined): string;
  encodeFunctionData(functionFragment: "market", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "marketAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderBookEntries",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "orderBookInfos",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeBid",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeInactivatedBid",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userBidIndexLength",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userBidIndexes",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "activateBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancesDue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bidPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextAvailBidPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBookPoolEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrderBookSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidatedAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lqAssetId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "market", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderBookEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderBookInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeInactivatedBid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBidIndexLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBidIndexes",
    data: BytesLike
  ): Result;

  events: {
    "ActivateBid(address,address,uint256,uint256,uint256)": EventFragment;
    "Bid(address,address,uint256,uint256,uint256)": EventFragment;
    "ExecuteBids(address,uint256,uint256,uint256,uint256)": EventFragment;
    "Redeem(address,address,uint256)": EventFragment;
    "RemoveBid(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ActivateBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteBids"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveBid"): EventFragment;
}

export interface ActivateBidEventObject {
  caller: string;
  bidder: string;
  pool: BigNumber;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type ActivateBidEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  ActivateBidEventObject
>;

export type ActivateBidEventFilter = TypedEventFilter<ActivateBidEvent>;

export interface BidEventObject {
  caller: string;
  bidder: string;
  pool: BigNumber;
  amount: BigNumber;
  timestamp: BigNumber;
}
export type BidEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  BidEventObject
>;

export type BidEventFilter = TypedEventFilter<BidEvent>;

export interface ExecuteBidsEventObject {
  caller: string;
  pool: BigNumber;
  amountExecuted: BigNumber;
  collateralLiquidated: BigNumber;
  timestamp: BigNumber;
}
export type ExecuteBidsEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber],
  ExecuteBidsEventObject
>;

export type ExecuteBidsEventFilter = TypedEventFilter<ExecuteBidsEvent>;

export interface RedeemEventObject {
  redeemer: string;
  to: string;
  amount: BigNumber;
}
export type RedeemEvent = TypedEvent<
  [string, string, BigNumber],
  RedeemEventObject
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface RemoveBidEventObject {
  caller: string;
  bidder: string;
  pool: BigNumber;
  amount: BigNumber;
}
export type RemoveBidEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RemoveBidEventObject
>;

export type RemoveBidEventFilter = TypedEventFilter<RemoveBidEvent>;

export interface LiquidationQueue extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidationQueueInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activateBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balancesDue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bidPools(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
    >;

    executeBids(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNextAvailBidPool(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { i: BigNumber; available: boolean }>;

    getOrderBookPoolEntries(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [OrderBookPoolEntryStructOutput[]] & {
        x: OrderBookPoolEntryStructOutput[];
      }
    >;

    getOrderBookSize(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { size: BigNumber }>;

    init(
      _liquidationQueueMeta: LiquidationQueueMetaStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidatedAssetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    lqAssetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    market(overrides?: CallOverrides): Promise<[string]>;

    marketAssetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    orderBookEntries(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BidderStructOutput] & {
        bidder: string;
        bidInfo: BidderStructOutput;
      }
    >;

    orderBookInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        poolId: number;
        nextBidPull: number;
        nextBidPush: number;
      }
    >;

    redeem(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      bidPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeInactivatedBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userBidIndexLength(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { len: BigNumber }>;

    userBidIndexes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  activateBid(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balancesDue(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bid(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bidPools(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
  >;

  executeBids(
    collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNextAvailBidPool(
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean] & { i: BigNumber; available: boolean }>;

  getOrderBookPoolEntries(
    pool: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<OrderBookPoolEntryStructOutput[]>;

  getOrderBookSize(
    pool: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  init(
    _liquidationQueueMeta: LiquidationQueueMetaStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidatedAssetId(overrides?: CallOverrides): Promise<BigNumber>;

  lqAssetId(overrides?: CallOverrides): Promise<BigNumber>;

  market(overrides?: CallOverrides): Promise<string>;

  marketAssetId(overrides?: CallOverrides): Promise<BigNumber>;

  orderBookEntries(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BidderStructOutput] & {
      bidder: string;
      bidInfo: BidderStructOutput;
    }
  >;

  orderBookInfos(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      poolId: number;
      nextBidPull: number;
      nextBidPush: number;
    }
  >;

  redeem(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeBid(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    bidPosition: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeInactivatedBid(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userBidIndexLength(
    user: PromiseOrValue<string>,
    pool: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userBidIndexes(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    activateBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balancesDue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    bidPools(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; timestamp: BigNumber }
    >;

    executeBids(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalAmountExecuted: BigNumber;
        totalCollateralLiquidated: BigNumber;
      }
    >;

    getNextAvailBidPool(
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean] & { i: BigNumber; available: boolean }>;

    getOrderBookPoolEntries(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<OrderBookPoolEntryStructOutput[]>;

    getOrderBookSize(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _liquidationQueueMeta: LiquidationQueueMetaStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidatedAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    lqAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<string>;

    marketAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    orderBookEntries(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BidderStructOutput] & {
        bidder: string;
        bidInfo: BidderStructOutput;
      }
    >;

    orderBookInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        poolId: number;
        nextBidPull: number;
        nextBidPush: number;
      }
    >;

    redeem(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      bidPosition: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeInactivatedBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBidIndexLength(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBidIndexes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ActivateBid(address,address,uint256,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      timestamp?: null
    ): ActivateBidEventFilter;
    ActivateBid(
      caller?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      timestamp?: null
    ): ActivateBidEventFilter;

    "Bid(address,address,uint256,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      timestamp?: null
    ): BidEventFilter;
    Bid(
      caller?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      timestamp?: null
    ): BidEventFilter;

    "ExecuteBids(address,uint256,uint256,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      amountExecuted?: null,
      collateralLiquidated?: null,
      timestamp?: null
    ): ExecuteBidsEventFilter;
    ExecuteBids(
      caller?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      amountExecuted?: null,
      collateralLiquidated?: null,
      timestamp?: null
    ): ExecuteBidsEventFilter;

    "Redeem(address,address,uint256)"(
      redeemer?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): RedeemEventFilter;
    Redeem(
      redeemer?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): RedeemEventFilter;

    "RemoveBid(address,address,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RemoveBidEventFilter;
    RemoveBid(
      caller?: PromiseOrValue<string> | null,
      bidder?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): RemoveBidEventFilter;
  };

  estimateGas: {
    activateBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balancesDue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bidPools(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeBids(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNextAvailBidPool(overrides?: CallOverrides): Promise<BigNumber>;

    getOrderBookPoolEntries(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrderBookSize(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _liquidationQueueMeta: LiquidationQueueMetaStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidatedAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    lqAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    market(overrides?: CallOverrides): Promise<BigNumber>;

    marketAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    orderBookEntries(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orderBookInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      bidPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeInactivatedBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userBidIndexLength(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userBidIndexes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activateBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balancesDue(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bidPools(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeBids(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNextAvailBidPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBookPoolEntries(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrderBookSize(
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _liquidationQueueMeta: LiquidationQueueMetaStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidatedAssetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lqAssetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    market(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    marketAssetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderBookEntries(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orderBookInfos(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      bidPosition: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeInactivatedBid(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userBidIndexLength(
      user: PromiseOrValue<string>,
      pool: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userBidIndexes(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
