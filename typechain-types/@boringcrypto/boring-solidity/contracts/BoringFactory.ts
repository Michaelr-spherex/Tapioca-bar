/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface BoringFactoryInterface extends utils.Interface {
  functions: {
    "clonesOf(address,uint256)": FunctionFragment;
    "clonesOfCount(address)": FunctionFragment;
    "deploy(address,bytes,bool)": FunctionFragment;
    "masterContractOf(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "clonesOf"
      | "clonesOfCount"
      | "deploy"
      | "masterContractOf"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "clonesOf",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "clonesOfCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "masterContractOf",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "clonesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clonesOfCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterContractOf",
    data: BytesLike
  ): Result;

  events: {
    "LogDeploy(address,bytes,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogDeploy"): EventFragment;
}

export interface LogDeployEventObject {
  masterContract: string;
  data: string;
  cloneAddress: string;
}
export type LogDeployEvent = TypedEvent<
  [string, string, string],
  LogDeployEventObject
>;

export type LogDeployEventFilter = TypedEventFilter<LogDeployEvent>;

export interface BoringFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BoringFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    clonesOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    clonesOfCount(
      masterContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cloneCount: BigNumber }>;

    deploy(
      masterContract: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    masterContractOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  clonesOf(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  clonesOfCount(
    masterContract: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deploy(
    masterContract: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    useCreate2: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  masterContractOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    clonesOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    clonesOfCount(
      masterContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      masterContract: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    masterContractOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "LogDeploy(address,bytes,address)"(
      masterContract?: PromiseOrValue<string> | null,
      data?: null,
      cloneAddress?: PromiseOrValue<string> | null
    ): LogDeployEventFilter;
    LogDeploy(
      masterContract?: PromiseOrValue<string> | null,
      data?: null,
      cloneAddress?: PromiseOrValue<string> | null
    ): LogDeployEventFilter;
  };

  estimateGas: {
    clonesOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clonesOfCount(
      masterContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploy(
      masterContract: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    masterContractOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    clonesOf(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clonesOfCount(
      masterContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploy(
      masterContract: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      useCreate2: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    masterContractOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
