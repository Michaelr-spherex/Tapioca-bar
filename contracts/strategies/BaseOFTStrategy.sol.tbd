// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import '@boringcrypto/boring-solidity/contracts/BoringOwnable.sol';
import 'tapioca-sdk/src/contracts/lzApp/NonblockingLzApp.sol';
import '../mixologist/interfaces/ISendFrom.sol';

/*

__/\\\\\\\\\\\\\\\_____/\\\\\\\\\_____/\\\\\\\\\\\\\____/\\\\\\\\\\\_______/\\\\\_____________/\\\\\\\\\_____/\\\\\\\\\____        
 _\///////\\\/////____/\\\\\\\\\\\\\__\/\\\/////////\\\_\/////\\\///______/\\\///\\\________/\\\////////____/\\\\\\\\\\\\\__       
  _______\/\\\________/\\\/////////\\\_\/\\\_______\/\\\_____\/\\\_______/\\\/__\///\\\____/\\\/____________/\\\/////////\\\_      
   _______\/\\\_______\/\\\_______\/\\\_\/\\\\\\\\\\\\\/______\/\\\______/\\\______\//\\\__/\\\_____________\/\\\_______\/\\\_     
    _______\/\\\_______\/\\\\\\\\\\\\\\\_\/\\\/////////________\/\\\_____\/\\\_______\/\\\_\/\\\_____________\/\\\\\\\\\\\\\\\_    
     _______\/\\\_______\/\\\/////////\\\_\/\\\_________________\/\\\_____\//\\\______/\\\__\//\\\____________\/\\\/////////\\\_   
      _______\/\\\_______\/\\\_______\/\\\_\/\\\_________________\/\\\______\///\\\__/\\\_____\///\\\__________\/\\\_______\/\\\_  
       _______\/\\\_______\/\\\_______\/\\\_\/\\\______________/\\\\\\\\\\\____\///\\\\\/________\////\\\\\\\\\_\/\\\_______\/\\\_ 
        _______\///________\///________\///__\///______________\///////////_______\/////_____________\/////////__\///________\///__
*/

abstract contract BaseOFTStrategy is NonblockingLzApp {
    // ************ //
    // *** VARS *** //
    // ************ //
    bool public useCustomAdapterParams;

    // ***************** //
    // *** CONSTANTS *** //
    // ***************** //
    uint256 public constant NO_EXTRA_GAS = 0;
    uint256 public constant FUNCTION_TYPE_SEND = 1;

    // ************** //
    // *** EVENTS *** //
    // ************** //
    event ReceiveFromChain(
        uint16 indexed _srcChainId,
        address indexed _dstMixologist,
        bytes _stratPayload
    );
    event SendToChain(
        uint16 indexed _srcChainId,
        address indexed _srcAddress,
        bytes _stratPayload
    );
    event SetUseCustomAdapterParams(bool _useCustomAdapterParams);

    /// @notice creates a new BaseOFTStrategy contract
    /// @param _lzEndpoint LayerZero endpoint address
    constructor(address _lzEndpoint) NonblockingLzApp(_lzEndpoint) {}

    function _nonblockingLzReceive(
        uint16, //_srcChainId
        bytes memory, /*_srcAddress*/
        uint64, /*_nonce*/
        bytes memory //payload
    ) internal override {
        //todo: oft.sendFrom
        _onReceive(0);
    }

    //todo: check params
    function _onReceive(uint256 amount) internal virtual;

    /// @notice override of the '_send' method
    function _send(
        address _from,
        uint16 _dstChainId,
        bytes memory _toAddress,
        bytes[] memory _mxCalls,
        address payable _refundAddress,
        address _zroPaymentAddress,
        bytes memory _adapterParams
    ) internal {
        // bool isOFT = ERC165(address(asset)).supportsInterface(
        //     type(ISendFrom).interfaceId
        // );
    }
}
