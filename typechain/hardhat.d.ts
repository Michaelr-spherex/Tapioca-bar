/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BaseBoringBatchable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseBoringBatchable__factory>;
    getContractFactory(
      name: "BoringBatchable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringBatchable__factory>;
    getContractFactory(
      name: "BoringFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringFactory__factory>;
    getContractFactory(
      name: "BoringOwnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnable__factory>;
    getContractFactory(
      name: "BoringOwnableData",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BoringOwnableData__factory>;
    getContractFactory(
      name: "Domain",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Domain__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Data",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Data__factory>;
    getContractFactory(
      name: "ERC20WithSupply",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20WithSupply__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155TokenReceiver__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IStrictERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrictERC20__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Enumerable__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721TokenReceiver__factory>;
    getContractFactory(
      name: "IMasterContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMasterContract__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IUniswapV3SwapCallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3SwapCallback__factory>;
    getContractFactory(
      name: "IUniswapV3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Factory__factory>;
    getContractFactory(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool__factory>;
    getContractFactory(
      name: "IUniswapV3PoolActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolDerivedState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolDerivedState__factory>;
    getContractFactory(
      name: "IUniswapV3PoolEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolEvents__factory>;
    getContractFactory(
      name: "IUniswapV3PoolImmutables",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolImmutables__factory>;
    getContractFactory(
      name: "IUniswapV3PoolOwnerActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolOwnerActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolState__factory>;
    getContractFactory(
      name: "IQuoterV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IQuoterV2__factory>;
    getContractFactory(
      name: "ISwapRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter__factory>;
    getContractFactory(
      name: "IFee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFee__factory>;
    getContractFactory(
      name: "IMarket",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMarket__factory>;
    getContractFactory(
      name: "IOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOracle__factory>;
    getContractFactory(
      name: "IPenrose",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPenrose__factory>;
    getContractFactory(
      name: "ISendFrom",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISendFrom__factory>;
    getContractFactory(
      name: "ITapiocaOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITapiocaOFT__factory>;
    getContractFactory(
      name: "ICurvePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICurvePool__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "CurveStableToUsdoBidder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveStableToUsdoBidder__factory>;
    getContractFactory(
      name: "IBidder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBidder__factory>;
    getContractFactory(
      name: "UniUsdoToWethBidder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniUsdoToWethBidder__factory>;
    getContractFactory(
      name: "ILiquidationQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILiquidationQueue__factory>;
    getContractFactory(
      name: "LiquidationQueue",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidationQueue__factory>;
    getContractFactory(
      name: "LQSingularityMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LQSingularityMock__factory>;
    getContractFactory(
      name: "MarketsHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketsHelper__factory>;
    getContractFactory(
      name: "MarketsProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MarketsProxy__factory>;
    getContractFactory(
      name: "CurvePoolMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurvePoolMock__factory>;
    getContractFactory(
      name: "MockSwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSwapper__factory>;
    getContractFactory(
      name: "MultisigMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultisigMock__factory>;
    getContractFactory(
      name: "PenroseMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PenroseMock__factory>;
    getContractFactory(
      name: "VulnMultiSwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VulnMultiSwapper__factory>;
    getContractFactory(
      name: "IERC20Uniswap",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Uniswap__factory>;
    getContractFactory(
      name: "IUniswapV2Callee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Callee__factory>;
    getContractFactory(
      name: "IUniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2ERC20__factory>;
    getContractFactory(
      name: "IUniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Factory__factory>;
    getContractFactory(
      name: "IUniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Pair__factory>;
    getContractFactory(
      name: "IUniswapV2Router01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router01__factory>;
    getContractFactory(
      name: "IUniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2Router02__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IUniswapV2FactoryExtend",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV2FactoryExtend__factory>;
    getContractFactory(
      name: "UniswapV2ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2ERC20__factory>;
    getContractFactory(
      name: "UniswapV2Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Factory__factory>;
    getContractFactory(
      name: "IMigrator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigrator__factory>;
    getContractFactory(
      name: "UniswapV2Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Pair__factory>;
    getContractFactory(
      name: "UniswapV2Router02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV2Router02__factory>;
    getContractFactory(
      name: "Penrose",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Penrose__factory>;
    getContractFactory(
      name: "ProxyDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyDeployer__factory>;
    getContractFactory(
      name: "ISingularity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISingularity__factory>;
    getContractFactory(
      name: "ERC20FactoryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20FactoryMock__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "OracleMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleMock__factory>;
    getContractFactory(
      name: "WETH9Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9Mock__factory>;
    getContractFactory(
      name: "SGLCommon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SGLCommon__factory>;
    getContractFactory(
      name: "SGLLendingBorrowing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SGLLendingBorrowing__factory>;
    getContractFactory(
      name: "SGLLiquidation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SGLLiquidation__factory>;
    getContractFactory(
      name: "SGLStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SGLStorage__factory>;
    getContractFactory(
      name: "Singularity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Singularity__factory>;
    getContractFactory(
      name: "CurveSwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CurveSwapper__factory>;
    getContractFactory(
      name: "ISwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapper__factory>;
    getContractFactory(
      name: "MultiSwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiSwapper__factory>;
    getContractFactory(
      name: "NonYieldBoxMultiSwapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonYieldBoxMultiSwapper__factory>;
    getContractFactory(
      name: "UniswapV3Swapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniswapV3Swapper__factory>;
    getContractFactory(
      name: "BaseOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseOFT__factory>;
    getContractFactory(
      name: "BigBang",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BigBang__factory>;
    getContractFactory(
      name: "IBigBang",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBigBang__factory>;
    getContractFactory(
      name: "IERC3156FlashBorrower",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrower__factory>;
    getContractFactory(
      name: "IERC3156FlashLender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLender__factory>;
    getContractFactory(
      name: "IYieldBox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYieldBox__factory>;
    getContractFactory(
      name: "IUSDO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUSDO__factory>;
    getContractFactory(
      name: "FlashBorrowerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashBorrowerMock__factory>;
    getContractFactory(
      name: "FlashMaliciousBorrowerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashMaliciousBorrowerMock__factory>;
    getContractFactory(
      name: "LZEndpointMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LZEndpointMock__factory>;
    getContractFactory(
      name: "USDO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.USDO__factory>;
    getContractFactory(
      name: "ContractThatCannotBeDeployed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractThatCannotBeDeployed__factory>;
    getContractFactory(
      name: "ContractThatReverts",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContractThatReverts__factory>;
    getContractFactory(
      name: "TapiocaDeployerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TapiocaDeployerMock__factory>;
    getContractFactory(
      name: "Multicall3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall3__factory>;
    getContractFactory(
      name: "ILayerZeroEndpoint",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroEndpoint__factory>;
    getContractFactory(
      name: "ILayerZeroReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroReceiver__factory>;
    getContractFactory(
      name: "ILayerZeroUserApplicationConfig",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroUserApplicationConfig__factory>;
    getContractFactory(
      name: "LzApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LzApp__factory>;
    getContractFactory(
      name: "NonblockingLzApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NonblockingLzApp__factory>;
    getContractFactory(
      name: "BaseOFTV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseOFTV2__factory>;
    getContractFactory(
      name: "ICommonOFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICommonOFT__factory>;
    getContractFactory(
      name: "IOFTReceiverV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOFTReceiverV2__factory>;
    getContractFactory(
      name: "IOFTV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOFTV2__factory>;
    getContractFactory(
      name: "OFTCoreV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OFTCoreV2__factory>;
    getContractFactory(
      name: "OFTV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OFTV2__factory>;
    getContractFactory(
      name: "AssetRegister",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AssetRegister__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "ERC1155TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155TokenReceiver__factory>;
    getContractFactory(
      name: "ERC721TokenReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721TokenReceiver__factory>;
    getContractFactory(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: "IWrappedNative",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWrappedNative__factory>;
    getContractFactory(
      name: "IYieldBox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYieldBox__factory>;
    getContractFactory(
      name: "NativeTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NativeTokenFactory__factory>;
    getContractFactory(
      name: "BaseERC1155Strategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseERC1155Strategy__factory>;
    getContractFactory(
      name: "BaseERC20Strategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseERC20Strategy__factory>;
    getContractFactory(
      name: "BaseStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseStrategy__factory>;
    getContractFactory(
      name: "ERC20WithoutStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20WithoutStrategy__factory>;
    getContractFactory(
      name: "YieldBox",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldBox__factory>;
    getContractFactory(
      name: "YieldBoxPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldBoxPermit__factory>;
    getContractFactory(
      name: "YieldBoxURIBuilder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.YieldBoxURIBuilder__factory>;

    getContractAt(
      name: "BaseBoringBatchable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseBoringBatchable>;
    getContractAt(
      name: "BoringBatchable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringBatchable>;
    getContractAt(
      name: "BoringFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringFactory>;
    getContractAt(
      name: "BoringOwnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringOwnable>;
    getContractAt(
      name: "BoringOwnableData",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BoringOwnableData>;
    getContractAt(
      name: "Domain",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Domain>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Data",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Data>;
    getContractAt(
      name: "ERC20WithSupply",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20WithSupply>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155TokenReceiver>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IStrictERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrictERC20>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Enumerable>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721TokenReceiver>;
    getContractAt(
      name: "IMasterContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMasterContract>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IUniswapV3SwapCallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3SwapCallback>;
    getContractAt(
      name: "IUniswapV3Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Factory>;
    getContractAt(
      name: "IUniswapV3Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Pool>;
    getContractAt(
      name: "IUniswapV3PoolActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolActions>;
    getContractAt(
      name: "IUniswapV3PoolDerivedState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolDerivedState>;
    getContractAt(
      name: "IUniswapV3PoolEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolEvents>;
    getContractAt(
      name: "IUniswapV3PoolImmutables",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolImmutables>;
    getContractAt(
      name: "IUniswapV3PoolOwnerActions",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolOwnerActions>;
    getContractAt(
      name: "IUniswapV3PoolState",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolState>;
    getContractAt(
      name: "IQuoterV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IQuoterV2>;
    getContractAt(
      name: "ISwapRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter>;
    getContractAt(
      name: "IFee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFee>;
    getContractAt(
      name: "IMarket",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMarket>;
    getContractAt(
      name: "IOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOracle>;
    getContractAt(
      name: "IPenrose",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPenrose>;
    getContractAt(
      name: "ISendFrom",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISendFrom>;
    getContractAt(
      name: "ITapiocaOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITapiocaOFT>;
    getContractAt(
      name: "ICurvePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICurvePool>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "CurveStableToUsdoBidder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveStableToUsdoBidder>;
    getContractAt(
      name: "IBidder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBidder>;
    getContractAt(
      name: "UniUsdoToWethBidder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniUsdoToWethBidder>;
    getContractAt(
      name: "ILiquidationQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILiquidationQueue>;
    getContractAt(
      name: "LiquidationQueue",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidationQueue>;
    getContractAt(
      name: "LQSingularityMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LQSingularityMock>;
    getContractAt(
      name: "MarketsHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketsHelper>;
    getContractAt(
      name: "MarketsProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MarketsProxy>;
    getContractAt(
      name: "CurvePoolMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurvePoolMock>;
    getContractAt(
      name: "MockSwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSwapper>;
    getContractAt(
      name: "MultisigMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultisigMock>;
    getContractAt(
      name: "PenroseMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PenroseMock>;
    getContractAt(
      name: "VulnMultiSwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VulnMultiSwapper>;
    getContractAt(
      name: "IERC20Uniswap",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Uniswap>;
    getContractAt(
      name: "IUniswapV2Callee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Callee>;
    getContractAt(
      name: "IUniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2ERC20>;
    getContractAt(
      name: "IUniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Factory>;
    getContractAt(
      name: "IUniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Pair>;
    getContractAt(
      name: "IUniswapV2Router01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router01>;
    getContractAt(
      name: "IUniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2Router02>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IUniswapV2FactoryExtend",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV2FactoryExtend>;
    getContractAt(
      name: "UniswapV2ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2ERC20>;
    getContractAt(
      name: "UniswapV2Factory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Factory>;
    getContractAt(
      name: "IMigrator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigrator>;
    getContractAt(
      name: "UniswapV2Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Pair>;
    getContractAt(
      name: "UniswapV2Router02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV2Router02>;
    getContractAt(
      name: "Penrose",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Penrose>;
    getContractAt(
      name: "ProxyDeployer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyDeployer>;
    getContractAt(
      name: "ISingularity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISingularity>;
    getContractAt(
      name: "ERC20FactoryMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20FactoryMock>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "OracleMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleMock>;
    getContractAt(
      name: "WETH9Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9Mock>;
    getContractAt(
      name: "SGLCommon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SGLCommon>;
    getContractAt(
      name: "SGLLendingBorrowing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SGLLendingBorrowing>;
    getContractAt(
      name: "SGLLiquidation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SGLLiquidation>;
    getContractAt(
      name: "SGLStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SGLStorage>;
    getContractAt(
      name: "Singularity",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Singularity>;
    getContractAt(
      name: "CurveSwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CurveSwapper>;
    getContractAt(
      name: "ISwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapper>;
    getContractAt(
      name: "MultiSwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiSwapper>;
    getContractAt(
      name: "NonYieldBoxMultiSwapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonYieldBoxMultiSwapper>;
    getContractAt(
      name: "UniswapV3Swapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniswapV3Swapper>;
    getContractAt(
      name: "BaseOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseOFT>;
    getContractAt(
      name: "BigBang",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BigBang>;
    getContractAt(
      name: "IBigBang",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBigBang>;
    getContractAt(
      name: "IERC3156FlashBorrower",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashBorrower>;
    getContractAt(
      name: "IERC3156FlashLender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashLender>;
    getContractAt(
      name: "IYieldBox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYieldBox>;
    getContractAt(
      name: "IUSDO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUSDO>;
    getContractAt(
      name: "FlashBorrowerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashBorrowerMock>;
    getContractAt(
      name: "FlashMaliciousBorrowerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashMaliciousBorrowerMock>;
    getContractAt(
      name: "LZEndpointMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LZEndpointMock>;
    getContractAt(
      name: "USDO",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.USDO>;
    getContractAt(
      name: "ContractThatCannotBeDeployed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractThatCannotBeDeployed>;
    getContractAt(
      name: "ContractThatReverts",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContractThatReverts>;
    getContractAt(
      name: "TapiocaDeployerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TapiocaDeployerMock>;
    getContractAt(
      name: "Multicall3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall3>;
    getContractAt(
      name: "ILayerZeroEndpoint",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroEndpoint>;
    getContractAt(
      name: "ILayerZeroReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroReceiver>;
    getContractAt(
      name: "ILayerZeroUserApplicationConfig",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroUserApplicationConfig>;
    getContractAt(
      name: "LzApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LzApp>;
    getContractAt(
      name: "NonblockingLzApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NonblockingLzApp>;
    getContractAt(
      name: "BaseOFTV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseOFTV2>;
    getContractAt(
      name: "ICommonOFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICommonOFT>;
    getContractAt(
      name: "IOFTReceiverV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOFTReceiverV2>;
    getContractAt(
      name: "IOFTV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOFTV2>;
    getContractAt(
      name: "OFTCoreV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OFTCoreV2>;
    getContractAt(
      name: "OFTV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OFTV2>;
    getContractAt(
      name: "AssetRegister",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AssetRegister>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "ERC1155TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155TokenReceiver>;
    getContractAt(
      name: "ERC721TokenReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721TokenReceiver>;
    getContractAt(
      name: "IStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: "IWrappedNative",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWrappedNative>;
    getContractAt(
      name: "IYieldBox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYieldBox>;
    getContractAt(
      name: "NativeTokenFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NativeTokenFactory>;
    getContractAt(
      name: "BaseERC1155Strategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseERC1155Strategy>;
    getContractAt(
      name: "BaseERC20Strategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseERC20Strategy>;
    getContractAt(
      name: "BaseStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseStrategy>;
    getContractAt(
      name: "ERC20WithoutStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20WithoutStrategy>;
    getContractAt(
      name: "YieldBox",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldBox>;
    getContractAt(
      name: "YieldBoxPermit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldBoxPermit>;
    getContractAt(
      name: "YieldBoxURIBuilder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.YieldBoxURIBuilder>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
