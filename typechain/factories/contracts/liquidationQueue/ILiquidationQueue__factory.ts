/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ILiquidationQueue,
  ILiquidationQueueInterface,
} from "../../../contracts/liquidationQueue/ILiquidationQueue";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "collateralAmountToLiquidate",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "swapData",
        type: "bytes",
      },
    ],
    name: "executeBids",
    outputs: [
      {
        internalType: "uint256",
        name: "amountExecuted",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "collateralLiquidated",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getNextAvailBidPool",
    outputs: [
      {
        internalType: "uint256",
        name: "i",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "available",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "totalAmount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "activationTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minBidAmount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "feeCollector",
            type: "address",
          },
          {
            internalType: "contract IBidder",
            name: "bidExecutionSwapper",
            type: "address",
          },
          {
            internalType: "contract IBidder",
            name: "usdoSwapper",
            type: "address",
          },
        ],
        internalType: "struct ILiquidationQueue.LiquidationQueueMeta",
        name: "",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "singularity",
        type: "address",
      },
    ],
    name: "init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "onlyOnce",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "swapper",
        type: "address",
      },
    ],
    name: "setBidExecutionSwapper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "swapper",
        type: "address",
      },
    ],
    name: "setUsdoSwapper",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ILiquidationQueue__factory {
  static readonly abi = _abi;
  static createInterface(): ILiquidationQueueInterface {
    return new utils.Interface(_abi) as ILiquidationQueueInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ILiquidationQueue {
    return new Contract(address, _abi, signerOrProvider) as ILiquidationQueue;
  }
}
