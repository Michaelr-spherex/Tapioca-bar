/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  PenroseMock,
  PenroseMockInterface,
} from "../../../contracts/mocks/PenroseMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract YieldBox",
        name: "_yieldBox",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x60a034608857601f6100f138819003918201601f19168301916001600160401b03831184841017608d578084926080946040528339810103126088578051906001600160a01b0390818316830360885780605c60206060930160a3565b5060676040820160a3565b50015190811603608857608052604051603a90816100b78239608051815050f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820360885756fe600080fdfea264697066735822122085d5512e2c962fb025b087d70b258ddf52172b9bb2a60d7311026a3460bcc6de64736f6c63430008120033";

type PenroseMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PenroseMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PenroseMock__factory extends ContractFactory {
  constructor(...args: PenroseMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _yieldBox: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PenroseMock> {
    return super.deploy(
      _yieldBox,
      arg1,
      arg2,
      arg3,
      overrides || {}
    ) as Promise<PenroseMock>;
  }
  override getDeployTransaction(
    _yieldBox: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<string>,
    arg3: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _yieldBox,
      arg1,
      arg2,
      arg3,
      overrides || {}
    );
  }
  override attach(address: string): PenroseMock {
    return super.attach(address) as PenroseMock;
  }
  override connect(signer: Signer): PenroseMock__factory {
    return super.connect(signer) as PenroseMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PenroseMockInterface {
    return new utils.Interface(_abi) as PenroseMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PenroseMock {
    return new Contract(address, _abi, signerOrProvider) as PenroseMock;
  }
}
