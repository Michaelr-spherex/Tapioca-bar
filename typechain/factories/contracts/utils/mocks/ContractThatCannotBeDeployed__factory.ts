/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  ContractThatCannotBeDeployed,
  ContractThatCannotBeDeployedInterface,
} from "../../../../contracts/utils/mocks/ContractThatCannotBeDeployed";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "revertStr",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052346101305760006100158154610135565b601f8111610103575b506043815580805260208082207f54686973206d6574686f642072657665727465642e20536f20617765736f6d658155602160f81b60018092015560405192839262461bcd60e51b8452806004850152819282549261007c84610135565b9384602488015282811690816000146100e157506001146100a0575b505050500390fd5b8080528281209594509291905b8284106100c857505050816044929350010138808080610098565b85548785016044015294850194869450928101926100ad565b93505050506044925060ff191682840152151560051b82010138808080610098565b8180526002601f60208420920160051c820191015b818110610125575061001e565b828155600101610118565b600080fd5b90600182811c92168015610165575b602083101461014f57565b634e487b7160e01b600052602260045260246000fd5b91607f169161014456fe";

type ContractThatCannotBeDeployedConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContractThatCannotBeDeployedConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContractThatCannotBeDeployed__factory extends ContractFactory {
  constructor(...args: ContractThatCannotBeDeployedConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractThatCannotBeDeployed> {
    return super.deploy(
      overrides || {}
    ) as Promise<ContractThatCannotBeDeployed>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ContractThatCannotBeDeployed {
    return super.attach(address) as ContractThatCannotBeDeployed;
  }
  override connect(signer: Signer): ContractThatCannotBeDeployed__factory {
    return super.connect(signer) as ContractThatCannotBeDeployed__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractThatCannotBeDeployedInterface {
    return new utils.Interface(_abi) as ContractThatCannotBeDeployedInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ContractThatCannotBeDeployed {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ContractThatCannotBeDeployed;
  }
}
