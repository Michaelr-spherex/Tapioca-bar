/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  BoringBatchable,
  BoringBatchableInterface,
} from "../../../../../@boringcrypto/boring-solidity/contracts/BoringBatchable.sol/BoringBatchable";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "innerError",
        type: "bytes",
      },
    ],
    name: "BatchError",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "calls",
        type: "bytes[]",
      },
      {
        internalType: "bool",
        name: "revertOnFail",
        type: "bool",
      },
    ],
    name: "batch",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permitToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576104c4908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c9081637c516e941461003a575063d2423b511461003557600080fd5b6100c4565b3461009e5761010036600319011261009e57600435610058816100a1565b60243590610065826100a1565b604435610071816100a1565b60a43560ff8116810361009a576100979360e4359360c4359360843592606435926103e0565b80f35b8480fd5b80fd5b73ffffffffffffffffffffffffffffffffffffffff8116036100bf57565b600080fd5b60403660031901126100bf5760043567ffffffffffffffff8082116100bf57366023830112156100bf5781600401359081116100bf573660248260051b840101116100bf576024359081151582036100bf57602461012293016101cf565b005b908092918237016000815290565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161015c57604052565b610132565b90601f8019910116810190811067ffffffffffffffff82111761015c57604052565b67ffffffffffffffff811161015c57601f01601f191660200190565b3d156101ca573d906101b082610183565b916101be6040519384610161565b82523d6000602084013e565b606090565b91909160005b8381106101e25750505050565b8060051b820135601e19833603018112156100bf57820180359067ffffffffffffffff82116100bf5760200181360381136100bf57600091829161022b60405180938193610124565b0390305af461023861019f565b901580610271575b61026c57506000198114610256576001016101d5565b634e487b7160e01b600052601160045260246000fd5b6102d4565b5083610240565b60005b83811061028b5750506000910152565b818101518382015260200161027b565b906020916102b481518092818552858086019101610278565b601f01601f1916010190565b9060206102d192818152019061029b565b90565b604481511061038b576004810151810190602081602484019303126100bf5760248101519067ffffffffffffffff82116100bf570190806043830112156100bf5760248201519161032483610183565b916103326040519384610161565b838352604484830101116100bf5761038792610355916044602085019101610278565b6040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352600483016102c0565b0390fd5b610387906040519182917fd935448500000000000000000000000000000000000000000000000000000000835260206004840152602483019061029b565b60009103126100bf57565b6040513d6000823e3d90fd5b949391969590929573ffffffffffffffffffffffffffffffffffffffff80961691823b156100bf5760ff60e496600099958a968a6040519d8e9c8d9b7fd505accf000000000000000000000000000000000000000000000000000000008d521660048c01521660248a01526044890152606488015216608486015260a485015260c48401525af18015610489576104745750565b8061048161048792610148565b806103c9565b565b6103d456fea2646970667358221220ee6b39a0ea302c3be4dc6fff4cc7ac3128b38a328cba9ec6114827d60f845ded64736f6c63430008120033";

type BoringBatchableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BoringBatchableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BoringBatchable__factory extends ContractFactory {
  constructor(...args: BoringBatchableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BoringBatchable> {
    return super.deploy(overrides || {}) as Promise<BoringBatchable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BoringBatchable {
    return super.attach(address) as BoringBatchable;
  }
  override connect(signer: Signer): BoringBatchable__factory {
    return super.connect(signer) as BoringBatchable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BoringBatchableInterface {
    return new utils.Interface(_abi) as BoringBatchableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BoringBatchable {
    return new Contract(address, _abi, signerOrProvider) as BoringBatchable;
  }
}
