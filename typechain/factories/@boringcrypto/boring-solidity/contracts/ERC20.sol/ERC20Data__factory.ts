/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ERC20Data,
  ERC20DataInterface,
} from "../../../../../@boringcrypto/boring-solidity/contracts/ERC20.sol/ERC20Data";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761018b908161001c8239f35b600080fdfe60806040818152600436101561001457600080fd5b600091823560e01c90816370a08231146100e9575080637ecebe00146100a65763dd62ed3e1461004357600080fd5b346100a257806003193601126100a25761005b61012d565b6024359073ffffffffffffffffffffffffffffffffffffffff9081831680930361009e579160209491849316825260018552828220908252845220549051908152f35b8480fd5b5080fd5b50346100a25760203660031901126100a2578060209273ffffffffffffffffffffffffffffffffffffffff6100d961012d565b1681526002845220549051908152f35b919050346101295760203660031901126101295760209273ffffffffffffffffffffffffffffffffffffffff61011d61012d565b16815280845220548152f35b8280fd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361015057565b600080fdfea264697066735822122085589092f23b984ed1f76df3fe9f8da3c8218a274fba689e8d847f4d2956ab2464736f6c63430008120033";

type ERC20DataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20DataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Data__factory extends ContractFactory {
  constructor(...args: ERC20DataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ERC20Data> {
    return super.deploy(overrides || {}) as Promise<ERC20Data>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ERC20Data {
    return super.attach(address) as ERC20Data;
  }
  override connect(signer: Signer): ERC20Data__factory {
    return super.connect(signer) as ERC20Data__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20DataInterface {
    return new utils.Interface(_abi) as ERC20DataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Data {
    return new Contract(address, _abi, signerOrProvider) as ERC20Data;
  }
}
