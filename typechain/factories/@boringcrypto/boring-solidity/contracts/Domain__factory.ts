/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Domain,
  DomainInterface,
} from "../../../../@boringcrypto/boring-solidity/contracts/Domain";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x60c034608c574660a052602081017f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218815246604083015230606083015260608252608082019180831060018060401b0384111760765782604052519020608052603a9081610092823960805181505060a051815050f35b634e487b7160e01b600052604160045260246000fd5b600080fdfe600080fdfea26469706673582212200808f25911d95c89e491f791ee73fe095c44f3285210d81054c59ec32162af9464736f6c63430008120033";

type DomainConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DomainConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Domain__factory extends ContractFactory {
  constructor(...args: DomainConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Domain> {
    return super.deploy(overrides || {}) as Promise<Domain>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Domain {
    return super.attach(address) as Domain;
  }
  override connect(signer: Signer): Domain__factory {
    return super.connect(signer) as Domain__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DomainInterface {
    return new utils.Interface(_abi) as DomainInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Domain {
    return new Contract(address, _abi, signerOrProvider) as Domain;
  }
}
