/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export interface IYieldBoxInterface extends utils.Interface {
  functions: {
    "assets(uint256)": FunctionFragment;
    "batchTransfer(address,address,uint256[],uint256[])": FunctionFragment;
    "depositAsset(uint256,address,address,uint256,uint256)": FunctionFragment;
    "nativeTokens(uint256)": FunctionFragment;
    "owner(uint256)": FunctionFragment;
    "setApprovalForAsset(address,uint256,bool)": FunctionFragment;
    "toAmount(uint256,uint256,bool)": FunctionFragment;
    "toShare(uint256,uint256,bool)": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
    "transfer(address,address,uint256,uint256)": FunctionFragment;
    "transferMultiple(address,address[],uint256,uint256[])": FunctionFragment;
    "withdraw(uint256,address,address,uint256,uint256)": FunctionFragment;
    "wrappedNative()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assets"
      | "batchTransfer"
      | "depositAsset"
      | "nativeTokens"
      | "owner"
      | "setApprovalForAsset"
      | "toAmount"
      | "toShare"
      | "totalSupply"
      | "transfer"
      | "transferMultiple"
      | "withdraw"
      | "wrappedNative"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAsset",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeTokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "owner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAsset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "toAmount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "toShare",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferMultiple",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedNative",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrappedNative",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IYieldBox extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IYieldBoxInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assets(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber] & {
        tokenType: number;
        contractAddress: string;
        strategy: string;
        tokenId: BigNumber;
      }
    >;

    batchTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      assetIds_: PromiseOrValue<BigNumberish>[],
      shares_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAsset(
      assetId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    nativeTokens(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        name: string;
        symbol: string;
        decimals: number;
      }
    >;

    owner(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { owner: string }>;

    setApprovalForAsset(
      operator: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    toAmount(
      assetId: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    toShare(
      assetId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { share: BigNumber }>;

    totalSupply(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalSupply: BigNumber }>;

    transfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferMultiple(
      from: PromiseOrValue<string>,
      tos: PromiseOrValue<string>[],
      assetId: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      assetId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wrappedNative(
      overrides?: CallOverrides
    ): Promise<[string] & { wrappedNative: string }>;
  };

  assets(
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, string, string, BigNumber] & {
      tokenType: number;
      contractAddress: string;
      strategy: string;
      tokenId: BigNumber;
    }
  >;

  batchTransfer(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    assetIds_: PromiseOrValue<BigNumberish>[],
    shares_: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAsset(
    assetId: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  nativeTokens(
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      name: string;
      symbol: string;
      decimals: number;
    }
  >;

  owner(
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setApprovalForAsset(
    operator: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  toAmount(
    assetId: PromiseOrValue<BigNumberish>,
    share: PromiseOrValue<BigNumberish>,
    roundUp: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toShare(
    assetId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    roundUp: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalSupply(
    assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transfer(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    assetId: PromiseOrValue<BigNumberish>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferMultiple(
    from: PromiseOrValue<string>,
    tos: PromiseOrValue<string>[],
    assetId: PromiseOrValue<BigNumberish>,
    shares: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    assetId: PromiseOrValue<BigNumberish>,
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wrappedNative(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    assets(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, string, string, BigNumber] & {
        tokenType: number;
        contractAddress: string;
        strategy: string;
        tokenId: BigNumber;
      }
    >;

    batchTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      assetIds_: PromiseOrValue<BigNumberish>[],
      shares_: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositAsset(
      assetId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; shareOut: BigNumber }
    >;

    nativeTokens(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        name: string;
        symbol: string;
        decimals: number;
      }
    >;

    owner(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setApprovalForAsset(
      operator: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    toAmount(
      assetId: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toShare(
      assetId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferMultiple(
      from: PromiseOrValue<string>,
      tos: PromiseOrValue<string>[],
      assetId: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      assetId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountOut: BigNumber; shareOut: BigNumber }
    >;

    wrappedNative(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    assets(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      assetIds_: PromiseOrValue<BigNumberish>[],
      shares_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAsset(
      assetId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    nativeTokens(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setApprovalForAsset(
      operator: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    toAmount(
      assetId: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toShare(
      assetId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferMultiple(
      from: PromiseOrValue<string>,
      tos: PromiseOrValue<string>[],
      assetId: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      assetId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wrappedNative(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    assets(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchTransfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      assetIds_: PromiseOrValue<BigNumberish>[],
      shares_: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAsset(
      assetId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    nativeTokens(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAsset(
      operator: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    toAmount(
      assetId: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toShare(
      assetId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      roundUp: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(
      assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      assetId: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferMultiple(
      from: PromiseOrValue<string>,
      tos: PromiseOrValue<string>[],
      assetId: PromiseOrValue<BigNumberish>,
      shares: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      assetId: PromiseOrValue<BigNumberish>,
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wrappedNative(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
