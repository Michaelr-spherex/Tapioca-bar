/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IPenrose {
  export type SwapDataStruct = { minAssetAmount: PromiseOrValue<BigNumberish> };

  export type SwapDataStructOutput = [BigNumber] & {
    minAssetAmount: BigNumber;
  };
}

export interface BigBangInterface extends utils.Interface {
  functions: {
    "accrue()": FunctionFragment;
    "accrueInfo()": FunctionFragment;
    "addCollateral(address,address,bool,uint256)": FunctionFragment;
    "asset()": FunctionFragment;
    "assetId()": FunctionFragment;
    "borrow(address,address,uint256)": FunctionFragment;
    "borrowingFee()": FunctionFragment;
    "callerFee()": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "collateral()": FunctionFragment;
    "collateralId()": FunctionFragment;
    "collateralizationRate()": FunctionFragment;
    "computeClosingFactor(address,uint256)": FunctionFragment;
    "computeLiquidatorReward(address,uint256)": FunctionFragment;
    "computeTVLInfo(address,uint256)": FunctionFragment;
    "conservator()": FunctionFragment;
    "debtRateAgainstEthMarket()": FunctionFragment;
    "debtStartPoint()": FunctionFragment;
    "depositFeesToYieldBox(address,(uint256))": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "execute(bytes[],bool)": FunctionFragment;
    "getDebtRate()": FunctionFragment;
    "getTotalDebt()": FunctionFragment;
    "init(bytes)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "liquidate(address[],uint256[],address,bytes)": FunctionFragment;
    "liquidationBonusAmount()": FunctionFragment;
    "maxDebtRate()": FunctionFragment;
    "maxLiquidatorReward()": FunctionFragment;
    "minDebtRate()": FunctionFragment;
    "minLiquidatorReward()": FunctionFragment;
    "operators(address,address)": FunctionFragment;
    "oracleData()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "penrose()": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "removeCollateral(address,address,uint256)": FunctionFragment;
    "repay(address,address,bool,uint256)": FunctionFragment;
    "setBorrowCap(uint256)": FunctionFragment;
    "setCallerFee(uint256)": FunctionFragment;
    "setCollateralizationRate(uint256)": FunctionFragment;
    "setConservator(address)": FunctionFragment;
    "setLiquidationBonusAmount(uint256)": FunctionFragment;
    "setMaxLiquidatorReward(uint256)": FunctionFragment;
    "setMinLiquidatorReward(uint256)": FunctionFragment;
    "setProtocolFee(uint256)": FunctionFragment;
    "totalBorrow()": FunctionFragment;
    "totalBorrowCap()": FunctionFragment;
    "totalCollateralShare()": FunctionFragment;
    "totalFees()": FunctionFragment;
    "transferOwnership(address,bool,bool)": FunctionFragment;
    "updateBorrowingFee(uint256)": FunctionFragment;
    "updateExchangeRate()": FunctionFragment;
    "updateOperator(address,bool)": FunctionFragment;
    "updatePause(bool)": FunctionFragment;
    "userBorrowPart(address)": FunctionFragment;
    "userCollateralShare(address)": FunctionFragment;
    "withdrawTo(uint16,bytes32,uint256,bytes,address)": FunctionFragment;
    "yieldBox()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accrue"
      | "accrueInfo"
      | "addCollateral"
      | "asset"
      | "assetId"
      | "borrow"
      | "borrowingFee"
      | "callerFee"
      | "claimOwnership"
      | "collateral"
      | "collateralId"
      | "collateralizationRate"
      | "computeClosingFactor"
      | "computeLiquidatorReward"
      | "computeTVLInfo"
      | "conservator"
      | "debtRateAgainstEthMarket"
      | "debtStartPoint"
      | "depositFeesToYieldBox"
      | "exchangeRate"
      | "execute"
      | "getDebtRate"
      | "getTotalDebt"
      | "init"
      | "isApprovedForAll"
      | "liquidate"
      | "liquidationBonusAmount"
      | "maxDebtRate"
      | "maxLiquidatorReward"
      | "minDebtRate"
      | "minLiquidatorReward"
      | "operators"
      | "oracleData"
      | "owner"
      | "paused"
      | "pendingOwner"
      | "penrose"
      | "protocolFee"
      | "removeCollateral"
      | "repay"
      | "setBorrowCap"
      | "setCallerFee"
      | "setCollateralizationRate"
      | "setConservator"
      | "setLiquidationBonusAmount"
      | "setMaxLiquidatorReward"
      | "setMinLiquidatorReward"
      | "setProtocolFee"
      | "totalBorrow"
      | "totalBorrowCap"
      | "totalCollateralShare"
      | "totalFees"
      | "transferOwnership"
      | "updateBorrowingFee"
      | "updateExchangeRate"
      | "updateOperator"
      | "updatePause"
      | "userBorrowPart"
      | "userCollateralShare"
      | "withdrawTo"
      | "yieldBox"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "accrue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accrueInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(functionFragment: "assetId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "callerFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeClosingFactor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeLiquidatorReward",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTVLInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "conservator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtRateAgainstEthMarket",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "debtStartPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositFeesToYieldBox",
    values: [PromiseOrValue<string>, IPenrose.SwapDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDebtRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationBonusAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDebtRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiquidatorReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDebtRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minLiquidatorReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operators",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "oracleData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "penrose", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowCap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCallerFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralizationRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConservator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationBonusAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLiquidatorReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLiquidatorReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateralShare",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBorrowingFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperator",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePause",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "userBorrowPart",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userCollateralShare",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "yieldBox", values?: undefined): string;

  decodeFunctionResult(functionFragment: "accrue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accrueInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeClosingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTVLInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conservator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtRateAgainstEthMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtStartPoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositFeesToYieldBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDebtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationBonusAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDebtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDebtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracleData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "penrose", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCallerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConservator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationBonusAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateralShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBorrowingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBorrowPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCollateralShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yieldBox", data: BytesLike): Result;

  events: {
    "ConservatorUpdated(address,address)": EventFragment;
    "LogAccrue(uint256,uint64)": EventFragment;
    "LogAddCollateral(address,address,uint256)": EventFragment;
    "LogApprovalForAll(address,address,bool)": EventFragment;
    "LogBorrow(address,address,uint256,uint256,uint256)": EventFragment;
    "LogBorrowCapUpdated(uint256,uint256)": EventFragment;
    "LogBorrowingFee(uint256,uint256)": EventFragment;
    "LogExchangeRate(uint256)": EventFragment;
    "LogRemoveCollateral(address,address,uint256)": EventFragment;
    "LogRepay(address,address,uint256,uint256)": EventFragment;
    "LogStabilityFee(uint256,uint256)": EventFragment;
    "LogWithdrawFees(address,uint256)": EventFragment;
    "LogYieldBoxFeesDeposit(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PausedUpdated(bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConservatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAccrue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAddCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBorrowCapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBorrowingFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogExchangeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRepay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogStabilityFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogYieldBoxFeesDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedUpdated"): EventFragment;
}

export interface ConservatorUpdatedEventObject {
  old: string;
  _new: string;
}
export type ConservatorUpdatedEvent = TypedEvent<
  [string, string],
  ConservatorUpdatedEventObject
>;

export type ConservatorUpdatedEventFilter =
  TypedEventFilter<ConservatorUpdatedEvent>;

export interface LogAccrueEventObject {
  accruedAmount: BigNumber;
  rate: BigNumber;
}
export type LogAccrueEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogAccrueEventObject
>;

export type LogAccrueEventFilter = TypedEventFilter<LogAccrueEvent>;

export interface LogAddCollateralEventObject {
  from: string;
  to: string;
  share: BigNumber;
}
export type LogAddCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  LogAddCollateralEventObject
>;

export type LogAddCollateralEventFilter =
  TypedEventFilter<LogAddCollateralEvent>;

export interface LogApprovalForAllEventObject {
  _from: string;
  _operator: string;
  _approved: boolean;
}
export type LogApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  LogApprovalForAllEventObject
>;

export type LogApprovalForAllEventFilter =
  TypedEventFilter<LogApprovalForAllEvent>;

export interface LogBorrowEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  feeAmount: BigNumber;
  part: BigNumber;
}
export type LogBorrowEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  LogBorrowEventObject
>;

export type LogBorrowEventFilter = TypedEventFilter<LogBorrowEvent>;

export interface LogBorrowCapUpdatedEventObject {
  _oldVal: BigNumber;
  _newVal: BigNumber;
}
export type LogBorrowCapUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogBorrowCapUpdatedEventObject
>;

export type LogBorrowCapUpdatedEventFilter =
  TypedEventFilter<LogBorrowCapUpdatedEvent>;

export interface LogBorrowingFeeEventObject {
  _oldVal: BigNumber;
  _newVal: BigNumber;
}
export type LogBorrowingFeeEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogBorrowingFeeEventObject
>;

export type LogBorrowingFeeEventFilter = TypedEventFilter<LogBorrowingFeeEvent>;

export interface LogExchangeRateEventObject {
  rate: BigNumber;
}
export type LogExchangeRateEvent = TypedEvent<
  [BigNumber],
  LogExchangeRateEventObject
>;

export type LogExchangeRateEventFilter = TypedEventFilter<LogExchangeRateEvent>;

export interface LogRemoveCollateralEventObject {
  from: string;
  to: string;
  share: BigNumber;
}
export type LogRemoveCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  LogRemoveCollateralEventObject
>;

export type LogRemoveCollateralEventFilter =
  TypedEventFilter<LogRemoveCollateralEvent>;

export interface LogRepayEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  part: BigNumber;
}
export type LogRepayEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogRepayEventObject
>;

export type LogRepayEventFilter = TypedEventFilter<LogRepayEvent>;

export interface LogStabilityFeeEventObject {
  _oldFee: BigNumber;
  _newFee: BigNumber;
}
export type LogStabilityFeeEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogStabilityFeeEventObject
>;

export type LogStabilityFeeEventFilter = TypedEventFilter<LogStabilityFeeEvent>;

export interface LogWithdrawFeesEventObject {
  feeTo: string;
  feesEarned: BigNumber;
}
export type LogWithdrawFeesEvent = TypedEvent<
  [string, BigNumber],
  LogWithdrawFeesEventObject
>;

export type LogWithdrawFeesEventFilter = TypedEventFilter<LogWithdrawFeesEvent>;

export interface LogYieldBoxFeesDepositEventObject {
  feeShares: BigNumber;
  tapAmount: BigNumber;
}
export type LogYieldBoxFeesDepositEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogYieldBoxFeesDepositEventObject
>;

export type LogYieldBoxFeesDepositEventFilter =
  TypedEventFilter<LogYieldBoxFeesDepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedUpdatedEventObject {
  oldState: boolean;
  newState: boolean;
}
export type PausedUpdatedEvent = TypedEvent<
  [boolean, boolean],
  PausedUpdatedEventObject
>;

export type PausedUpdatedEventFilter = TypedEventFilter<PausedUpdatedEvent>;

export interface BigBang extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BigBangInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accrue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accrueInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { debtRate: BigNumber; lastAccrued: BigNumber }
    >;

    addCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    assetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrow(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    callerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    collateralId(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralizationRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    computeClosingFactor(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToSolvency: BigNumber;
        minTVL: BigNumber;
        maxTVL: BigNumber;
      }
    >;

    conservator(overrides?: CallOverrides): Promise<[string]>;

    debtRateAgainstEthMarket(overrides?: CallOverrides): Promise<[BigNumber]>;

    debtStartPoint(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositFeesToYieldBox(
      swapper: PromiseOrValue<string>,
      swapData: IPenrose.SwapDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    execute(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDebtRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    init(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liquidate(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      swapper: PromiseOrValue<string>,
      collateralToAssetSwapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidationBonusAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxDebtRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLiquidatorReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    minDebtRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    minLiquidatorReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    operators(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    oracleData(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    penrose(overrides?: CallOverrides): Promise<[string]>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBorrowCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCallerFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCollateralizationRate(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConservator(
      _conservator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidationBonusAmount(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalBorrow(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }
    >;

    totalBorrowCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCollateralShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBorrowingFee(
      _borrowingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExchangeRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateOperator(
      operator: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userBorrowPart(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userCollateralShare(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawTo(
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<[string]>;
  };

  accrue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accrueInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { debtRate: BigNumber; lastAccrued: BigNumber }
  >;

  addCollateral(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    skim: PromiseOrValue<boolean>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  assetId(overrides?: CallOverrides): Promise<BigNumber>;

  borrow(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

  callerFee(overrides?: CallOverrides): Promise<BigNumber>;

  claimOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  collateral(overrides?: CallOverrides): Promise<string>;

  collateralId(overrides?: CallOverrides): Promise<BigNumber>;

  collateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

  computeClosingFactor(
    user: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeLiquidatorReward(
    user: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeTVLInfo(
    user: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountToSolvency: BigNumber;
      minTVL: BigNumber;
      maxTVL: BigNumber;
    }
  >;

  conservator(overrides?: CallOverrides): Promise<string>;

  debtRateAgainstEthMarket(overrides?: CallOverrides): Promise<BigNumber>;

  debtStartPoint(overrides?: CallOverrides): Promise<BigNumber>;

  depositFeesToYieldBox(
    swapper: PromiseOrValue<string>,
    swapData: IPenrose.SwapDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  execute(
    calls: PromiseOrValue<BytesLike>[],
    revertOnFail: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

  init(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liquidate(
    users: PromiseOrValue<string>[],
    maxBorrowParts: PromiseOrValue<BigNumberish>[],
    swapper: PromiseOrValue<string>,
    collateralToAssetSwapData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidationBonusAmount(overrides?: CallOverrides): Promise<BigNumber>;

  maxDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

  maxLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

  minDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

  minLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

  operators(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  oracleData(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  penrose(overrides?: CallOverrides): Promise<string>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  removeCollateral(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    arg2: PromiseOrValue<boolean>,
    part: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBorrowCap(
    _cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCallerFee(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCollateralizationRate(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConservator(
    _conservator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidationBonusAmount(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxLiquidatorReward(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinLiquidatorReward(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalBorrow(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }>;

  totalBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

  totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

  totalFees(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    direct: PromiseOrValue<boolean>,
    renounce: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBorrowingFee(
    _borrowingFee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExchangeRate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateOperator(
    operator: PromiseOrValue<string>,
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePause(
    val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userBorrowPart(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userCollateralShare(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawTo(
    dstChainId: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    adapterParams: PromiseOrValue<BytesLike>,
    refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  yieldBox(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    accrue(overrides?: CallOverrides): Promise<void>;

    accrueInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { debtRate: BigNumber; lastAccrued: BigNumber }
    >;

    addCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    asset(overrides?: CallOverrides): Promise<string>;

    assetId(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { part: BigNumber; share: BigNumber }>;

    borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

    callerFee(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    collateral(overrides?: CallOverrides): Promise<string>;

    collateralId(overrides?: CallOverrides): Promise<BigNumber>;

    collateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    computeClosingFactor(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToSolvency: BigNumber;
        minTVL: BigNumber;
        maxTVL: BigNumber;
      }
    >;

    conservator(overrides?: CallOverrides): Promise<string>;

    debtRateAgainstEthMarket(overrides?: CallOverrides): Promise<BigNumber>;

    debtStartPoint(overrides?: CallOverrides): Promise<BigNumber>;

    depositFeesToYieldBox(
      swapper: PromiseOrValue<string>,
      swapData: IPenrose.SwapDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [boolean[], string[]] & { successes: boolean[]; results: string[] }
    >;

    getDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liquidate(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      swapper: PromiseOrValue<string>,
      collateralToAssetSwapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationBonusAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    minDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    minLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    operators(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    oracleData(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    penrose(overrides?: CallOverrides): Promise<string>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBorrowCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCallerFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCollateralizationRate(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConservator(
      _conservator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationBonusAmount(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalBorrow(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }
    >;

    totalBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateBorrowingFee(
      _borrowingFee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExchangeRate(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { updated: boolean; rate: BigNumber }>;

    updateOperator(
      operator: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    userBorrowPart(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userCollateralShare(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawTo(
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    yieldBox(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ConservatorUpdated(address,address)"(
      old?: PromiseOrValue<string> | null,
      _new?: PromiseOrValue<string> | null
    ): ConservatorUpdatedEventFilter;
    ConservatorUpdated(
      old?: PromiseOrValue<string> | null,
      _new?: PromiseOrValue<string> | null
    ): ConservatorUpdatedEventFilter;

    "LogAccrue(uint256,uint64)"(
      accruedAmount?: null,
      rate?: null
    ): LogAccrueEventFilter;
    LogAccrue(accruedAmount?: null, rate?: null): LogAccrueEventFilter;

    "LogAddCollateral(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogAddCollateralEventFilter;
    LogAddCollateral(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogAddCollateralEventFilter;

    "LogApprovalForAll(address,address,bool)"(
      _from?: PromiseOrValue<string> | null,
      _operator?: PromiseOrValue<string> | null,
      _approved?: null
    ): LogApprovalForAllEventFilter;
    LogApprovalForAll(
      _from?: PromiseOrValue<string> | null,
      _operator?: PromiseOrValue<string> | null,
      _approved?: null
    ): LogApprovalForAllEventFilter;

    "LogBorrow(address,address,uint256,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      feeAmount?: null,
      part?: null
    ): LogBorrowEventFilter;
    LogBorrow(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      feeAmount?: null,
      part?: null
    ): LogBorrowEventFilter;

    "LogBorrowCapUpdated(uint256,uint256)"(
      _oldVal?: null,
      _newVal?: null
    ): LogBorrowCapUpdatedEventFilter;
    LogBorrowCapUpdated(
      _oldVal?: null,
      _newVal?: null
    ): LogBorrowCapUpdatedEventFilter;

    "LogBorrowingFee(uint256,uint256)"(
      _oldVal?: null,
      _newVal?: null
    ): LogBorrowingFeeEventFilter;
    LogBorrowingFee(_oldVal?: null, _newVal?: null): LogBorrowingFeeEventFilter;

    "LogExchangeRate(uint256)"(rate?: null): LogExchangeRateEventFilter;
    LogExchangeRate(rate?: null): LogExchangeRateEventFilter;

    "LogRemoveCollateral(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogRemoveCollateralEventFilter;
    LogRemoveCollateral(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogRemoveCollateralEventFilter;

    "LogRepay(address,address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      part?: null
    ): LogRepayEventFilter;
    LogRepay(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      part?: null
    ): LogRepayEventFilter;

    "LogStabilityFee(uint256,uint256)"(
      _oldFee?: null,
      _newFee?: null
    ): LogStabilityFeeEventFilter;
    LogStabilityFee(_oldFee?: null, _newFee?: null): LogStabilityFeeEventFilter;

    "LogWithdrawFees(address,uint256)"(
      feeTo?: PromiseOrValue<string> | null,
      feesEarned?: null
    ): LogWithdrawFeesEventFilter;
    LogWithdrawFees(
      feeTo?: PromiseOrValue<string> | null,
      feesEarned?: null
    ): LogWithdrawFeesEventFilter;

    "LogYieldBoxFeesDeposit(uint256,uint256)"(
      feeShares?: null,
      tapAmount?: null
    ): LogYieldBoxFeesDepositEventFilter;
    LogYieldBoxFeesDeposit(
      feeShares?: null,
      tapAmount?: null
    ): LogYieldBoxFeesDepositEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PausedUpdated(bool,bool)"(
      oldState?: null,
      newState?: null
    ): PausedUpdatedEventFilter;
    PausedUpdated(oldState?: null, newState?: null): PausedUpdatedEventFilter;
  };

  estimateGas: {
    accrue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    accrueInfo(overrides?: CallOverrides): Promise<BigNumber>;

    addCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    assetId(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

    callerFee(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    collateralId(overrides?: CallOverrides): Promise<BigNumber>;

    collateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    computeClosingFactor(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conservator(overrides?: CallOverrides): Promise<BigNumber>;

    debtRateAgainstEthMarket(overrides?: CallOverrides): Promise<BigNumber>;

    debtStartPoint(overrides?: CallOverrides): Promise<BigNumber>;

    depositFeesToYieldBox(
      swapper: PromiseOrValue<string>,
      swapData: IPenrose.SwapDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalDebt(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      swapper: PromiseOrValue<string>,
      collateralToAssetSwapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidationBonusAmount(overrides?: CallOverrides): Promise<BigNumber>;

    maxDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    minDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    minLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    operators(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracleData(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    penrose(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    removeCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBorrowCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCallerFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCollateralizationRate(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConservator(
      _conservator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidationBonusAmount(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

    totalFees(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBorrowingFee(
      _borrowingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExchangeRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateOperator(
      operator: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userBorrowPart(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userCollateralShare(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawTo(
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    yieldBox(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accrue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accrueInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralizationRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeClosingFactor(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    conservator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    debtRateAgainstEthMarket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    debtStartPoint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFeesToYieldBox(
      swapper: PromiseOrValue<string>,
      swapData: IPenrose.SwapDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDebtRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    init(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      swapper: PromiseOrValue<string>,
      collateralToAssetSwapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidationBonusAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxDebtRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxLiquidatorReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minDebtRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minLiquidatorReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operators(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penrose(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCallerFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCollateralizationRate(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConservator(
      _conservator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationBonusAmount(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalBorrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrowCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCollateralShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBorrowingFee(
      _borrowingFee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExchangeRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateOperator(
      operator: PromiseOrValue<string>,
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userBorrowPart(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userCollateralShare(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
