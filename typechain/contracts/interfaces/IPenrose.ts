/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IPenroseInterface extends utils.Interface {
  functions: {
    "bigBangEthDebtRate()": FunctionFragment;
    "bigBangEthMarket()": FunctionFragment;
    "feeTo()": FunctionFragment;
    "swappers(address)": FunctionFragment;
    "tapAssetId()": FunctionFragment;
    "tapToken()": FunctionFragment;
    "usdoAssetId()": FunctionFragment;
    "usdoToken()": FunctionFragment;
    "wethAssetId()": FunctionFragment;
    "wethToken()": FunctionFragment;
    "yieldBox()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bigBangEthDebtRate"
      | "bigBangEthMarket"
      | "feeTo"
      | "swappers"
      | "tapAssetId"
      | "tapToken"
      | "usdoAssetId"
      | "usdoToken"
      | "wethAssetId"
      | "wethToken"
      | "yieldBox"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bigBangEthDebtRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bigBangEthMarket",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swappers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tapAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tapToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usdoAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "usdoToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wethAssetId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "wethToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "yieldBox", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "bigBangEthDebtRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bigBangEthMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swappers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tapAssetId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tapToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdoAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdoToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wethAssetId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wethToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yieldBox", data: BytesLike): Result;

  events: {};
}

export interface IPenrose extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPenroseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bigBangEthDebtRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    bigBangEthMarket(overrides?: CallOverrides): Promise<[string]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    swappers(
      swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tapAssetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    tapToken(overrides?: CallOverrides): Promise<[string]>;

    usdoAssetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    usdoToken(overrides?: CallOverrides): Promise<[string]>;

    wethAssetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    wethToken(overrides?: CallOverrides): Promise<[string]>;

    yieldBox(overrides?: CallOverrides): Promise<[string]>;
  };

  bigBangEthDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

  bigBangEthMarket(overrides?: CallOverrides): Promise<string>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  swappers(
    swapper: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tapAssetId(overrides?: CallOverrides): Promise<BigNumber>;

  tapToken(overrides?: CallOverrides): Promise<string>;

  usdoAssetId(overrides?: CallOverrides): Promise<BigNumber>;

  usdoToken(overrides?: CallOverrides): Promise<string>;

  wethAssetId(overrides?: CallOverrides): Promise<BigNumber>;

  wethToken(overrides?: CallOverrides): Promise<string>;

  yieldBox(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bigBangEthDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    bigBangEthMarket(overrides?: CallOverrides): Promise<string>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    swappers(
      swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tapAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    tapToken(overrides?: CallOverrides): Promise<string>;

    usdoAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    usdoToken(overrides?: CallOverrides): Promise<string>;

    wethAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    wethToken(overrides?: CallOverrides): Promise<string>;

    yieldBox(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    bigBangEthDebtRate(overrides?: CallOverrides): Promise<BigNumber>;

    bigBangEthMarket(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    swappers(
      swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tapAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    tapToken(overrides?: CallOverrides): Promise<BigNumber>;

    usdoAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    usdoToken(overrides?: CallOverrides): Promise<BigNumber>;

    wethAssetId(overrides?: CallOverrides): Promise<BigNumber>;

    wethToken(overrides?: CallOverrides): Promise<BigNumber>;

    yieldBox(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bigBangEthDebtRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bigBangEthMarket(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swappers(
      swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tapAssetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tapToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdoAssetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdoToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethAssetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wethToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
