/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IPenrose {
  export type SwapDataStruct = { minAssetAmount: PromiseOrValue<BigNumberish> };

  export type SwapDataStructOutput = [BigNumber] & {
    minAssetAmount: BigNumber;
  };
}

export interface SingularityInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "accrue()": FunctionFragment;
    "accrueInfo()": FunctionFragment;
    "addAsset(address,address,bool,uint256)": FunctionFragment;
    "addCollateral(address,address,bool,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "asset()": FunctionFragment;
    "assetId()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrow(address,address,uint256)": FunctionFragment;
    "borrowOpeningFee()": FunctionFragment;
    "buyCollateral(address,uint256,uint256,uint256,address,bytes)": FunctionFragment;
    "callerFee()": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "closedCollateralizationRate()": FunctionFragment;
    "collateral()": FunctionFragment;
    "collateralId()": FunctionFragment;
    "computeClosingFactor(address,uint256)": FunctionFragment;
    "computeLiquidatorReward(address,uint256)": FunctionFragment;
    "computeTVLInfo(address,uint256)": FunctionFragment;
    "conservator()": FunctionFragment;
    "decimals()": FunctionFragment;
    "depositFeesToYieldBox(address,(uint256))": FunctionFragment;
    "exchangeRate()": FunctionFragment;
    "execute(bytes[],bool)": FunctionFragment;
    "init(bytes)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "lendingBorrowingModule()": FunctionFragment;
    "liquidate(address[],uint256[],address,bytes,bytes)": FunctionFragment;
    "liquidationBonusAmount()": FunctionFragment;
    "liquidationModule()": FunctionFragment;
    "liquidationMultiplier()": FunctionFragment;
    "liquidationQueue()": FunctionFragment;
    "lqCollateralizationRate()": FunctionFragment;
    "maxLiquidatorReward()": FunctionFragment;
    "minLiquidatorReward()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "oracle()": FunctionFragment;
    "oracleData()": FunctionFragment;
    "orderBookLiquidationMultiplier()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "penrose()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "protocolFee()": FunctionFragment;
    "removeAsset(address,address,uint256)": FunctionFragment;
    "removeCollateral(address,address,uint256)": FunctionFragment;
    "repay(address,address,bool,uint256)": FunctionFragment;
    "sellCollateral(address,uint256,uint256,address,bytes)": FunctionFragment;
    "setBorrowCap(uint256)": FunctionFragment;
    "setBorrowOpeningFee(uint256)": FunctionFragment;
    "setCallerFee(uint256)": FunctionFragment;
    "setClosedCollateralizationRate(uint256)": FunctionFragment;
    "setConservator(address)": FunctionFragment;
    "setLiquidationBonusAmount(uint256)": FunctionFragment;
    "setLiquidationMultiplier(uint256)": FunctionFragment;
    "setLiquidationQueue(address)": FunctionFragment;
    "setLqCollateralizationRate(uint256)": FunctionFragment;
    "setMaxLiquidatorReward(uint256)": FunctionFragment;
    "setMinLiquidatorReward(uint256)": FunctionFragment;
    "setOrderBookLiquidationMultiplier(uint256)": FunctionFragment;
    "setProtocolFee(uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalAsset()": FunctionFragment;
    "totalBorrow()": FunctionFragment;
    "totalBorrowCap()": FunctionFragment;
    "totalCollateralShare()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address,bool,bool)": FunctionFragment;
    "updateExchangeRate()": FunctionFragment;
    "updateLQExecutionSwapper(address)": FunctionFragment;
    "updateLQUsdoSwapper(address)": FunctionFragment;
    "updatePause(bool)": FunctionFragment;
    "userBorrowPart(address)": FunctionFragment;
    "userCollateralShare(address)": FunctionFragment;
    "withdrawFeesEarned()": FunctionFragment;
    "withdrawTo(address,uint16,bytes32,uint256,bytes,address)": FunctionFragment;
    "yieldBox()": FunctionFragment;
    "yieldBoxShares(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "accrue"
      | "accrueInfo"
      | "addAsset"
      | "addCollateral"
      | "allowance"
      | "approve"
      | "asset"
      | "assetId"
      | "balanceOf"
      | "borrow"
      | "borrowOpeningFee"
      | "buyCollateral"
      | "callerFee"
      | "claimOwnership"
      | "closedCollateralizationRate"
      | "collateral"
      | "collateralId"
      | "computeClosingFactor"
      | "computeLiquidatorReward"
      | "computeTVLInfo"
      | "conservator"
      | "decimals"
      | "depositFeesToYieldBox"
      | "exchangeRate"
      | "execute"
      | "init"
      | "isApprovedForAll"
      | "lendingBorrowingModule"
      | "liquidate"
      | "liquidationBonusAmount"
      | "liquidationModule"
      | "liquidationMultiplier"
      | "liquidationQueue"
      | "lqCollateralizationRate"
      | "maxLiquidatorReward"
      | "minLiquidatorReward"
      | "name"
      | "nonces"
      | "oracle"
      | "oracleData"
      | "orderBookLiquidationMultiplier"
      | "owner"
      | "paused"
      | "pendingOwner"
      | "penrose"
      | "permit"
      | "protocolFee"
      | "removeAsset"
      | "removeCollateral"
      | "repay"
      | "sellCollateral"
      | "setBorrowCap"
      | "setBorrowOpeningFee"
      | "setCallerFee"
      | "setClosedCollateralizationRate"
      | "setConservator"
      | "setLiquidationBonusAmount"
      | "setLiquidationMultiplier"
      | "setLiquidationQueue"
      | "setLqCollateralizationRate"
      | "setMaxLiquidatorReward"
      | "setMinLiquidatorReward"
      | "setOrderBookLiquidationMultiplier"
      | "setProtocolFee"
      | "symbol"
      | "totalAsset"
      | "totalBorrow"
      | "totalBorrowCap"
      | "totalCollateralShare"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "updateExchangeRate"
      | "updateLQExecutionSwapper"
      | "updateLQUsdoSwapper"
      | "updatePause"
      | "userBorrowPart"
      | "userCollateralShare"
      | "withdrawFeesEarned"
      | "withdrawTo"
      | "yieldBox"
      | "yieldBoxShares"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "accrue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "accrueInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAsset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(functionFragment: "assetId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowOpeningFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "callerFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closedCollateralizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeClosingFactor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeLiquidatorReward",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "computeTVLInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "conservator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositFeesToYieldBox",
    values: [PromiseOrValue<string>, IPenrose.SwapDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingBorrowingModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationBonusAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationQueue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lqCollateralizationRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxLiquidatorReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minLiquidatorReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderBookLiquidationMultiplier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "penrose", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAsset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sellCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowCap",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowOpeningFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCallerFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setClosedCollateralizationRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setConservator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationBonusAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationMultiplier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationQueue",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLqCollateralizationRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLiquidatorReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinLiquidatorReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderBookLiquidationMultiplier",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrowCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateralShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateLQExecutionSwapper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLQUsdoSwapper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePause",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "userBorrowPart",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userCollateralShare",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeesEarned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "yieldBox", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "yieldBoxShares",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "accrue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "accrueInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assetId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowOpeningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "callerFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closedCollateralizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeClosingFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeTVLInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "conservator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositFeesToYieldBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingBorrowingModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidationBonusAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lqCollateralizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracleData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "orderBookLiquidationMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "penrose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowOpeningFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCallerFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setClosedCollateralizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConservator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationBonusAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationQueue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLqCollateralizationRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinLiquidatorReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrderBookLiquidationMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrowCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateralShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLQExecutionSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLQUsdoSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBorrowPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCollateralShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeesEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yieldBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "yieldBoxShares",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ConservatorUpdated(address,address)": EventFragment;
    "LogAccrue(uint256,uint256,uint64,uint256)": EventFragment;
    "LogAddAsset(address,address,uint256,uint256)": EventFragment;
    "LogAddCollateral(address,address,uint256)": EventFragment;
    "LogApprovalForAll(address,address,bool)": EventFragment;
    "LogBorrow(address,address,uint256,uint256,uint256)": EventFragment;
    "LogBorrowCapUpdated(uint256,uint256)": EventFragment;
    "LogExchangeRate(uint256)": EventFragment;
    "LogRemoveAsset(address,address,uint256,uint256)": EventFragment;
    "LogRemoveCollateral(address,address,uint256)": EventFragment;
    "LogRepay(address,address,uint256,uint256)": EventFragment;
    "LogWithdrawFees(address,uint256)": EventFragment;
    "LogYieldBoxFeesDeposit(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PausedUpdated(bool,bool)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConservatorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAccrue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAddAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogAddCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBorrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBorrowCapUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogExchangeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRemoveCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogRepay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogWithdrawFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogYieldBoxFeesDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ConservatorUpdatedEventObject {
  old: string;
  _new: string;
}
export type ConservatorUpdatedEvent = TypedEvent<
  [string, string],
  ConservatorUpdatedEventObject
>;

export type ConservatorUpdatedEventFilter =
  TypedEventFilter<ConservatorUpdatedEvent>;

export interface LogAccrueEventObject {
  accruedAmount: BigNumber;
  feeFraction: BigNumber;
  rate: BigNumber;
  utilization: BigNumber;
}
export type LogAccrueEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  LogAccrueEventObject
>;

export type LogAccrueEventFilter = TypedEventFilter<LogAccrueEvent>;

export interface LogAddAssetEventObject {
  from: string;
  to: string;
  share: BigNumber;
  fraction: BigNumber;
}
export type LogAddAssetEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogAddAssetEventObject
>;

export type LogAddAssetEventFilter = TypedEventFilter<LogAddAssetEvent>;

export interface LogAddCollateralEventObject {
  from: string;
  to: string;
  share: BigNumber;
}
export type LogAddCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  LogAddCollateralEventObject
>;

export type LogAddCollateralEventFilter =
  TypedEventFilter<LogAddCollateralEvent>;

export interface LogApprovalForAllEventObject {
  _from: string;
  _operator: string;
  _approved: boolean;
}
export type LogApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  LogApprovalForAllEventObject
>;

export type LogApprovalForAllEventFilter =
  TypedEventFilter<LogApprovalForAllEvent>;

export interface LogBorrowEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  feeAmount: BigNumber;
  part: BigNumber;
}
export type LogBorrowEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  LogBorrowEventObject
>;

export type LogBorrowEventFilter = TypedEventFilter<LogBorrowEvent>;

export interface LogBorrowCapUpdatedEventObject {
  _oldVal: BigNumber;
  _newVal: BigNumber;
}
export type LogBorrowCapUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogBorrowCapUpdatedEventObject
>;

export type LogBorrowCapUpdatedEventFilter =
  TypedEventFilter<LogBorrowCapUpdatedEvent>;

export interface LogExchangeRateEventObject {
  rate: BigNumber;
}
export type LogExchangeRateEvent = TypedEvent<
  [BigNumber],
  LogExchangeRateEventObject
>;

export type LogExchangeRateEventFilter = TypedEventFilter<LogExchangeRateEvent>;

export interface LogRemoveAssetEventObject {
  from: string;
  to: string;
  share: BigNumber;
  fraction: BigNumber;
}
export type LogRemoveAssetEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogRemoveAssetEventObject
>;

export type LogRemoveAssetEventFilter = TypedEventFilter<LogRemoveAssetEvent>;

export interface LogRemoveCollateralEventObject {
  from: string;
  to: string;
  share: BigNumber;
}
export type LogRemoveCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  LogRemoveCollateralEventObject
>;

export type LogRemoveCollateralEventFilter =
  TypedEventFilter<LogRemoveCollateralEvent>;

export interface LogRepayEventObject {
  from: string;
  to: string;
  amount: BigNumber;
  part: BigNumber;
}
export type LogRepayEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  LogRepayEventObject
>;

export type LogRepayEventFilter = TypedEventFilter<LogRepayEvent>;

export interface LogWithdrawFeesEventObject {
  feeTo: string;
  feesEarnedFraction: BigNumber;
}
export type LogWithdrawFeesEvent = TypedEvent<
  [string, BigNumber],
  LogWithdrawFeesEventObject
>;

export type LogWithdrawFeesEventFilter = TypedEventFilter<LogWithdrawFeesEvent>;

export interface LogYieldBoxFeesDepositEventObject {
  feeShares: BigNumber;
  ethAmount: BigNumber;
}
export type LogYieldBoxFeesDepositEvent = TypedEvent<
  [BigNumber, BigNumber],
  LogYieldBoxFeesDepositEventObject
>;

export type LogYieldBoxFeesDepositEventFilter =
  TypedEventFilter<LogYieldBoxFeesDepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedUpdatedEventObject {
  oldState: boolean;
  newState: boolean;
}
export type PausedUpdatedEvent = TypedEvent<
  [boolean, boolean],
  PausedUpdatedEventObject
>;

export type PausedUpdatedEventFilter = TypedEventFilter<PausedUpdatedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Singularity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SingularityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    accrue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accrueInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        interestPerSecond: BigNumber;
        lastAccrued: BigNumber;
        feesEarnedFraction: BigNumber;
      }
    >;

    addAsset(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    assetId(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    borrow(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowOpeningFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyCollateral(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    callerFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closedCollateralizationRate(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateral(overrides?: CallOverrides): Promise<[string]>;

    collateralId(overrides?: CallOverrides): Promise<[BigNumber]>;

    computeClosingFactor(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToSolvency: BigNumber;
        minTVL: BigNumber;
        maxTVL: BigNumber;
      }
    >;

    conservator(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    depositFeesToYieldBox(
      swapper: PromiseOrValue<string>,
      swapData: IPenrose.SwapDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    execute(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    init(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lendingBorrowingModule(overrides?: CallOverrides): Promise<[string]>;

    liquidate(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      swapper: PromiseOrValue<string>,
      collateralToAssetSwapData: PromiseOrValue<BytesLike>,
      usdoToBorrowedSwapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidationBonusAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationModule(overrides?: CallOverrides): Promise<[string]>;

    liquidationMultiplier(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidationQueue(overrides?: CallOverrides): Promise<[string]>;

    lqCollateralizationRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxLiquidatorReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    minLiquidatorReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    oracleData(overrides?: CallOverrides): Promise<[string]>;

    orderBookLiquidationMultiplier(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    penrose(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeAsset(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sellCollateral(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBorrowCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBorrowOpeningFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCallerFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setClosedCollateralizationRate(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setConservator(
      _conservator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidationBonusAmount(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidationMultiplier(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLiquidationQueue(
      _liquidationQueue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLqCollateralizationRate(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOrderBookLiquidationMultiplier(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtocolFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAsset(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }
    >;

    totalBorrow(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }
    >;

    totalBorrowCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalCollateralShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExchangeRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLQExecutionSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLQUsdoSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userBorrowPart(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userCollateralShare(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawFeesEarned(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawTo(
      from: PromiseOrValue<string>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<[string]>;

    yieldBoxShares(
      _user: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  accrue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accrueInfo(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      interestPerSecond: BigNumber;
      lastAccrued: BigNumber;
      feesEarnedFraction: BigNumber;
    }
  >;

  addAsset(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    skim: PromiseOrValue<boolean>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addCollateral(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    skim: PromiseOrValue<boolean>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allowance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  assetId(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  borrow(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowOpeningFee(overrides?: CallOverrides): Promise<BigNumber>;

  buyCollateral(
    from: PromiseOrValue<string>,
    borrowAmount: PromiseOrValue<BigNumberish>,
    supplyAmount: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    swapper: PromiseOrValue<string>,
    dexData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callerFee(overrides?: CallOverrides): Promise<BigNumber>;

  claimOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closedCollateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

  collateral(overrides?: CallOverrides): Promise<string>;

  collateralId(overrides?: CallOverrides): Promise<BigNumber>;

  computeClosingFactor(
    user: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeLiquidatorReward(
    user: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  computeTVLInfo(
    user: PromiseOrValue<string>,
    _exchangeRate: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amountToSolvency: BigNumber;
      minTVL: BigNumber;
      maxTVL: BigNumber;
    }
  >;

  conservator(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  depositFeesToYieldBox(
    swapper: PromiseOrValue<string>,
    swapData: IPenrose.SwapDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

  execute(
    calls: PromiseOrValue<BytesLike>[],
    revertOnFail: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  init(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lendingBorrowingModule(overrides?: CallOverrides): Promise<string>;

  liquidate(
    users: PromiseOrValue<string>[],
    maxBorrowParts: PromiseOrValue<BigNumberish>[],
    swapper: PromiseOrValue<string>,
    collateralToAssetSwapData: PromiseOrValue<BytesLike>,
    usdoToBorrowedSwapData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidationBonusAmount(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationModule(overrides?: CallOverrides): Promise<string>;

  liquidationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  liquidationQueue(overrides?: CallOverrides): Promise<string>;

  lqCollateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

  maxLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

  minLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  oracle(overrides?: CallOverrides): Promise<string>;

  oracleData(overrides?: CallOverrides): Promise<string>;

  orderBookLiquidationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  penrose(overrides?: CallOverrides): Promise<string>;

  permit(
    owner_: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  removeAsset(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    fraction: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeCollateral(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    skim: PromiseOrValue<boolean>,
    part: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sellCollateral(
    from: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    minAmountOut: PromiseOrValue<BigNumberish>,
    swapper: PromiseOrValue<string>,
    dexData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBorrowCap(
    _cap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBorrowOpeningFee(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCallerFee(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setClosedCollateralizationRate(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setConservator(
    _conservator: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidationBonusAmount(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidationMultiplier(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLiquidationQueue(
    _liquidationQueue: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLqCollateralizationRate(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxLiquidatorReward(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinLiquidatorReward(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOrderBookLiquidationMultiplier(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtocolFee(
    _val: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAsset(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }>;

  totalBorrow(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }>;

  totalBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

  totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    direct: PromiseOrValue<boolean>,
    renounce: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExchangeRate(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLQExecutionSwapper(
    _swapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLQUsdoSwapper(
    _swapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePause(
    val: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userBorrowPart(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userCollateralShare(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawFeesEarned(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawTo(
    from: PromiseOrValue<string>,
    dstChainId: PromiseOrValue<BigNumberish>,
    receiver: PromiseOrValue<BytesLike>,
    amount: PromiseOrValue<BigNumberish>,
    adapterParams: PromiseOrValue<BytesLike>,
    refundAddress: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  yieldBox(overrides?: CallOverrides): Promise<string>;

  yieldBoxShares(
    _user: PromiseOrValue<string>,
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    accrue(overrides?: CallOverrides): Promise<void>;

    accrueInfo(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        interestPerSecond: BigNumber;
        lastAccrued: BigNumber;
        feesEarnedFraction: BigNumber;
      }
    >;

    addAsset(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    assetId(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { part: BigNumber; share: BigNumber }>;

    borrowOpeningFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyCollateral(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callerFee(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    closedCollateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<string>;

    collateralId(overrides?: CallOverrides): Promise<BigNumber>;

    computeClosingFactor(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToSolvency: BigNumber;
        minTVL: BigNumber;
        maxTVL: BigNumber;
      }
    >;

    conservator(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    depositFeesToYieldBox(
      swapper: PromiseOrValue<string>,
      swapData: IPenrose.SwapDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [boolean[], string[]] & { successes: boolean[]; results: string[] }
    >;

    init(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lendingBorrowingModule(overrides?: CallOverrides): Promise<string>;

    liquidate(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      swapper: PromiseOrValue<string>,
      collateralToAssetSwapData: PromiseOrValue<BytesLike>,
      usdoToBorrowedSwapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidationBonusAmount(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationModule(overrides?: CallOverrides): Promise<string>;

    liquidationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationQueue(overrides?: CallOverrides): Promise<string>;

    lqCollateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    minLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<string>;

    oracleData(overrides?: CallOverrides): Promise<string>;

    orderBookLiquidationMultiplier(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    penrose(overrides?: CallOverrides): Promise<string>;

    permit(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    removeAsset(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellCollateral(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBorrowCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBorrowOpeningFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCallerFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setClosedCollateralizationRate(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setConservator(
      _conservator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationBonusAmount(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationMultiplier(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationQueue(
      _liquidationQueue: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLqCollateralizationRate(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOrderBookLiquidationMultiplier(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocolFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAsset(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }
    >;

    totalBorrow(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { elastic: BigNumber; base: BigNumber }
    >;

    totalBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExchangeRate(
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { updated: boolean; rate: BigNumber }>;

    updateLQExecutionSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLQUsdoSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    userBorrowPart(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userCollateralShare(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFeesEarned(overrides?: CallOverrides): Promise<void>;

    withdrawTo(
      from: PromiseOrValue<string>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    yieldBox(overrides?: CallOverrides): Promise<string>;

    yieldBoxShares(
      _user: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "ConservatorUpdated(address,address)"(
      old?: PromiseOrValue<string> | null,
      _new?: PromiseOrValue<string> | null
    ): ConservatorUpdatedEventFilter;
    ConservatorUpdated(
      old?: PromiseOrValue<string> | null,
      _new?: PromiseOrValue<string> | null
    ): ConservatorUpdatedEventFilter;

    "LogAccrue(uint256,uint256,uint64,uint256)"(
      accruedAmount?: null,
      feeFraction?: null,
      rate?: null,
      utilization?: null
    ): LogAccrueEventFilter;
    LogAccrue(
      accruedAmount?: null,
      feeFraction?: null,
      rate?: null,
      utilization?: null
    ): LogAccrueEventFilter;

    "LogAddAsset(address,address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null,
      fraction?: null
    ): LogAddAssetEventFilter;
    LogAddAsset(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null,
      fraction?: null
    ): LogAddAssetEventFilter;

    "LogAddCollateral(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogAddCollateralEventFilter;
    LogAddCollateral(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogAddCollateralEventFilter;

    "LogApprovalForAll(address,address,bool)"(
      _from?: PromiseOrValue<string> | null,
      _operator?: PromiseOrValue<string> | null,
      _approved?: null
    ): LogApprovalForAllEventFilter;
    LogApprovalForAll(
      _from?: PromiseOrValue<string> | null,
      _operator?: PromiseOrValue<string> | null,
      _approved?: null
    ): LogApprovalForAllEventFilter;

    "LogBorrow(address,address,uint256,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      feeAmount?: null,
      part?: null
    ): LogBorrowEventFilter;
    LogBorrow(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      feeAmount?: null,
      part?: null
    ): LogBorrowEventFilter;

    "LogBorrowCapUpdated(uint256,uint256)"(
      _oldVal?: null,
      _newVal?: null
    ): LogBorrowCapUpdatedEventFilter;
    LogBorrowCapUpdated(
      _oldVal?: null,
      _newVal?: null
    ): LogBorrowCapUpdatedEventFilter;

    "LogExchangeRate(uint256)"(rate?: null): LogExchangeRateEventFilter;
    LogExchangeRate(rate?: null): LogExchangeRateEventFilter;

    "LogRemoveAsset(address,address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null,
      fraction?: null
    ): LogRemoveAssetEventFilter;
    LogRemoveAsset(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null,
      fraction?: null
    ): LogRemoveAssetEventFilter;

    "LogRemoveCollateral(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogRemoveCollateralEventFilter;
    LogRemoveCollateral(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      share?: null
    ): LogRemoveCollateralEventFilter;

    "LogRepay(address,address,uint256,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      part?: null
    ): LogRepayEventFilter;
    LogRepay(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
      part?: null
    ): LogRepayEventFilter;

    "LogWithdrawFees(address,uint256)"(
      feeTo?: PromiseOrValue<string> | null,
      feesEarnedFraction?: null
    ): LogWithdrawFeesEventFilter;
    LogWithdrawFees(
      feeTo?: PromiseOrValue<string> | null,
      feesEarnedFraction?: null
    ): LogWithdrawFeesEventFilter;

    "LogYieldBoxFeesDeposit(uint256,uint256)"(
      feeShares?: null,
      ethAmount?: null
    ): LogYieldBoxFeesDepositEventFilter;
    LogYieldBoxFeesDeposit(
      feeShares?: null,
      ethAmount?: null
    ): LogYieldBoxFeesDepositEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PausedUpdated(bool,bool)"(
      oldState?: null,
      newState?: null
    ): PausedUpdatedEventFilter;
    PausedUpdated(oldState?: null, newState?: null): PausedUpdatedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    accrue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    accrueInfo(overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    assetId(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrow(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowOpeningFee(overrides?: CallOverrides): Promise<BigNumber>;

    buyCollateral(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    callerFee(overrides?: CallOverrides): Promise<BigNumber>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closedCollateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    collateral(overrides?: CallOverrides): Promise<BigNumber>;

    collateralId(overrides?: CallOverrides): Promise<BigNumber>;

    computeClosingFactor(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    conservator(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    depositFeesToYieldBox(
      swapper: PromiseOrValue<string>,
      swapData: IPenrose.SwapDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangeRate(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    init(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lendingBorrowingModule(overrides?: CallOverrides): Promise<BigNumber>;

    liquidate(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      swapper: PromiseOrValue<string>,
      collateralToAssetSwapData: PromiseOrValue<BytesLike>,
      usdoToBorrowedSwapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidationBonusAmount(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationModule(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationMultiplier(overrides?: CallOverrides): Promise<BigNumber>;

    liquidationQueue(overrides?: CallOverrides): Promise<BigNumber>;

    lqCollateralizationRate(overrides?: CallOverrides): Promise<BigNumber>;

    maxLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    minLiquidatorReward(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    oracleData(overrides?: CallOverrides): Promise<BigNumber>;

    orderBookLiquidationMultiplier(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    penrose(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    protocolFee(overrides?: CallOverrides): Promise<BigNumber>;

    removeAsset(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sellCollateral(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBorrowCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBorrowOpeningFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCallerFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setClosedCollateralizationRate(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setConservator(
      _conservator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidationBonusAmount(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidationMultiplier(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLiquidationQueue(
      _liquidationQueue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLqCollateralizationRate(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOrderBookLiquidationMultiplier(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtocolFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAsset(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrowCap(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateralShare(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExchangeRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLQExecutionSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLQUsdoSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userBorrowPart(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userCollateralShare(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFeesEarned(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawTo(
      from: PromiseOrValue<string>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    yieldBox(overrides?: CallOverrides): Promise<BigNumber>;

    yieldBoxShares(
      _user: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accrueInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAsset(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrow(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowOpeningFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyCollateral(
      from: PromiseOrValue<string>,
      borrowAmount: PromiseOrValue<BigNumberish>,
      supplyAmount: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    callerFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closedCollateralizationRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    computeClosingFactor(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeLiquidatorReward(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    computeTVLInfo(
      user: PromiseOrValue<string>,
      _exchangeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    conservator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositFeesToYieldBox(
      swapper: PromiseOrValue<string>,
      swapData: IPenrose.SwapDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      calls: PromiseOrValue<BytesLike>[],
      revertOnFail: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    init(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lendingBorrowingModule(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      users: PromiseOrValue<string>[],
      maxBorrowParts: PromiseOrValue<BigNumberish>[],
      swapper: PromiseOrValue<string>,
      collateralToAssetSwapData: PromiseOrValue<BytesLike>,
      usdoToBorrowedSwapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidationBonusAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidationMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidationQueue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lqCollateralizationRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLiquidatorReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minLiquidatorReward(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderBookLiquidationMultiplier(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penrose(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner_: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    protocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAsset(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeCollateral(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      skim: PromiseOrValue<boolean>,
      part: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sellCollateral(
      from: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      minAmountOut: PromiseOrValue<BigNumberish>,
      swapper: PromiseOrValue<string>,
      dexData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowCap(
      _cap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBorrowOpeningFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCallerFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setClosedCollateralizationRate(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setConservator(
      _conservator: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationBonusAmount(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationMultiplier(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidationQueue(
      _liquidationQueue: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLqCollateralizationRate(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinLiquidatorReward(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOrderBookLiquidationMultiplier(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFee(
      _val: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrowCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCollateralShare(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      direct: PromiseOrValue<boolean>,
      renounce: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExchangeRate(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLQExecutionSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLQUsdoSwapper(
      _swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePause(
      val: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userBorrowPart(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userCollateralShare(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawFeesEarned(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTo(
      from: PromiseOrValue<string>,
      dstChainId: PromiseOrValue<BigNumberish>,
      receiver: PromiseOrValue<BytesLike>,
      amount: PromiseOrValue<BigNumberish>,
      adapterParams: PromiseOrValue<BytesLike>,
      refundAddress: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    yieldBox(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yieldBoxShares(
      _user: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
