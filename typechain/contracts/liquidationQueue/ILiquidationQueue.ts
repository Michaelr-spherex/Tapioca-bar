/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ILiquidationQueue {
  export type LiquidationQueueMetaStruct = {
    activationTime: PromiseOrValue<BigNumberish>;
    minBidAmount: PromiseOrValue<BigNumberish>;
    feeCollector: PromiseOrValue<string>;
    bidExecutionSwapper: PromiseOrValue<string>;
    usdoSwapper: PromiseOrValue<string>;
  };

  export type LiquidationQueueMetaStructOutput = [
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    activationTime: BigNumber;
    minBidAmount: BigNumber;
    feeCollector: string;
    bidExecutionSwapper: string;
    usdoSwapper: string;
  };
}

export interface ILiquidationQueueInterface extends utils.Interface {
  functions: {
    "executeBids(uint256,bytes)": FunctionFragment;
    "getNextAvailBidPool()": FunctionFragment;
    "init((uint256,uint256,address,address,address),address)": FunctionFragment;
    "onlyOnce()": FunctionFragment;
    "setBidExecutionSwapper(address)": FunctionFragment;
    "setUsdoSwapper(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "executeBids"
      | "getNextAvailBidPool"
      | "init"
      | "onlyOnce"
      | "setBidExecutionSwapper"
      | "setUsdoSwapper"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeBids",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNextAvailBidPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      ILiquidationQueue.LiquidationQueueMetaStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "onlyOnce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBidExecutionSwapper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsdoSwapper",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeBids",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextAvailBidPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "onlyOnce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBidExecutionSwapper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsdoSwapper",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ILiquidationQueue extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidationQueueInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeBids(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getNextAvailBidPool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        i: BigNumber;
        available: boolean;
        totalAmount: BigNumber;
      }
    >;

    init(
      arg0: ILiquidationQueue.LiquidationQueueMetaStruct,
      singularity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onlyOnce(overrides?: CallOverrides): Promise<[boolean]>;

    setBidExecutionSwapper(
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUsdoSwapper(
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  executeBids(
    collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
    swapData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getNextAvailBidPool(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber] & {
      i: BigNumber;
      available: boolean;
      totalAmount: BigNumber;
    }
  >;

  init(
    arg0: ILiquidationQueue.LiquidationQueueMetaStruct,
    singularity: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onlyOnce(overrides?: CallOverrides): Promise<boolean>;

  setBidExecutionSwapper(
    swapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUsdoSwapper(
    swapper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    executeBids(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        amountExecuted: BigNumber;
        collateralLiquidated: BigNumber;
      }
    >;

    getNextAvailBidPool(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber] & {
        i: BigNumber;
        available: boolean;
        totalAmount: BigNumber;
      }
    >;

    init(
      arg0: ILiquidationQueue.LiquidationQueueMetaStruct,
      singularity: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    onlyOnce(overrides?: CallOverrides): Promise<boolean>;

    setBidExecutionSwapper(
      swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUsdoSwapper(
      swapper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    executeBids(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getNextAvailBidPool(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      arg0: ILiquidationQueue.LiquidationQueueMetaStruct,
      singularity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onlyOnce(overrides?: CallOverrides): Promise<BigNumber>;

    setBidExecutionSwapper(
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUsdoSwapper(
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeBids(
      collateralAmountToLiquidate: PromiseOrValue<BigNumberish>,
      swapData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getNextAvailBidPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      arg0: ILiquidationQueue.LiquidationQueueMetaStruct,
      singularity: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onlyOnce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBidExecutionSwapper(
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUsdoSwapper(
      swapper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
