/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type RebaseStruct = {
  elastic: PromiseOrValue<BigNumberish>;
  base: PromiseOrValue<BigNumberish>;
};

export type RebaseStructOutput = [BigNumber, BigNumber] & {
  elastic: BigNumber;
  base: BigNumber;
};

export declare namespace MarketsHelper {
  export type MarketInfoStruct = {
    collateral: PromiseOrValue<string>;
    collateralId: PromiseOrValue<BigNumberish>;
    asset: PromiseOrValue<string>;
    assetId: PromiseOrValue<BigNumberish>;
    oracle: PromiseOrValue<string>;
    oracleData: PromiseOrValue<BytesLike>;
    totalCollateralShare: PromiseOrValue<BigNumberish>;
    userCollateralShare: PromiseOrValue<BigNumberish>;
    totalBorrow: RebaseStruct;
    userBorrowPart: PromiseOrValue<BigNumberish>;
    currentExchangeRate: PromiseOrValue<BigNumberish>;
    spotExchangeRate: PromiseOrValue<BigNumberish>;
    oracleExchangeRate: PromiseOrValue<BigNumberish>;
    totalBorrowCap: PromiseOrValue<BigNumberish>;
  };

  export type MarketInfoStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    RebaseStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    collateral: string;
    collateralId: BigNumber;
    asset: string;
    assetId: BigNumber;
    oracle: string;
    oracleData: string;
    totalCollateralShare: BigNumber;
    userCollateralShare: BigNumber;
    totalBorrow: RebaseStructOutput;
    userBorrowPart: BigNumber;
    currentExchangeRate: BigNumber;
    spotExchangeRate: BigNumber;
    oracleExchangeRate: BigNumber;
    totalBorrowCap: BigNumber;
  };

  export type BigBangInfoStruct = {
    market: MarketsHelper.MarketInfoStruct;
    accrueInfo: IBigBang.AccrueInfoStruct;
  };

  export type BigBangInfoStructOutput = [
    MarketsHelper.MarketInfoStructOutput,
    IBigBang.AccrueInfoStructOutput
  ] & {
    market: MarketsHelper.MarketInfoStructOutput;
    accrueInfo: IBigBang.AccrueInfoStructOutput;
  };

  export type SingularityInfoStruct = {
    market: MarketsHelper.MarketInfoStruct;
    totalAsset: RebaseStruct;
    userAssetFraction: PromiseOrValue<BigNumberish>;
    accrueInfo: ISingularity.AccrueInfoStruct;
  };

  export type SingularityInfoStructOutput = [
    MarketsHelper.MarketInfoStructOutput,
    RebaseStructOutput,
    BigNumber,
    ISingularity.AccrueInfoStructOutput
  ] & {
    market: MarketsHelper.MarketInfoStructOutput;
    totalAsset: RebaseStructOutput;
    userAssetFraction: BigNumber;
    accrueInfo: ISingularity.AccrueInfoStructOutput;
  };
}

export declare namespace IBigBang {
  export type AccrueInfoStruct = {
    debtRate: PromiseOrValue<BigNumberish>;
    lastAccrued: PromiseOrValue<BigNumberish>;
  };

  export type AccrueInfoStructOutput = [BigNumber, BigNumber] & {
    debtRate: BigNumber;
    lastAccrued: BigNumber;
  };
}

export declare namespace ISingularity {
  export type AccrueInfoStruct = {
    interestPerSecond: PromiseOrValue<BigNumberish>;
    lastAccrued: PromiseOrValue<BigNumberish>;
    feesEarnedFraction: PromiseOrValue<BigNumberish>;
  };

  export type AccrueInfoStructOutput = [BigNumber, BigNumber, BigNumber] & {
    interestPerSecond: BigNumber;
    lastAccrued: BigNumber;
    feesEarnedFraction: BigNumber;
  };
}

export interface MarketsHelperInterface extends utils.Interface {
  functions: {
    "bigBangMarketInfo(address,address[])": FunctionFragment;
    "depositAddCollateralAndBorrow(address,uint256,uint256,bool,bool,bytes)": FunctionFragment;
    "depositAndAddAsset(address,uint256,bool)": FunctionFragment;
    "depositAndRepay(address,uint256,uint256,bool)": FunctionFragment;
    "depositRepayAndRemoveCollateral(address,uint256,uint256,uint256,bool,bool)": FunctionFragment;
    "getAmountForAssetFraction(address,uint256)": FunctionFragment;
    "getAmountForBorrowPart(address,uint256)": FunctionFragment;
    "getCollateralAmountForShare(address,uint256)": FunctionFragment;
    "getCollateralSharesForBorrowPart(address,uint256,uint256,uint256)": FunctionFragment;
    "mintAndLend(address,address,uint256,uint256,bool)": FunctionFragment;
    "removeAssetAndRepay(address,address,uint256,uint256,uint256,bool,bytes)": FunctionFragment;
    "singularityMarketInfo(address,address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bigBangMarketInfo"
      | "depositAddCollateralAndBorrow"
      | "depositAndAddAsset"
      | "depositAndRepay"
      | "depositRepayAndRemoveCollateral"
      | "getAmountForAssetFraction"
      | "getAmountForBorrowPart"
      | "getCollateralAmountForShare"
      | "getCollateralSharesForBorrowPart"
      | "mintAndLend"
      | "removeAssetAndRepay"
      | "singularityMarketInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bigBangMarketInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAddCollateralAndBorrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndAddAsset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositAndRepay",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositRepayAndRemoveCollateral",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForAssetFraction",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountForBorrowPart",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralAmountForShare",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateralSharesForBorrowPart",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintAndLend",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAssetAndRepay",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "singularityMarketInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "bigBangMarketInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAddCollateralAndBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndAddAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositAndRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositRepayAndRemoveCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForAssetFraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountForBorrowPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralAmountForShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateralSharesForBorrowPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintAndLend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAssetAndRepay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "singularityMarketInfo",
    data: BytesLike
  ): Result;

  events: {};
}

export interface MarketsHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MarketsHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MarketsHelper.BigBangInfoStructOutput[]]>;

    depositAddCollateralAndBorrow(
      market: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _borrowAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      withdraw_: PromiseOrValue<boolean>,
      _withdrawData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAndAddAsset(
      singularity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositAndRepay(
      market: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositRepayAndRemoveCollateral(
      market: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      withdraw_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { collateralShares: BigNumber }>;

    mintAndLend(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _borrowAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAssetAndRepay(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      _removeShare: PromiseOrValue<BigNumberish>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _collateralShare: PromiseOrValue<BigNumberish>,
      withdraw_: PromiseOrValue<boolean>,
      withdrawData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[MarketsHelper.SingularityInfoStructOutput[]]>;
  };

  bigBangMarketInfo(
    who: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MarketsHelper.BigBangInfoStructOutput[]>;

  depositAddCollateralAndBorrow(
    market: PromiseOrValue<string>,
    _collateralAmount: PromiseOrValue<BigNumberish>,
    _borrowAmount: PromiseOrValue<BigNumberish>,
    deposit_: PromiseOrValue<boolean>,
    withdraw_: PromiseOrValue<boolean>,
    _withdrawData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAndAddAsset(
    singularity: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    deposit_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositAndRepay(
    market: PromiseOrValue<string>,
    _depositAmount: PromiseOrValue<BigNumberish>,
    _repayAmount: PromiseOrValue<BigNumberish>,
    deposit_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositRepayAndRemoveCollateral(
    market: PromiseOrValue<string>,
    _depositAmount: PromiseOrValue<BigNumberish>,
    _repayAmount: PromiseOrValue<BigNumberish>,
    _collateralAmount: PromiseOrValue<BigNumberish>,
    deposit_: PromiseOrValue<boolean>,
    withdraw_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAmountForAssetFraction(
    singularity: PromiseOrValue<string>,
    fraction: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountForBorrowPart(
    market: PromiseOrValue<string>,
    borrowPart: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralAmountForShare(
    market: PromiseOrValue<string>,
    share: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollateralSharesForBorrowPart(
    market: PromiseOrValue<string>,
    borrowPart: PromiseOrValue<BigNumberish>,
    liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
    exchangeRatePrecision: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  mintAndLend(
    singularity: PromiseOrValue<string>,
    bingBang: PromiseOrValue<string>,
    _collateralAmount: PromiseOrValue<BigNumberish>,
    _borrowAmount: PromiseOrValue<BigNumberish>,
    deposit_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAssetAndRepay(
    singularity: PromiseOrValue<string>,
    bingBang: PromiseOrValue<string>,
    _removeShare: PromiseOrValue<BigNumberish>,
    _repayAmount: PromiseOrValue<BigNumberish>,
    _collateralShare: PromiseOrValue<BigNumberish>,
    withdraw_: PromiseOrValue<boolean>,
    withdrawData_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  singularityMarketInfo(
    who: PromiseOrValue<string>,
    markets: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<MarketsHelper.SingularityInfoStructOutput[]>;

  callStatic: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MarketsHelper.BigBangInfoStructOutput[]>;

    depositAddCollateralAndBorrow(
      market: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _borrowAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      withdraw_: PromiseOrValue<boolean>,
      _withdrawData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndAddAsset(
      singularity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositAndRepay(
      market: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositRepayAndRemoveCollateral(
      market: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      withdraw_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAndLend(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _borrowAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAssetAndRepay(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      _removeShare: PromiseOrValue<BigNumberish>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _collateralShare: PromiseOrValue<BigNumberish>,
      withdraw_: PromiseOrValue<boolean>,
      withdrawData_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<MarketsHelper.SingularityInfoStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositAddCollateralAndBorrow(
      market: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _borrowAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      withdraw_: PromiseOrValue<boolean>,
      _withdrawData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAndAddAsset(
      singularity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositAndRepay(
      market: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositRepayAndRemoveCollateral(
      market: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      withdraw_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintAndLend(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _borrowAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAssetAndRepay(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      _removeShare: PromiseOrValue<BigNumberish>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _collateralShare: PromiseOrValue<BigNumberish>,
      withdraw_: PromiseOrValue<boolean>,
      withdrawData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bigBangMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositAddCollateralAndBorrow(
      market: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _borrowAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      withdraw_: PromiseOrValue<boolean>,
      _withdrawData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAndAddAsset(
      singularity: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositAndRepay(
      market: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositRepayAndRemoveCollateral(
      market: PromiseOrValue<string>,
      _depositAmount: PromiseOrValue<BigNumberish>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      withdraw_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAmountForAssetFraction(
      singularity: PromiseOrValue<string>,
      fraction: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralAmountForShare(
      market: PromiseOrValue<string>,
      share: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollateralSharesForBorrowPart(
      market: PromiseOrValue<string>,
      borrowPart: PromiseOrValue<BigNumberish>,
      liquidationMultiplierPrecision: PromiseOrValue<BigNumberish>,
      exchangeRatePrecision: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintAndLend(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      _collateralAmount: PromiseOrValue<BigNumberish>,
      _borrowAmount: PromiseOrValue<BigNumberish>,
      deposit_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAssetAndRepay(
      singularity: PromiseOrValue<string>,
      bingBang: PromiseOrValue<string>,
      _removeShare: PromiseOrValue<BigNumberish>,
      _repayAmount: PromiseOrValue<BigNumberish>,
      _collateralShare: PromiseOrValue<BigNumberish>,
      withdraw_: PromiseOrValue<boolean>,
      withdrawData_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    singularityMarketInfo(
      who: PromiseOrValue<string>,
      markets: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
