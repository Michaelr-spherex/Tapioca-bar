/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface ProxyDeployerInterface extends utils.Interface {
  functions: {
    "deployWithCreate2(address,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxies(uint256)": FunctionFragment;
    "proxiesCount()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deployWithCreate2"
      | "owner"
      | "proxies"
      | "proxiesCount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployWithCreate2",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxies",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiesCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "deployWithCreate2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proxies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiesCount",
    data: BytesLike
  ): Result;

  events: {
    "LogDeploy(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogDeploy"): EventFragment;
}

export interface LogDeployEventObject {
  lzEndpoint: string;
  cloneAddress: string;
}
export type LogDeployEvent = TypedEvent<[string, string], LogDeployEventObject>;

export type LogDeployEventFilter = TypedEventFilter<LogDeployEvent>;

export interface ProxyDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProxyDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployWithCreate2(
      _lzEndpoint: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    proxiesCount(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  deployWithCreate2(
    _lzEndpoint: PromiseOrValue<string>,
    _salt: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxies(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  proxiesCount(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    deployWithCreate2(
      _lzEndpoint: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    proxiesCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "LogDeploy(address,address)"(
      lzEndpoint?: PromiseOrValue<string> | null,
      cloneAddress?: PromiseOrValue<string> | null
    ): LogDeployEventFilter;
    LogDeploy(
      lzEndpoint?: PromiseOrValue<string> | null,
      cloneAddress?: PromiseOrValue<string> | null
    ): LogDeployEventFilter;
  };

  estimateGas: {
    deployWithCreate2(
      _lzEndpoint: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiesCount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deployWithCreate2(
      _lzEndpoint: PromiseOrValue<string>,
      _salt: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxies(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiesCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
